'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 71,
  * marshal size 32;
  * ActionRequestActionID has 52 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class ActionRequestActionID(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    local_storage_of_the_requested_information = EnumValue(1, "Local storage of the requested information")
    inform_sm_of_event_ran_out_of_ammunition = EnumValue(2, "Inform SM of event 'ran out of ammunition'")
    inform_sm_of_event_killed_in_action = EnumValue(3, "Inform SM of event 'killed in action'")
    inform_sm_of_event_damage = EnumValue(4, "Inform SM of event 'damage'")
    inform_sm_of_event_mobility_disabled = EnumValue(5, "Inform SM of event 'mobility disabled'")
    inform_sm_of_event_fire_disabled = EnumValue(6, "Inform SM of event 'fire disabled'")
    inform_sm_of_event_ran_out_of_fuel = EnumValue(7, "Inform SM of event 'ran out of fuel'")
    recall_checkpoint_data = EnumValue(8, "Recall checkpoint data")
    recall_initial_parameters = EnumValue(9, "Recall initial parameters")
    initiate_tether_lead = EnumValue(10, "Initiate tether-lead")
    initiate_tether_follow = EnumValue(11, "Initiate tether-follow")
    unthether = EnumValue(12, "Unthether")
    initiate_service_station_resupply = EnumValue(13, "Initiate service station resupply")
    initiate_tailgate_resupply = EnumValue(14, "Initiate tailgate resupply")
    initiate_hitch_lead = EnumValue(15, "Initiate hitch lead")
    initiate_hitch_follow = EnumValue(16, "Initiate hitch follow")
    unhitch = EnumValue(17, "Unhitch")
    mount = EnumValue(18, "Mount")
    dismount = EnumValue(19, "Dismount")
    start_drc_daily_readiness_check = EnumValue(20, "Start DRC (Daily Readiness Check)")
    stop_drc = EnumValue(21, "Stop DRC")
    data_query = EnumValue(22, "Data Query")
    status_request = EnumValue(23, "Status Request")
    send_object_state_data = EnumValue(24, "Send Object State Data")
    reconstitute = EnumValue(25, "Reconstitute")
    lock_site_configuration = EnumValue(26, "Lock Site Configuration")
    unlock_site_configuration = EnumValue(27, "Unlock Site Configuration")
    update_site_configuration = EnumValue(28, "Update Site Configuration")
    query_site_configuration = EnumValue(29, "Query Site Configuration")
    tethering_information = EnumValue(30, "Tethering Information")
    mount_intent = EnumValue(31, "Mount Intent")
    accept_subscription = EnumValue(33, "Accept Subscription")
    unsubscribe = EnumValue(34, "Unsubscribe")
    teleport_entity = EnumValue(35, "Teleport entity")
    change_aggregate_state = EnumValue(36, "Change aggregate state")
    request_start_pdu = EnumValue(37, "Request Start PDU")
    wakeup_get_ready_for_initialization = EnumValue(38, "Wakeup get ready for initialization")
    initialize_internal_parameters = EnumValue(39, "Initialize internal parameters")
    send_plan_data = EnumValue(40, "Send plan data")
    synchronize_internal_clocks = EnumValue(41, "Synchronize internal clocks")
    run = EnumValue(42, "Run")
    save_internal_parameters = EnumValue(43, "Save internal parameters")
    simulate_malfunction = EnumValue(44, "Simulate malfunction")
    join_exercise = EnumValue(45, "Join exercise")
    resign_exercise = EnumValue(46, "Resign exercise")
    time_advance = EnumValue(47, "Time advance")
    taccsf_los_request_type_1 = EnumValue(100, "TACCSF LOS Request-Type 1")
    taccsf_los_request_type_2 = EnumValue(101, "TACCSF LOS Request-Type 2")
    airmount_mount_request = EnumValue(4303, "Airmount Mount Request")
    airmount_dismount_request = EnumValue(4304, "Airmount Dismount Request")
    airmount_information_request = EnumValue(4305, "Airmount Information Request")
    default = other

    def get_marshaled_size(self):
        return 32
