'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 189,
  * marshal size 8;
  * CollisionType has 55 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class CollisionType(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    inelastic = EnumValue(0, "Inelastic")
    elastic = EnumValue(1, "Elastic")
    the_boom_nozzle_is_in_physical_contact_with_the_receptacle_and_the_booms_signal_system_is_operative = EnumValue(2, "The boom nozzle is in physical contact with the receptacle and the booms signal system is operative.")
    the_boom_trainers_signal_system_has_sent_a_disconnect_signal_that_should_cause_the_receivers_refueling_receptacle_to_unlatch_unless_there_is_a_malfunction = EnumValue(3, "The boom trainers signal system has sent a disconnect signal that should cause the receivers refueling receptacle to unlatch (unless there is a malfunction).")
    disconnect_without_a_signal_being_sent_disconnected_by_physical_means_brute_force_disconnect_controlled_tension_disconnect = EnumValue(4, "Disconnect without a signal being sent - disconnected by physical means (brute force disconnect, controlled tension disconnect).")
    the_boom_nozzle_is_in_physical_contact_with_the_receptacle_and_the_booms_signal_system_is_inoperative = EnumValue(5, "The boom nozzle is in physical contact with the receptacle and the booms signal system is inoperative.")
    boom_simulator_has_calculated_that_the_receivers_latches_have_been_damaged = EnumValue(6, "Boom simulator has calculated that the receivers latches have been damaged.")
    ar_receptacle_door_1_damaged = EnumValue(7, "AR receptacle door #1 damaged.")
    ar_receptacle_door_2_damaged = EnumValue(8, "AR receptacle door #2 damaged.")
    pilots_cockpit_windshield_damaged = EnumValue(9, "Pilots Cockpit Windshield damaged")
    copilots_cockpit_windshield_damaged = EnumValue(10, "Copilots Cockpit Windshield damaged")
    pilots_left_side_window_damaged = EnumValue(11, "Pilots Left Side Window damaged")
    copilots_right_side_window_damaged = EnumValue(12, "Copilots Right Side Window damaged")
    pilots_eyebrow_window_damaged = EnumValue(13, "Pilots Eyebrow Window damaged")
    copilots_eyebrow_window_damaged = EnumValue(14, "Copilots Eyebrow Window damaged")
    mls_glide_slope_1_antenna_damaged = EnumValue(15, "MLS Glide Slope #1 Antenna damaged")
    mls_glide_slope_2_antenna_damaged = EnumValue(16, "MLS Glide Slope #2 Antenna damaged")
    ils_glide_1_slope_antenna_damaged = EnumValue(17, "ILS Glide #1 Slope Antenna damaged")
    ils_glide_2_slope_antenna_damaged = EnumValue(18, "ILS Glide #2 Slope Antenna damaged")
    ske_omni_antenna_damaged = EnumValue(19, "SKE OMNI Antenna damaged")
    ske_directional_antenna_damaged = EnumValue(20, "SKE Directional Antenna damaged")
    weather_radar_antenna_damaged = EnumValue(21, "Weather Radar Antenna damaged")
    com_1_arc_210_antenna_damaged = EnumValue(22, "Com #1 ARC 210 Antenna damaged")
    tacan_antenna_damaged = EnumValue(23, "TACAN Antenna damaged")
    mls_antenna_damaged = EnumValue(24, "MLS Antenna damaged")
    af_satcom_antenna_damaged = EnumValue(25, "AF SATCOM Antenna damaged")
    aero_i_satcom_antenna_damaged = EnumValue(26, "AERO-I SATCOM Antenna damaged")
    aero_h_satcom_antenna_damaged = EnumValue(28, "AERO-H SATCOM Antenna damaged")
    uhf_satcom_antenna_damaged = EnumValue(29, "UHF SATCOM Antenna damaged")
    hmsa_antenna_damaged = EnumValue(30, "HMSA Antenna damaged")
    iff_antenna_damaged = EnumValue(31, "IFF Antenna damaged")
    left_side_landing_taxi_light_damaged = EnumValue(32, "Left Side Landing/Taxi Light damaged")
    right_side_landing_taxi_light_damaged = EnumValue(33, "Right Side Landing/Taxi Light damaged")
    left_side_runway_turnoff_light_damaged = EnumValue(34, "Left Side Runway Turnoff Light damaged")
    right_side_runway_turnoff_light_damaged = EnumValue(35, "Right Side Runway Turnoff Light damaged")
    left_side_formation_light_damaged = EnumValue(36, "Left Side Formation Light damaged")
    right_side_formation_light_damaged = EnumValue(37, "Right Side Formation Light damaged")
    left_side_nacelle_scanning_light_damaged = EnumValue(38, "Left Side Nacelle Scanning Light damaged")
    right_side_nacelle_scanning_light_damaged = EnumValue(39, "Right Side Nacelle Scanning Light damaged")
    copilot_pitot_static_probe_1_damaged = EnumValue(40, "Copilot Pitot Static Probe #1 damaged")
    copilot_pitot_static_probe_2_damaged = EnumValue(41, "Copilot Pitot Static Probe #2 damaged")
    pilot_pitot_static_probe_1_damaged = EnumValue(42, "Pilot Pitot Static Probe #1 damaged")
    pilot_pitot_static_probe_2_damaged = EnumValue(43, "Pilot Pitot Static Probe #2 damaged")
    total_air_temperature_probe_1_damaged = EnumValue(44, "Total Air Temperature Probe #1 damaged")
    total_air_temperature_probe_2_damaged = EnumValue(45, "Total Air Temperature Probe #2 damaged")
    angle_of_attack_sensor_1_damaged = EnumValue(46, "Angle of Attack Sensor #1 damaged")
    angle_of_attack_sensor_2_damaged = EnumValue(47, "Angle of Attack Sensor #2 damaged")
    angle_of_attack_sensor_3_damaged = EnumValue(48, "Angle of Attack Sensor #3 damaged")
    angle_of_attack_sensor_4_damaged = EnumValue(49, "Angle of Attack Sensor #4 damaged")
    angle_of_attack_sensor_5_damaged = EnumValue(50, "Angle of Attack Sensor #5 damaged")
    angle_of_attack_sensor_6_damaged = EnumValue(51, "Angle of Attack Sensor #6 damaged")
    left_side_spoiler_damaged = EnumValue(52, "Left Side Spoiler damaged")
    right_side_spoiler_damaged = EnumValue(53, "Right Side Spoiler damaged")
    upper_tcas_antenna_kc_135_r_t_damaged = EnumValue(54, "Upper TCAS antenna (KC-135 R/T) damaged")
    boom_nozzle_has_cleared_the_receivers_refueling_receptacle = EnumValue(55, "Boom nozzle has cleared the receiver's refueling receptacle")
    default = inelastic

    def get_marshaled_size(self):
        return 8
