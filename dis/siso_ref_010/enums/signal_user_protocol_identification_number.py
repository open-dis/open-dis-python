'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 177,
  * marshal size 32;
  * SignalUserProtocolIdentificationNumber has 36 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class SignalUserProtocolIdentificationNumber(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    ccsil = EnumValue(1, "CCSIL")
    a2atd_sincgars_erf = EnumValue(5, "A2ATD SINCGARS ERF")
    a2atd_cac2 = EnumValue(6, "A2ATD CAC2")
    battle_command = EnumValue(20, "Battle Command")
    afiwc_iads_track_report = EnumValue(30, "AFIWC IADS Track Report")
    afiwc_iads_comm_c2_message = EnumValue(31, "AFIWC IADS Comm C2 Message")
    afiwc_iads_ground_control_interceptor_gci_command = EnumValue(32, "AFIWC IADS Ground Control Interceptor (GCI) Command")
    afiwc_voice_text_message = EnumValue(35, "AFIWC Voice Text Message")
    modsaf_text_radio = EnumValue(177, "ModSAF Text Radio")
    cctt_sincgars_erf_lockout = EnumValue(200, "CCTT SINCGARS ERF-LOCKOUT")
    cctt_sincgars_erf_hopset = EnumValue(201, "CCTT SINCGARS ERF-HOPSET")
    cctt_sincgars_otar = EnumValue(202, "CCTT SINCGARS OTAR")
    cctt_sincgars_data = EnumValue(203, "CCTT SINCGARS DATA")
    modsaf_fwa_forward_air_controller = EnumValue(546, "ModSAF FWA Forward Air Controller")
    modsaf_threat_ada_c3 = EnumValue(832, "ModSAF Threat ADA C3")
    f_16_mtc_afapd_protocol = EnumValue(1000, "F-16 MTC AFAPD Protocol")
    f_16_mtc_idl_protocol = EnumValue(1100, "F-16 MTC IDL Protocol")
    automatic_identification_system_ais = EnumValue(1371, "Automatic Identification System (AIS)")
    modsaf_artillery_fire_control = EnumValue(4570, "ModSAF Artillery Fire Control")
    agts = EnumValue(5361, "AGTS")
    gc3 = EnumValue(6000, "GC3")
    wncp_data = EnumValue(6010, "WNCP data")
    spoken_text_message = EnumValue(6020, "Spoken text message")
    longbow_idm_message = EnumValue(6661, "Longbow IDM message")
    comanche_idm_message = EnumValue(6662, "Comanche IDM message")
    longbow_airborne_tacfire_message = EnumValue(6663, "Longbow Airborne TACFIRE Message")
    longbow_ground_tacfire_message = EnumValue(6664, "Longbow Ground TACFIRE Message")
    longbow_afapd_message = EnumValue(6665, "Longbow AFAPD Message")
    longbow_erf_message = EnumValue(6666, "Longbow ERF message")
    vmf_idm = EnumValue(7000, "VMF IDM")
    csar_radio_survivor_message = EnumValue(7010, "CSAR Radio Survivor Message")
    csar_radio_interrogator_message = EnumValue(7020, "CSAR Radio Interrogator Message")
    image_file_transfer_message = EnumValue(7030, "Image File Transfer Message")
    geotag_data_message = EnumValue(7040, "Geotag Data Message")
    tactical_video_regeneration_data = EnumValue(7050, "Tactical Video Regeneration Data")
    call_message = EnumValue(8000, "Call Message")
    default = ccsil

    def get_marshaled_size(self):
        return 32
