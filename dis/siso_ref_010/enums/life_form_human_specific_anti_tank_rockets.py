'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 518,
  * marshal size 8;
  * LifeFormHumanSpecificAntiTankRockets has 71 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificAntiTankRockets(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _82mm_b_300 = EnumValue(10, "82mm B-300")
    _82mm_shipon = EnumValue(11, "82mm Shipon")
    _83mm_mk153_mod_0_smaw = EnumValue(12, "83mm MK153 Mod 0 SMAW")
    _66mm_m72_law = EnumValue(20, "66mm M72 LAW")
    _66mm_m72a1_law = EnumValue(21, "66mm M72A1 LAW")
    _66mm_m72a2_law = EnumValue(22, "66mm M72A2 LAW")
    _66mm_m72a3_law = EnumValue(23, "66mm M72A3 LAW")
    _66mm_m72a4_law = EnumValue(24, "66mm M72A4 LAW")
    _66mm_m72a5_law = EnumValue(25, "66mm M72A5 LAW")
    _66mm_m72a6_law = EnumValue(26, "66mm M72A6 LAW")
    _66mm_m72a7_law = EnumValue(27, "66mm M72A7 LAW")
    _66mm_m72e8_law = EnumValue(28, "66mm M72E8 LAW")
    _66mm_m72e9_law = EnumValue(29, "66mm M72E9 LAW")
    _66mm_m72e10_law = EnumValue(30, "66mm M72E10 LAW")
    _66mm_m72as_law = EnumValue(31, "66mm M72AS LAW")
    _94mm_law_80 = EnumValue(35, "94mm LAW 80")
    _60mm_m1_bazooka = EnumValue(40, "60mm M1 Bazooka")
    _60mm_m1a1_bazooka = EnumValue(41, "60mm M1A1 Bazooka")
    _60mm_m9_bazooka = EnumValue(42, "60mm M9 Bazooka")
    _60mm_m9a1_bazooka = EnumValue(43, "60mm M9A1 Bazooka")
    _89mm_m20_super_bazooka = EnumValue(44, "89mm M20 Super Bazooka")
    _89mm_m20a1_super_bazooka = EnumValue(45, "89mm M20A1 Super Bazooka")
    _89mm_m20b1_super_bazooka = EnumValue(46, "89mm M20B1 Super Bazooka")
    _89mm_m20a1b1_super_bazooka = EnumValue(47, "89mm M20A1B1 Super Bazooka")
    _89mm_m25_three_shot_bazooka = EnumValue(48, "89mm M25 Three Shot Bazooka")
    _89mm_instalaza_m65 = EnumValue(49, "89mm Instalaza M65")
    _90mm_instalaza_c90 = EnumValue(50, "90mm Instalaza C90")
    _90mm_c90_cr_m3 = EnumValue(51, "90mm C90-CR (M3)")
    _90mm_c90_cr_am_m3 = EnumValue(52, "90mm C90-CR-AM (M3)")
    _90mm_c90_cr_bk_m3 = EnumValue(53, "90mm C90-CR-BK (M3)")
    _90mm_c90_cr_in_m3 = EnumValue(54, "90mm C90-CR-IN (M3)")
    _60mm_pzf_3 = EnumValue(60, "60mm PzF 3")
    _60mm_pzf_3_it = EnumValue(61, "60mm PzF 3-IT")
    _60mm_pzf_3_bunkerfaust = EnumValue(62, "60mm PzF 3 Bunkerfaust")
    _44mm_pzf_44 = EnumValue(65, "44mm PzF 44")
    _30mm_panzerfaust_30 = EnumValue(70, "30mm Panzerfaust 30")
    _50mm_panzerfaust_60 = EnumValue(71, "50mm Panzerfaust 60")
    _60mm_panzerfaust_100 = EnumValue(72, "60mm Panzerfaust 100")
    _60mm_panzerfaust_150 = EnumValue(73, "60mm Panzerfaust 150")
    _88mm_panzerschreck_rpzb = EnumValue(75, "88mm Panzerschreck RPzB")
    _83mm_rl_83_blindicide = EnumValue(80, "83mm RL-83 Blindicide")
    _100mm_rl_100_blindicide = EnumValue(81, "100mm RL-100 Blindicide")
    _90mm_m79_osa_wasp = EnumValue(85, "90mm M79 Osa (Wasp)")
    _64mm_m80_zolja_wasp = EnumValue(86, "64mm M80 Zolja (Wasp)")
    _67mm_armburst_crossbow = EnumValue(90, "67mm Armburst Crossbow")
    _40mm_type_69_rpg = EnumValue(93, "40mm Type-69 RPG")
    _89mm_piat = EnumValue(95, "89mm PIAT")
    _40mm_rpg_2 = EnumValue(100, "40mm RPG-2")
    _64mm_rpg_18_mukha = EnumValue(101, "64mm RPG-18 Mukha")
    _725mm_rpg_22_netto = EnumValue(102, "72.5mm RPG-22 Netto")
    _725mm_rpg_26_aglen = EnumValue(103, "72.5mm RPG-26 Aglen")
    _105mm_rpg_29_vampir = EnumValue(104, "105mm RPG-29 Vampir")
    _105mm_rpg_30_kryuk = EnumValue(105, "105mm RPG-30 Kryuk")
    _105mm_rpg_32_nashshab = EnumValue(106, "105mm RPG-32 Nashshab")
    _105mm_rpg_27_tavolga = EnumValue(107, "105mm RPG-27 Tavolga")
    _125mm_rpg_28_klyukva = EnumValue(108, "125mm RPG-28 Klyukva")
    _40mm_rpg_7 = EnumValue(110, "40mm RPG-7")
    _40mm_psrl_1_rpg_7usa = EnumValue(111, "40mm PSRL-1 (RPG-7USA)")
    _40mm_gs_777_psrl_2 = EnumValue(112, "40mm GS-777/PSRL-2")
    _68mm_rpg_76_komar_mosquito = EnumValue(120, "68mm RPG-76 Komar (Mosquito)")
    _120mm_sep_dard_120 = EnumValue(125, "120mm SEP Dard 120")
    _58mm_wasp_58 = EnumValue(128, "58mm WASP 58")
    _73mm_lrac_73_50 = EnumValue(130, "73mm LRAC 73-50")
    _89mm_lrac_89_f1_strim = EnumValue(131, "89mm LRAC 89-F1 STRIM")
    _90mm_matador_man_portable_anti_tank_anti_door = EnumValue(135, "90mm MATADOR (Man-Portable Anti-Tank, Anti-DOoR)")
    _90mm_matador_mp = EnumValue(136, "90mm MATADOR-MP")
    _90mm_matador_wb = EnumValue(137, "90mm MATADOR-WB")
    _90mm_matador_as = EnumValue(138, "90mm MATADOR-AS")
    _78mm_mara_anti_tank_rocket_launcher = EnumValue(140, "78mm MARA Anti-Tank Rocket Launcher")
    _120mm_type_98_pf98 = EnumValue(145, "120mm Type-98 PF98")
    default = other

    def get_marshaled_size(self):
        return 8
