'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 10,
  * marshal size 8;
  * PlatformAirCategory has 34 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class PlatformAirCategory(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    fighter_air_defense = EnumValue(1, "Fighter/Air Defense")
    attack_strike = EnumValue(2, "Attack/Strike")
    bomber = EnumValue(3, "Bomber")
    cargo_tanker = EnumValue(4, "Cargo/Tanker")
    asw_patrol_observation = EnumValue(5, "ASW/Patrol/Observation")
    electronic_warfare_ew = EnumValue(6, "Electronic Warfare (EW)")
    reconnaissance = EnumValue(7, "Reconnaissance")
    surveillance_c2_airborne_early_warning = EnumValue(8, "Surveillance/C2 (Airborne Early Warning)")
    air_sea_rescue_asr = EnumValue(9, "Air-Sea Rescue (ASR)")
    attack_helicopter = EnumValue(20, "Attack Helicopter")
    utility_helicopter = EnumValue(21, "Utility Helicopter")
    anti_submarine_warfare_patrol_helicopter = EnumValue(22, "Anti-Submarine Warfare/Patrol Helicopter")
    cargo_helicopter = EnumValue(23, "Cargo Helicopter")
    observation_helicopter = EnumValue(24, "Observation Helicopter")
    special_operations_helicopter = EnumValue(25, "Special Operations Helicopter")
    training_helicopter = EnumValue(26, "Training Helicopter")
    trainer = EnumValue(40, "Trainer")
    unmanned = EnumValue(50, "Unmanned")
    non_combatant_commercial_aircraft = EnumValue(57, "Non-Combatant Commercial Aircraft")
    # XREF UID 274 - CLASS PlatformAirCivilianUltralightNonrigidWingAircraftSubcategories 
    civilian_ultralight_aircraft_non_rigid_wing = EnumValue(80, "Civilian Ultralight Aircraft, Non-rigid Wing")
    # XREF UID 275 - CLASS PlatformAirCivilianUltralightRigidWingAircraftSubcategories 
    civilian_ultralight_aircraft_rigid_wing = EnumValue(81, "Civilian Ultralight Aircraft, Rigid Wing")
    # XREF UID 276 - CLASS PlatformAirCivilianGliderSubcategories 
    civilian_fixed_wing_aircraft_glider = EnumValue(83, "Civilian Fixed Wing Aircraft, Glider")
    # XREF UID 277 - CLASS PlatformAirCivilianFixedWingAircraftSubcategories 
    civilian_fixed_wing_aircraft_light_sport_up_to_1320_lbs_600_kg = EnumValue(84, "Civilian Fixed Wing Aircraft, Light Sport (up to 1320 lbs / 600 kg)")
    # XREF UID 277 - CLASS PlatformAirCivilianFixedWingAircraftSubcategories 
    civilian_fixed_wing_aircraft_small_up_to_12_500_lbs_5_670_kg = EnumValue(85, "Civilian Fixed Wing Aircraft, Small (up to 12,500 lbs / 5,670 kg)")
    # XREF UID 277 - CLASS PlatformAirCivilianFixedWingAircraftSubcategories 
    civilian_fixed_wing_aircraft_medium_up_to_41_000_lbs_18_597_kg = EnumValue(86, "Civilian Fixed Wing Aircraft, Medium (up to 41,000 lbs / 18,597 kg)")
    # XREF UID 277 - CLASS PlatformAirCivilianFixedWingAircraftSubcategories 
    civilian_fixed_wing_aircraft_large_up_to_255_000_lbs_115_666_kg = EnumValue(87, "Civilian Fixed Wing Aircraft, Large (up to 255,000 lbs / 115,666 kg)")
    # XREF UID 277 - CLASS PlatformAirCivilianFixedWingAircraftSubcategories 
    civilian_fixed_wing_aircraft_heavy_above_255_000_lbs_115_666_kg = EnumValue(88, "Civilian Fixed Wing Aircraft, Heavy (above 255,000 lbs / 115,666 kg)")
    # XREF UID 278 - CLASS PlatformAirCivilianHelicopterSubcategories 
    civilian_helicopter_small_up_to_7_000_lbs_3_175_kg = EnumValue(90, "Civilian Helicopter, Small (up to 7,000 lbs / 3,175 kg)")
    # XREF UID 278 - CLASS PlatformAirCivilianHelicopterSubcategories 
    civilian_helicopter_medium_up_to_20_000_lbs_9_072_kg = EnumValue(91, "Civilian Helicopter, Medium (up to 20,000 lbs / 9,072 kg)")
    # XREF UID 278 - CLASS PlatformAirCivilianHelicopterSubcategories 
    civilian_helicopter_large_above_20_000_lbs_9_072_kg = EnumValue(92, "Civilian Helicopter, Large (above 20,000 lbs / 9,072 kg)")
    civilian_autogyro = EnumValue(93, "Civilian Autogyro")
    # XREF UID 279 - CLASS PlatformAirCivilianLighterthanAirBalloonSubcategories 
    civilian_lighter_than_air_balloon = EnumValue(100, "Civilian Lighter than Air, Balloon")
    # XREF UID 280 - CLASS PlatformAirCivilianLighterthanAirAirshipSubcategories 
    civilian_lighter_than_air_airship = EnumValue(101, "Civilian Lighter than Air, Airship")
    default = other

    def get_marshaled_size(self):
        return 8
