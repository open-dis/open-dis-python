'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 60,
  * marshal size 16;
  * MunitionDescriptorWarhead has 96 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class MunitionDescriptorWarhead(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    cargo_variable_submunitions = EnumValue(10, "Cargo (Variable Submunitions)")
    fuel_air_explosive = EnumValue(20, "Fuel/Air Explosive")
    glass_beads = EnumValue(30, "Glass Beads")
    _1_um = EnumValue(31, "1 um")
    _5_um = EnumValue(32, "5 um")
    _10_um = EnumValue(33, "10 um")
    high_explosive_he = EnumValue(1000, "High Explosive (HE)")
    he_plastic = EnumValue(1100, "HE, Plastic")
    he_incendiary = EnumValue(1200, "HE, Incendiary")
    he_fragmentation = EnumValue(1300, "HE, Fragmentation")
    he_anti_tank = EnumValue(1400, "HE, Anti-Tank")
    he_bomblets = EnumValue(1500, "HE, Bomblets")
    he_shaped_charge = EnumValue(1600, "HE, Shaped Charge")
    he_continuous_rod = EnumValue(1610, "HE, Continuous Rod")
    he_tungsten_ball = EnumValue(1615, "HE, Tungsten Ball")
    he_blast_fragmentation = EnumValue(1620, "HE, Blast Fragmentation")
    he_steerable_darts_with_he = EnumValue(1625, "HE, Steerable Darts with HE")
    he_darts = EnumValue(1630, "HE, Darts")
    he_flechettes = EnumValue(1635, "HE, Flechettes")
    he_directed_fragmentation = EnumValue(1640, "HE, Directed Fragmentation")
    he_semi_armor_piercing_sap = EnumValue(1645, "HE, Semi-Armor Piercing (SAP)")
    he_shaped_charge_fragmentation = EnumValue(1650, "HE, Shaped Charge Fragmentation")
    he_semi_armor_piercing_fragmentation = EnumValue(1655, "HE, Semi-Armor Piercing, Fragmentation")
    he_hollow_charge = EnumValue(1660, "HE, Hollow Charge")
    he_double_hollow_charge = EnumValue(1665, "HE, Double Hollow Charge")
    he_general_purpose = EnumValue(1670, "HE, General Purpose")
    he_blast_penetrator = EnumValue(1675, "HE, Blast Penetrator")
    he_rod_penetrator = EnumValue(1680, "HE, Rod Penetrator")
    he_anti_personnel = EnumValue(1685, "HE, Anti-Personnel")
    he_shaped_charge_fragmentation_incendiary = EnumValue(1690, "HE, Shaped Charge, Fragmentation, Incendiary")
    he_penetrator_blast_fragmentation = EnumValue(1695, "HE, Penetrator, Blast, Fragmentation")
    smoke = EnumValue(2000, "Smoke")
    wp_white_phosphorus = EnumValue(2005, "WP (White Phosphorus)")
    fogo_fog_oil = EnumValue(2010, "FOGO (Fog Oil)")
    hc_hexachloroethane = EnumValue(2015, "HC (HexaChloroEthane)")
    illumination = EnumValue(3000, "Illumination")
    practice = EnumValue(4000, "Practice")
    blank = EnumValue(4001, "Blank")
    dummy = EnumValue(4002, "Dummy")
    kinetic = EnumValue(5000, "Kinetic")
    mines = EnumValue(6000, "Mines")
    nuclear = EnumValue(7000, "Nuclear")
    nuclear_imt = EnumValue(7010, "Nuclear, IMT")
    chemical_general = EnumValue(8000, "Chemical, General")
    chemical_blister_agent = EnumValue(8100, "Chemical, Blister Agent")
    hd_mustard = EnumValue(8110, "HD (Mustard)")
    thickened_hd_mustard = EnumValue(8115, "Thickened HD (Mustard)")
    dusty_hd_mustard = EnumValue(8120, "Dusty HD (Mustard)")
    l_lewisite = EnumValue(8125, "L (Lewisite)")
    hn3_nitrogen_mustard = EnumValue(8130, "HN3 (Nitrogen Mustard)")
    hl_mustard_lewisite = EnumValue(8135, "HL (Mustard/Lewisite)")
    cx_phosgene_oxime = EnumValue(8140, "CX (Phosgene Oxime)")
    dmmp_phosphate_dimethyl_hydrogen = EnumValue(8145, "DMMP (Phosphate Dimethyl Hydrogen)")
    dmhp_phosphite = EnumValue(8150, "DMHP (Phosphite)")
    dma_dimethyl_acrylate = EnumValue(8155, "DMA (Dimethyl Acrylate)")
    dem = EnumValue(8160, "DEM")
    px_p_xlene = EnumValue(8165, "PX (P-xlene)")
    chemical_blood_agent = EnumValue(8200, "Chemical, Blood Agent")
    ac_hcn = EnumValue(8210, "AC (HCN)")
    ck_cnci = EnumValue(8215, "CK (CNCI)")
    cg_phosgene = EnumValue(8220, "CG (Phosgene)")
    chemical_nerve_agent = EnumValue(8300, "Chemical, Nerve Agent")
    vx = EnumValue(8310, "VX")
    thickened_vx = EnumValue(8315, "Thickened VX")
    dusty_vx = EnumValue(8320, "Dusty VX")
    ga_tabun = EnumValue(8325, "GA (Tabun)")
    thickened_ga_tabun = EnumValue(8330, "Thickened GA (Tabun)")
    dusty_ga_tabun = EnumValue(8335, "Dusty GA (Tabun)")
    gb_sarin = EnumValue(8340, "GB (Sarin)")
    thickened_gb_sarin = EnumValue(8345, "Thickened GB (Sarin)")
    dusty_gb_sarin = EnumValue(8350, "Dusty GB (Sarin)")
    gd_soman = EnumValue(8355, "GD (Soman)")
    thickened_gd_soman = EnumValue(8360, "Thickened GD (Soman)")
    dusty_gd_soman = EnumValue(8365, "Dusty GD (Soman)")
    gf = EnumValue(8370, "GF")
    thickened_gf = EnumValue(8375, "Thickened GF")
    dusty_gf = EnumValue(8380, "Dusty GF")
    svx_soviet_vx = EnumValue(8385, "SVX (Soviet VX)")
    bis = EnumValue(8410, "BIS")
    tcp = EnumValue(8415, "TCP")
    ms_methyl_salicylate = EnumValue(8425, "MS (Methyl Salicylate)")
    tep = EnumValue(8430, "TEP")
    h2o_water = EnumValue(8445, "H2O (Water)")
    to1_toxic_organic_1 = EnumValue(8450, "TO1 (Toxic Organic 1)")
    to2_toxic_organic_2 = EnumValue(8455, "TO2 (Toxic Organic 2)")
    to3_toxic_organic_3 = EnumValue(8460, "TO3 (Toxic Organic 3)")
    sulfur_hexafluoride = EnumValue(8465, "Sulfur Hexafluoride")
    aa_acetic_acid = EnumValue(8470, "AA (Acetic Acid)")
    hf_hydrofluoric_acid = EnumValue(8475, "HF (Hydrofluoric Acid)")
    biological = EnumValue(9000, "Biological")
    biological_virus = EnumValue(9100, "Biological, Virus")
    biological_bacteria = EnumValue(9200, "Biological, Bacteria")
    biological_rickettsia = EnumValue(9300, "Biological, Rickettsia")
    biological_genetically_modified_micro_organisms = EnumValue(9400, "Biological, Genetically Modified Micro-organisms")
    biological_toxin = EnumValue(9500, "Biological, Toxin")
    default = other

    def get_marshaled_size(self):
        return 16
