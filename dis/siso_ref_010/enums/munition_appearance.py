'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_damage import AppearanceDamage
from .appearance_trailing_effects import AppearanceTrailingEffects
from .appearance_entityor_object_state import AppearanceEntityorObjectState
from .cover_shroud_status import CoverShroudStatus

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 36, marshal size 32,
  * MunitionAppearance
  */

"""

class MunitionAppearanceBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 3, length=2) Describes the damaged appearance,  use {@link AppearanceDamage} values for this field
        ("_damage", UByte, 2),

        # (bit position 5, boolean) Describes whether or not smoke or vapor is emanating from the entity,  use {@link UInt8} values for this field
        ("_isSmokeVaporEmanating", UByte, 1),

        # (bit position 6, boolean) Describes whether or not the engine is emitting smoke,  use {@link UInt8} values for this field
        ("_isEngineEmittingSmoke", UByte, 1),

        # (bit position 7, length=2) Describes the size of the vapor trail,  use {@link AppearanceTrailingEffects} values for this field
        ("_vaporTrailSize", UByte, 2),

        # (bit position 15, boolean) Describes whether the entity is burning and flames are visible,  use {@link UInt8} values for this field
        ("_isFlaming", UByte, 1),

        # (bit position 16, boolean) Describes whether or not the guided munition's launch flash is present,  use {@link UInt8} values for this field
        ("_launchFlashPresent", UByte, 1),

        # (bit position 21, boolean) Describes whether the entity is frozen and should not be dead reckoned,  use {@link UInt8} values for this field
        ("_isFrozen", UByte, 1),

        # (bit position 22, boolean) Describes whether the power plant is on or off,  use {@link UInt8} values for this field
        ("_powerPlantOn", UByte, 1),

        # (bit position 23, boolean) Describes whether the entity is active or deactivated,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 24, length=2) Describes the status of the cover or shroud,  use {@link CoverShroudStatus} values for this field
        ("_coverShroudStatus", UByte, 2),

        # (bit position 31, boolean) Describes whether or not the entity is masked or cloaked,  use {@link UInt8} values for this field
        ("_maskedCloaked", UByte, 1)
    ]

class MunitionAppearance(ctypes.Union):
    _fields_ = [
        ("capabilities", MunitionAppearanceBitField),
        ("asbyte", UInt8)
    ]

    def set_damage(self, value : AppearanceDamage):
        self.capabilities._damage = int(value)
    def get_damage(self) -> AppearanceDamage:
        return AppearanceDamage.get_enum(self._damage)
    Damage = property(get_damage, set_damage)

    def set_isSmokeVaporEmanating(self, value : UInt8):
        self.capabilities._isSmokeVaporEmanating = int(value)
    def get_isSmokeVaporEmanating(self) -> UInt8:
        return self.capabilities._isSmokeVaporEmanating
    IsSmokeVaporEmanating = property(get_isSmokeVaporEmanating, set_isSmokeVaporEmanating)

    def set_isEngineEmittingSmoke(self, value : UInt8):
        self.capabilities._isEngineEmittingSmoke = int(value)
    def get_isEngineEmittingSmoke(self) -> UInt8:
        return self.capabilities._isEngineEmittingSmoke
    IsEngineEmittingSmoke = property(get_isEngineEmittingSmoke, set_isEngineEmittingSmoke)

    def set_vaporTrailSize(self, value : AppearanceTrailingEffects):
        self.capabilities._vaporTrailSize = int(value)
    def get_vaporTrailSize(self) -> AppearanceTrailingEffects:
        return AppearanceTrailingEffects.get_enum(self._vaporTrailSize)
    VaporTrailSize = property(get_vaporTrailSize, set_vaporTrailSize)

    def set_isFlaming(self, value : UInt8):
        self.capabilities._isFlaming = int(value)
    def get_isFlaming(self) -> UInt8:
        return self.capabilities._isFlaming
    IsFlaming = property(get_isFlaming, set_isFlaming)

    def set_launchFlashPresent(self, value : UInt8):
        self.capabilities._launchFlashPresent = int(value)
    def get_launchFlashPresent(self) -> UInt8:
        return self.capabilities._launchFlashPresent
    LaunchFlashPresent = property(get_launchFlashPresent, set_launchFlashPresent)

    def set_isFrozen(self, value : UInt8):
        self.capabilities._isFrozen = int(value)
    def get_isFrozen(self) -> UInt8:
        return self.capabilities._isFrozen
    IsFrozen = property(get_isFrozen, set_isFrozen)

    def set_powerPlantOn(self, value : UInt8):
        self.capabilities._powerPlantOn = int(value)
    def get_powerPlantOn(self) -> UInt8:
        return self.capabilities._powerPlantOn
    PowerPlantOn = property(get_powerPlantOn, set_powerPlantOn)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_coverShroudStatus(self, value : CoverShroudStatus):
        self.capabilities._coverShroudStatus = int(value)
    def get_coverShroudStatus(self) -> CoverShroudStatus:
        return CoverShroudStatus.get_enum(self._coverShroudStatus)
    CoverShroudStatus = property(get_coverShroudStatus, set_coverShroudStatus)

    def set_maskedCloaked(self, value : UInt8):
        self.capabilities._maskedCloaked = int(value)
    def get_maskedCloaked(self) -> UInt8:
        return self.capabilities._maskedCloaked
    MaskedCloaked = property(get_maskedCloaked, set_maskedCloaked)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "Damage : " +  self.Damage.get_description + "\n"
        outputStream += "IsSmokeVaporEmanating : " +  str(self.IsSmokeVaporEmanating) + "\n"
        outputStream += "IsEngineEmittingSmoke : " +  str(self.IsEngineEmittingSmoke) + "\n"
        outputStream += "VaporTrailSize : " +  self.VaporTrailSize.get_description + "\n"
        outputStream += "IsFlaming : " +  str(self.IsFlaming) + "\n"
        outputStream += "LaunchFlashPresent : " +  str(self.LaunchFlashPresent) + "\n"
        outputStream += "IsFrozen : " +  str(self.IsFrozen) + "\n"
        outputStream += "PowerPlantOn : " +  str(self.PowerPlantOn) + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "CoverShroudStatus : " +  self.CoverShroudStatus.get_description + "\n"
        outputStream += "MaskedCloaked : " +  str(self.MaskedCloaked) + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 32 
