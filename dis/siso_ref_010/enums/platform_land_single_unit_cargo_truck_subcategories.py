'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 430, marshal size 8;
  * PlatformLandSingleUnitCargoTruckSubcategories has 32 enumerations total.
  * Subcategories for Land Platform Category 83
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class PlatformLandSingleUnitCargoTruckSubcategories(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    pickup_truck_mini = EnumValue(1, "Pickup Truck, Mini")
    pickup_truck_mid_size = EnumValue(2, "Pickup Truck, Mid-Size")
    pickup_truck_full_size = EnumValue(3, "Pickup Truck, Full-Size")
    pickup_truck_crew_cab = EnumValue(4, "Pickup Truck, Crew Cab")
    pickup_truck_extended_cab = EnumValue(5, "Pickup Truck, Extended Cab")
    pickup_truck_long_bed = EnumValue(6, "Pickup Truck, Long Bed")
    pickup_truck_cab_forward = EnumValue(7, "Pickup Truck, Cab Forward")
    cargo_truck = EnumValue(10, "Cargo Truck")
    cargo_truck_up_to_25_ton = EnumValue(11, "Cargo Truck, up to 2.5 Ton")
    cargo_truck_up_to_5_ton = EnumValue(12, "Cargo Truck, up to 5 Ton")
    cargo_truck_up_to_75_ton = EnumValue(13, "Cargo Truck, up to 7.5 Ton")
    cargo_truck_up_to_10_ton = EnumValue(14, "Cargo Truck, up to 10 Ton")
    cargo_truck_over_10_ton = EnumValue(15, "Cargo Truck, over 10 Ton")
    tanker = EnumValue(20, "Tanker")
    semi_trailer_cab_w_o_trailer = EnumValue(30, "Semi-Trailer Cab (w/o Trailer)")
    van = EnumValue(70, "Van")
    van_extended = EnumValue(71, "Van, Extended")
    van_compact = EnumValue(72, "Van, Compact")
    van_wheelchair = EnumValue(73, "Van, Wheelchair")
    van_delivery = EnumValue(74, "Van, Delivery")
    delivery_truck = EnumValue(100, "Delivery Truck")
    delivery_truck_box = EnumValue(101, "Delivery Truck, Box")
    delivery_truck_flatbed = EnumValue(102, "Delivery Truck, Flatbed")
    delivery_truck_stake_bed = EnumValue(103, "Delivery Truck, Stake Bed")
    mess_truck = EnumValue(104, "Mess Truck")
    truck_palletised_load_system_pls = EnumValue(105, "Truck, Palletised Load System (PLS)")
    truck_petroleum_oil_and_lubricants_pol_palletised_load_system_pls = EnumValue(106, "Truck, Petroleum, Oil, and Lubricants (POL) Palletised Load System (PLS)")
    truck_petroleum_oil_and_lubricants_pol_surveillance = EnumValue(107, "Truck, Petroleum, Oil, and Lubricants (POL), Surveillance")
    refrigerated_truck_small = EnumValue(108, "Refrigerated Truck, Small")
    refrigerated_truck_medium = EnumValue(109, "Refrigerated Truck, Medium")
    refrigerated_truck_large = EnumValue(110, "Refrigerated Truck, Large")
    default = other

    def get_marshaled_size(self):
        return 8
