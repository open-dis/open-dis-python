'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_linear_object_tank_ditch_breach import AppearanceLinearObjectTankDitchBreach

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 235, marshal size 16,
  * LinearObjectAppearanceTankDitchandConcertinaWire
  */

"""

class LinearObjectAppearanceTankDitchAndConcertinaWireBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, length=2) Describes the breached appearance of the object,  use {@link AppearanceLinearObjectTankDitchBreach} values for this field
        ("_breachState", UByte, 2),

        # (bit position 16, length=8) 8-bit unsigned integer indicating the fixed length in meters of a breached segment,  use {@link UInt8} values for this field
        ("_breachLength", UByte, 8),

        # (bit position 24, length=8) 8-bit record where each bit indicates whether its associated segment is breached or not, such that bit 0 of the record is the first segment,  use {@link UInt8} values for this field
        ("_breachLocation", UByte, 8)
    ]

class LinearObjectAppearanceTankDitchAndConcertinaWire(ctypes.Union):
    _fields_ = [
        ("capabilities", LinearObjectAppearanceTankDitchAndConcertinaWireBitField),
        ("asbyte", UInt8)
    ]

    def set_breachState(self, value : AppearanceLinearObjectTankDitchBreach):
        self.capabilities._breachState = int(value)
    def get_breachState(self) -> AppearanceLinearObjectTankDitchBreach:
        return AppearanceLinearObjectTankDitchBreach.get_enum(self._breachState)
    BreachState = property(get_breachState, set_breachState)

    def set_breachLength(self, value : UInt8):
        self.capabilities._breachLength = int(value)
    def get_breachLength(self) -> UInt8:
        return self.capabilities._breachLength
    BreachLength = property(get_breachLength, set_breachLength)

    def set_breachLocation(self, value : UInt8):
        self.capabilities._breachLocation = int(value)
    def get_breachLocation(self) -> UInt8:
        return self.capabilities._breachLocation
    BreachLocation = property(get_breachLocation, set_breachLocation)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "BreachState : " +  self.BreachState.get_description + "\n"
        outputStream += "BreachLength : " +  str(self.BreachLength) + "\n"
        outputStream += "BreachLocation : " +  str(self.BreachLocation) + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 16 
