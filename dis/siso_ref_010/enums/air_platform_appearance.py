'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_paint_scheme import AppearancePaintScheme
from .appearance_nvgmode import AppearanceNVGMode
from .appearance_damage import AppearanceDamage
from .appearance_trailing_effects import AppearanceTrailingEffects
from .appearance_canopy import AppearanceCanopy
from .appearance_anti_collision_day_night import AppearanceAntiCollisionDayNight
from .appearance_entityor_object_state import AppearanceEntityorObjectState
from .appearance_navigation_position_brightness import AppearanceNavigationPositionBrightness

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 32, marshal size 32,
  * AirPlatformAppearance
  */

"""

class AirPlatformAppearanceBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, boolean) Describes the visual paint design,  use {@link AppearancePaintScheme} values for this field
        ("_paintScheme", UByte, 1),

        # (bit position 1, boolean) Describes whether it is capable of moving on its own power,  use {@link UInt8} values for this field
        ("_propulsionKilled", UByte, 1),

        # (bit position 2, boolean) Describes whether air platform lighting is in covert or overt mode,  use {@link AppearanceNVGMode} values for this field
        ("_nVGMode", UByte, 1),

        # (bit position 3, length=2) Describes the damaged appearance,  use {@link AppearanceDamage} values for this field
        ("_damage", UByte, 2),

        # (bit position 5, boolean) Describes whether or not smoke is emanating from the entity,  use {@link UInt8} values for this field
        ("_isSmokeEmanating", UByte, 1),

        # (bit position 6, boolean) Describes whether or not the engine is emitting smoke,  use {@link UInt8} values for this field
        ("_isEngineEmittingSmoke", UByte, 1),

        # (bit position 7, length=2) Describes the size of the contrails or ionization trailing effects,  use {@link AppearanceTrailingEffects} values for this field
        ("_trailingEffects", UByte, 2),

        # (bit position 9, length=3) Describes the state of the canopy/troop door,  use {@link AppearanceCanopy} values for this field
        ("_canopyTroopDoor", UByte, 3),

        # (bit position 12, boolean) Describes whether landing lights are on or off,  use {@link UInt8} values for this field
        ("_landingLightsOn", UByte, 1),

        # (bit position 13, boolean) Describes whether navigation lights are on or off,  use {@link UInt8} values for this field
        ("_navigationLightsOn", UByte, 1),

        # (bit position 14, boolean) Describes whether Anti-Collision lights are on or off,  use {@link UInt8} values for this field
        ("_antiCollisionLightsOn", UByte, 1),

        # (bit position 15, boolean) Describes whether the entity is burning and flames are visible,  use {@link UInt8} values for this field
        ("_isFlaming", UByte, 1),

        # (bit position 16, boolean) Describes if the air platform is in afterburner,  use {@link UInt8} values for this field
        ("_afterburnerOn", UByte, 1),

        # (bit position 17, boolean) Describes whether the lower Anti-Collision light is on or off,  use {@link UInt8} values for this field
        ("_lowerAntiCollisionLightOn", UByte, 1),

        # (bit position 18, boolean) Describes whether the upper Anti-Collision light is on or off,  use {@link UInt8} values for this field
        ("_upperAntiCollisionLightOn", UByte, 1),

        # (bit position 19, boolean) Describes the day/night status of the Anti-Collision lights,  use {@link AppearanceAntiCollisionDayNight} values for this field
        ("_antiCollisionLightDayNight", UByte, 1),

        # (bit position 20, boolean) Indicates whether any air platform lights are blinking or not,  use {@link UInt8} values for this field
        ("_isBlinking", UByte, 1),

        # (bit position 21, boolean) Describes whether the entity is frozen and should not be dead reckoned,  use {@link UInt8} values for this field
        ("_isFrozen", UByte, 1),

        # (bit position 22, boolean) Describes whether the power plant is on or off,  use {@link UInt8} values for this field
        ("_powerPlantOn", UByte, 1),

        # (bit position 23, boolean) Describes whether the entity is active or deactivated,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 24, boolean) Describes whether formation lights are on or off,  use {@link UInt8} values for this field
        ("_formationLightsOn", UByte, 1),

        # (bit position 25, boolean) Describes whether the landing gear is wholly retracted or extended,  use {@link UInt8} values for this field
        ("_landingGearExtended", UByte, 1),

        # (bit position 26, boolean) Describes whether the cargo doors (main door) are closed or open,  use {@link UInt8} values for this field
        ("_cargoDoorsOpened", UByte, 1),

        # (bit position 27, boolean) Describes the brightness of the navigation/position lights,  use {@link AppearanceNavigationPositionBrightness} values for this field
        ("_navigationPositionBrightness", UByte, 1),

        # (bit position 28, boolean) Describes whether spot/search light #1 is on or off,  use {@link UInt8} values for this field
        ("_spotSearchLight1On", UByte, 1),

        # (bit position 29, boolean) Describes whether interior lights are on or off,  use {@link UInt8} values for this field
        ("_interiorLightsOn", UByte, 1),

        # (bit position 30, boolean) Describes whether the air platform has engaged reverse thrust,  use {@link UInt8} values for this field
        ("_reverseThrustEngaged", UByte, 1),

        # (bit position 31, boolean) Describes whether the air platform has weight on its main landing gear,  use {@link UInt8} values for this field
        ("_weightonWheels", UByte, 1)
    ]

class AirPlatformAppearance(ctypes.Union):
    _fields_ = [
        ("capabilities", AirPlatformAppearanceBitField),
        ("asbyte", UInt8)
    ]

    def set_paintScheme(self, value : AppearancePaintScheme):
        self.capabilities._paintScheme = int(value)
    def get_paintScheme(self) -> AppearancePaintScheme:
        return AppearancePaintScheme.get_enum(self._paintScheme)
    PaintScheme = property(get_paintScheme, set_paintScheme)

    def set_propulsionKilled(self, value : UInt8):
        self.capabilities._propulsionKilled = int(value)
    def get_propulsionKilled(self) -> UInt8:
        return self.capabilities._propulsionKilled
    PropulsionKilled = property(get_propulsionKilled, set_propulsionKilled)

    def set_nVGMode(self, value : AppearanceNVGMode):
        self.capabilities._nVGMode = int(value)
    def get_nVGMode(self) -> AppearanceNVGMode:
        return AppearanceNVGMode.get_enum(self._nVGMode)
    NVGMode = property(get_nVGMode, set_nVGMode)

    def set_damage(self, value : AppearanceDamage):
        self.capabilities._damage = int(value)
    def get_damage(self) -> AppearanceDamage:
        return AppearanceDamage.get_enum(self._damage)
    Damage = property(get_damage, set_damage)

    def set_isSmokeEmanating(self, value : UInt8):
        self.capabilities._isSmokeEmanating = int(value)
    def get_isSmokeEmanating(self) -> UInt8:
        return self.capabilities._isSmokeEmanating
    IsSmokeEmanating = property(get_isSmokeEmanating, set_isSmokeEmanating)

    def set_isEngineEmittingSmoke(self, value : UInt8):
        self.capabilities._isEngineEmittingSmoke = int(value)
    def get_isEngineEmittingSmoke(self) -> UInt8:
        return self.capabilities._isEngineEmittingSmoke
    IsEngineEmittingSmoke = property(get_isEngineEmittingSmoke, set_isEngineEmittingSmoke)

    def set_trailingEffects(self, value : AppearanceTrailingEffects):
        self.capabilities._trailingEffects = int(value)
    def get_trailingEffects(self) -> AppearanceTrailingEffects:
        return AppearanceTrailingEffects.get_enum(self._trailingEffects)
    TrailingEffects = property(get_trailingEffects, set_trailingEffects)

    def set_canopyTroopDoor(self, value : AppearanceCanopy):
        self.capabilities._canopyTroopDoor = int(value)
    def get_canopyTroopDoor(self) -> AppearanceCanopy:
        return AppearanceCanopy.get_enum(self._canopyTroopDoor)
    CanopyTroopDoor = property(get_canopyTroopDoor, set_canopyTroopDoor)

    def set_landingLightsOn(self, value : UInt8):
        self.capabilities._landingLightsOn = int(value)
    def get_landingLightsOn(self) -> UInt8:
        return self.capabilities._landingLightsOn
    LandingLightsOn = property(get_landingLightsOn, set_landingLightsOn)

    def set_navigationLightsOn(self, value : UInt8):
        self.capabilities._navigationLightsOn = int(value)
    def get_navigationLightsOn(self) -> UInt8:
        return self.capabilities._navigationLightsOn
    NavigationLightsOn = property(get_navigationLightsOn, set_navigationLightsOn)

    def set_antiCollisionLightsOn(self, value : UInt8):
        self.capabilities._antiCollisionLightsOn = int(value)
    def get_antiCollisionLightsOn(self) -> UInt8:
        return self.capabilities._antiCollisionLightsOn
    AntiCollisionLightsOn = property(get_antiCollisionLightsOn, set_antiCollisionLightsOn)

    def set_isFlaming(self, value : UInt8):
        self.capabilities._isFlaming = int(value)
    def get_isFlaming(self) -> UInt8:
        return self.capabilities._isFlaming
    IsFlaming = property(get_isFlaming, set_isFlaming)

    def set_afterburnerOn(self, value : UInt8):
        self.capabilities._afterburnerOn = int(value)
    def get_afterburnerOn(self) -> UInt8:
        return self.capabilities._afterburnerOn
    AfterburnerOn = property(get_afterburnerOn, set_afterburnerOn)

    def set_lowerAntiCollisionLightOn(self, value : UInt8):
        self.capabilities._lowerAntiCollisionLightOn = int(value)
    def get_lowerAntiCollisionLightOn(self) -> UInt8:
        return self.capabilities._lowerAntiCollisionLightOn
    LowerAntiCollisionLightOn = property(get_lowerAntiCollisionLightOn, set_lowerAntiCollisionLightOn)

    def set_upperAntiCollisionLightOn(self, value : UInt8):
        self.capabilities._upperAntiCollisionLightOn = int(value)
    def get_upperAntiCollisionLightOn(self) -> UInt8:
        return self.capabilities._upperAntiCollisionLightOn
    UpperAntiCollisionLightOn = property(get_upperAntiCollisionLightOn, set_upperAntiCollisionLightOn)

    def set_antiCollisionLightDayNight(self, value : AppearanceAntiCollisionDayNight):
        self.capabilities._antiCollisionLightDayNight = int(value)
    def get_antiCollisionLightDayNight(self) -> AppearanceAntiCollisionDayNight:
        return AppearanceAntiCollisionDayNight.get_enum(self._antiCollisionLightDayNight)
    AntiCollisionLightDayNight = property(get_antiCollisionLightDayNight, set_antiCollisionLightDayNight)

    def set_isBlinking(self, value : UInt8):
        self.capabilities._isBlinking = int(value)
    def get_isBlinking(self) -> UInt8:
        return self.capabilities._isBlinking
    IsBlinking = property(get_isBlinking, set_isBlinking)

    def set_isFrozen(self, value : UInt8):
        self.capabilities._isFrozen = int(value)
    def get_isFrozen(self) -> UInt8:
        return self.capabilities._isFrozen
    IsFrozen = property(get_isFrozen, set_isFrozen)

    def set_powerPlantOn(self, value : UInt8):
        self.capabilities._powerPlantOn = int(value)
    def get_powerPlantOn(self) -> UInt8:
        return self.capabilities._powerPlantOn
    PowerPlantOn = property(get_powerPlantOn, set_powerPlantOn)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_formationLightsOn(self, value : UInt8):
        self.capabilities._formationLightsOn = int(value)
    def get_formationLightsOn(self) -> UInt8:
        return self.capabilities._formationLightsOn
    FormationLightsOn = property(get_formationLightsOn, set_formationLightsOn)

    def set_landingGearExtended(self, value : UInt8):
        self.capabilities._landingGearExtended = int(value)
    def get_landingGearExtended(self) -> UInt8:
        return self.capabilities._landingGearExtended
    LandingGearExtended = property(get_landingGearExtended, set_landingGearExtended)

    def set_cargoDoorsOpened(self, value : UInt8):
        self.capabilities._cargoDoorsOpened = int(value)
    def get_cargoDoorsOpened(self) -> UInt8:
        return self.capabilities._cargoDoorsOpened
    CargoDoorsOpened = property(get_cargoDoorsOpened, set_cargoDoorsOpened)

    def set_navigationPositionBrightness(self, value : AppearanceNavigationPositionBrightness):
        self.capabilities._navigationPositionBrightness = int(value)
    def get_navigationPositionBrightness(self) -> AppearanceNavigationPositionBrightness:
        return AppearanceNavigationPositionBrightness.get_enum(self._navigationPositionBrightness)
    NavigationPositionBrightness = property(get_navigationPositionBrightness, set_navigationPositionBrightness)

    def set_spotSearchLight1On(self, value : UInt8):
        self.capabilities._spotSearchLight1On = int(value)
    def get_spotSearchLight1On(self) -> UInt8:
        return self.capabilities._spotSearchLight1On
    SpotSearchLight1On = property(get_spotSearchLight1On, set_spotSearchLight1On)

    def set_interiorLightsOn(self, value : UInt8):
        self.capabilities._interiorLightsOn = int(value)
    def get_interiorLightsOn(self) -> UInt8:
        return self.capabilities._interiorLightsOn
    InteriorLightsOn = property(get_interiorLightsOn, set_interiorLightsOn)

    def set_reverseThrustEngaged(self, value : UInt8):
        self.capabilities._reverseThrustEngaged = int(value)
    def get_reverseThrustEngaged(self) -> UInt8:
        return self.capabilities._reverseThrustEngaged
    ReverseThrustEngaged = property(get_reverseThrustEngaged, set_reverseThrustEngaged)

    def set_weightonWheels(self, value : UInt8):
        self.capabilities._weightonWheels = int(value)
    def get_weightonWheels(self) -> UInt8:
        return self.capabilities._weightonWheels
    WeightonWheels = property(get_weightonWheels, set_weightonWheels)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "PaintScheme : " +  self.PaintScheme.get_description + "\n"
        outputStream += "PropulsionKilled : " +  str(self.PropulsionKilled) + "\n"
        outputStream += "NVGMode : " +  self.NVGMode.get_description + "\n"
        outputStream += "Damage : " +  self.Damage.get_description + "\n"
        outputStream += "IsSmokeEmanating : " +  str(self.IsSmokeEmanating) + "\n"
        outputStream += "IsEngineEmittingSmoke : " +  str(self.IsEngineEmittingSmoke) + "\n"
        outputStream += "TrailingEffects : " +  self.TrailingEffects.get_description + "\n"
        outputStream += "CanopyTroopDoor : " +  self.CanopyTroopDoor.get_description + "\n"
        outputStream += "LandingLightsOn : " +  str(self.LandingLightsOn) + "\n"
        outputStream += "NavigationLightsOn : " +  str(self.NavigationLightsOn) + "\n"
        outputStream += "AntiCollisionLightsOn : " +  str(self.AntiCollisionLightsOn) + "\n"
        outputStream += "IsFlaming : " +  str(self.IsFlaming) + "\n"
        outputStream += "AfterburnerOn : " +  str(self.AfterburnerOn) + "\n"
        outputStream += "LowerAntiCollisionLightOn : " +  str(self.LowerAntiCollisionLightOn) + "\n"
        outputStream += "UpperAntiCollisionLightOn : " +  str(self.UpperAntiCollisionLightOn) + "\n"
        outputStream += "AntiCollisionLightDayNight : " +  self.AntiCollisionLightDayNight.get_description + "\n"
        outputStream += "IsBlinking : " +  str(self.IsBlinking) + "\n"
        outputStream += "IsFrozen : " +  str(self.IsFrozen) + "\n"
        outputStream += "PowerPlantOn : " +  str(self.PowerPlantOn) + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "FormationLightsOn : " +  str(self.FormationLightsOn) + "\n"
        outputStream += "LandingGearExtended : " +  str(self.LandingGearExtended) + "\n"
        outputStream += "CargoDoorsOpened : " +  str(self.CargoDoorsOpened) + "\n"
        outputStream += "NavigationPositionBrightness : " +  self.NavigationPositionBrightness.get_description + "\n"
        outputStream += "SpotSearchLight1On : " +  str(self.SpotSearchLight1On) + "\n"
        outputStream += "InteriorLightsOn : " +  str(self.InteriorLightsOn) + "\n"
        outputStream += "ReverseThrustEngaged : " +  str(self.ReverseThrustEngaged) + "\n"
        outputStream += "WeightonWheels : " +  str(self.WeightonWheels) + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 32 
