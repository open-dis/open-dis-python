'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 515,
  * marshal size 8;
  * LifeFormHumanSpecificGrenadeLaunchers has 45 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificGrenadeLaunchers(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _40x46mm_arsenal_uggl_m1 = EnumValue(1, "40x46mm Arsenal UGGL-M1")
    _40x46mm_arsenal_msgl = EnumValue(2, "40x46mm Arsenal MSGL")
    _40mm_vog_arsenal_msgl = EnumValue(3, "40mm VOG Arsenal MSGL")
    _40x46mm_arsenal_ubgl_m16 = EnumValue(4, "40x46mm Arsenal UBGL-M16")
    _40x46mm_arsenal_ubgl_m8 = EnumValue(5, "40x46mm Arsenal UBGL-M8")
    _40x46mm_arsenal_ubgl_m7 = EnumValue(6, "40x46mm Arsenal UBGL-M7")
    _30mm_bs_1_tishina = EnumValue(10, "30mm BS-1 Tishina")
    _40mm_bts_203 = EnumValue(11, "40mm BTS-203")
    _40mm_indumil_imc_40 = EnumValue(12, "40mm Indumil IMC-40")
    _40mm_vog_bg_15 = EnumValue(20, "40mm VOG BG-15")
    _40mm_vog_gp_25_kostoyor = EnumValue(21, "40mm VOG GP-25 Kostoyor")
    _40mm_vog_gp_30_obuvka = EnumValue(22, "40mm VOG GP-30 Obuvka")
    _40mm_vog_gp_34 = EnumValue(23, "40mm VOG GP-34")
    _40mm_vog_rgm_40_kastet = EnumValue(24, "40mm VOG RGM-40 Kastet")
    _40mm_vog_rg_6 = EnumValue(25, "40mm VOG RG-6")
    _40x46mm_cz_805_g1_ubgl = EnumValue(26, "40x46mm CZ 805 G1 UBGL")
    _40x46mm_m79 = EnumValue(30, "40x46mm M79")
    _40x46mm_m203 = EnumValue(31, "40x46mm M203")
    _40x36mm_m320 = EnumValue(32, "40x36mm M320")
    _40x46mm_cis_40_gl = EnumValue(35, "40x46mm CIS 40 GL")
    _40x46mm_eagle_gl = EnumValue(36, "40x46mm EAGLE GL")
    _40x46mm_hk_ag36 = EnumValue(37, "40x46mm HK AG36")
    _40x46mm_hk_ag_c_glm = EnumValue(38, "40x46mm HK AG-C/GLM")
    _40x46mm_hk69a1 = EnumValue(39, "40x46mm HK69A1")
    _40x46mm_beretta_glx_160 = EnumValue(40, "40x46mm Beretta GLX 160")
    _40x46mm_arde_ubgl = EnumValue(41, "40x46mm ARDE UBGL")
    _40x46mm_xml148 = EnumValue(42, "40x46mm XML148")
    _40x46mm_china_lake_gl = EnumValue(43, "40x46mm China Lake GL")
    _40x46mm_hawk_mm_1 = EnumValue(44, "40x46mm Hawk MM-1")
    _25x40mm_xm25_cdte = EnumValue(50, "25x40mm XM25 CDTE")
    _37mm_milkor37_38_ll_stopper = EnumValue(60, "37mm Milkor37/38 LL Stopper")
    _40mm_milkor40_gl = EnumValue(61, "40mm Milkor40 GL")
    _40mm_milkor_mgl = EnumValue(62, "40mm Milkor MGL")
    _40x47mm_pallad_wz1974 = EnumValue(65, "40x47mm Pallad wz1974")
    _40x47mm_pallad_wz1983 = EnumValue(66, "40x47mm Pallad wz1983")
    ugl_200_canister_rwgl_3 = EnumValue(70, "UGL 200 Canister RWGL-3")
    _20x30mm_st_daewoo_k11 = EnumValue(80, "20x30mm ST Daewoo K11")
    _30mm_rgsh_30_gl = EnumValue(85, "30mm RGSh-30 GL")
    _35mm_type_91_breechload_gl = EnumValue(90, "35mm Type-91 BreechLoad GL")
    _40x53mm_czw_40 = EnumValue(95, "40x53mm CZW-40")
    _40x53mm_uag_40_agl = EnumValue(96, "40x53mm UAG-40 AGL")
    _45mm_dp_64 = EnumValue(100, "45mm DP-64")
    _20x42mm_neopup_paw_20 = EnumValue(105, "20x42mm Neopup PAW-20")
    _68mm_rpg_75_mp = EnumValue(110, "68mm RPG-75-MP")
    default = other

    def get_marshaled_size(self):
        return 8
