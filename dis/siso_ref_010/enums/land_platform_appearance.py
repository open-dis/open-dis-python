'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_paint_scheme import AppearancePaintScheme
from .appearance_damage import AppearanceDamage
from .appearance_trailing_effects import AppearanceTrailingEffects
from .appearance_hatch import AppearanceHatch
from .appearance_launcher_operational import AppearanceLauncherOperational
from .appearance_camouflage_type import AppearanceCamouflageType
from .appearance_concealed_position import AppearanceConcealedPosition
from .appearance_entityor_object_state import AppearanceEntityorObjectState

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 31, marshal size 32,
  * LandPlatformAppearance
  */

"""

class LandPlatformAppearanceBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, boolean) Describes the visual paint design,  use {@link AppearancePaintScheme} values for this field
        ("_paintScheme", UByte, 1),

        # (bit position 1, boolean) Describes whether it is capable of moving on its own power,  use {@link UInt8} values for this field
        ("_mobilityKilled", UByte, 1),

        # (bit position 2, boolean) Describes whether it can fire weapons,  use {@link UInt8} values for this field
        ("_firePowerKilled", UByte, 1),

        # (bit position 3, length=2) Describes the damaged appearance,  use {@link AppearanceDamage} values for this field
        ("_damage", UByte, 2),

        # (bit position 5, boolean) Describes whether or not smoke is emanating from the entity,  use {@link UInt8} values for this field
        ("_isSmokeEmanating", UByte, 1),

        # (bit position 6, boolean) Describes whether or not the engine is emitting smoke,  use {@link UInt8} values for this field
        ("_isEngineEmittingSmoke", UByte, 1),

        # (bit position 7, length=2) Describes the size of the dust cloud trailing effect,  use {@link AppearanceTrailingEffects} values for this field
        ("_trailingDustCloud", UByte, 2),

        # (bit position 9, length=3) Describes whether the primary hatch is open or closed and whether someone is visible,  use {@link AppearanceHatch} values for this field
        ("_primaryHatch", UByte, 3),

        # (bit position 12, boolean) Describes whether head lights are on or off,  use {@link UInt8} values for this field
        ("_headLightsOn", UByte, 1),

        # (bit position 13, boolean) Describes whether tail lights are on or off,  use {@link UInt8} values for this field
        ("_tailLightsOn", UByte, 1),

        # (bit position 14, boolean) Describes whether brake lights are on or off,  use {@link UInt8} values for this field
        ("_brakeLightsOn", UByte, 1),

        # (bit position 15, boolean) Describes whether the entity is burning and flames are visible,  use {@link UInt8} values for this field
        ("_isFlaming", UByte, 1),

        # (bit position 16, boolean) Describes the status of the mechanism required for the platform to be operational, such as the elevated status of the primary launcher,  use {@link AppearanceLauncherOperational} values for this field
        ("_launcherOperational", UByte, 1),

        # (bit position 17, length=2) Describes the camouflage color,  use {@link AppearanceCamouflageType} values for this field
        ("_camouflageType", UByte, 2),

        # (bit position 19, boolean) Describes the type of concealment,  use {@link AppearanceConcealedPosition} values for this field
        ("_concealedPosition", UByte, 1),

        # (bit position 21, boolean) Describes whether the entity is frozen and should not be dead reckoned,  use {@link UInt8} values for this field
        ("_isFrozen", UByte, 1),

        # (bit position 22, boolean) Describes whether the power plant is on or off,  use {@link UInt8} values for this field
        ("_powerPlantOn", UByte, 1),

        # (bit position 23, boolean) Describes whether the entity is active or deactivated,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 24, boolean) Describes whether or not the tent is extended,  use {@link UInt8} values for this field
        ("_tentExtended", UByte, 1),

        # (bit position 25, boolean) Describes whether or not the ramp is extended,  use {@link UInt8} values for this field
        ("_rampExtended", UByte, 1),

        # (bit position 26, boolean) Describes whether blackout lights are on or off,  use {@link UInt8} values for this field
        ("_blackoutLightsOn", UByte, 1),

        # (bit position 27, boolean) Describes whether blackout brake lights are on or off,  use {@link UInt8} values for this field
        ("_blackoutBrakeLightsOn", UByte, 1),

        # (bit position 28, boolean) Describes whether spot/search light #1 is on or off,  use {@link UInt8} values for this field
        ("_spotSearchLight1On", UByte, 1),

        # (bit position 29, boolean) Describes whether interior lights (forward) are on or off,  use {@link UInt8} values for this field
        ("_interiorLightsForwardOn", UByte, 1),

        # (bit position 30, boolean) Describes whether or not the vehicle occupants have surrendered,  use {@link UInt8} values for this field
        ("_occupantsSurrendered", UByte, 1),

        # (bit position 31, boolean) Describes whether or not the entity is masked or cloaked,  use {@link UInt8} values for this field
        ("_maskedCloaked", UByte, 1)
    ]

class LandPlatformAppearance(ctypes.Union):
    _fields_ = [
        ("capabilities", LandPlatformAppearanceBitField),
        ("asbyte", UInt8)
    ]

    def set_paintScheme(self, value : AppearancePaintScheme):
        self.capabilities._paintScheme = int(value)
    def get_paintScheme(self) -> AppearancePaintScheme:
        return AppearancePaintScheme.get_enum(self._paintScheme)
    PaintScheme = property(get_paintScheme, set_paintScheme)

    def set_mobilityKilled(self, value : UInt8):
        self.capabilities._mobilityKilled = int(value)
    def get_mobilityKilled(self) -> UInt8:
        return self.capabilities._mobilityKilled
    MobilityKilled = property(get_mobilityKilled, set_mobilityKilled)

    def set_firePowerKilled(self, value : UInt8):
        self.capabilities._firePowerKilled = int(value)
    def get_firePowerKilled(self) -> UInt8:
        return self.capabilities._firePowerKilled
    FirePowerKilled = property(get_firePowerKilled, set_firePowerKilled)

    def set_damage(self, value : AppearanceDamage):
        self.capabilities._damage = int(value)
    def get_damage(self) -> AppearanceDamage:
        return AppearanceDamage.get_enum(self._damage)
    Damage = property(get_damage, set_damage)

    def set_isSmokeEmanating(self, value : UInt8):
        self.capabilities._isSmokeEmanating = int(value)
    def get_isSmokeEmanating(self) -> UInt8:
        return self.capabilities._isSmokeEmanating
    IsSmokeEmanating = property(get_isSmokeEmanating, set_isSmokeEmanating)

    def set_isEngineEmittingSmoke(self, value : UInt8):
        self.capabilities._isEngineEmittingSmoke = int(value)
    def get_isEngineEmittingSmoke(self) -> UInt8:
        return self.capabilities._isEngineEmittingSmoke
    IsEngineEmittingSmoke = property(get_isEngineEmittingSmoke, set_isEngineEmittingSmoke)

    def set_trailingDustCloud(self, value : AppearanceTrailingEffects):
        self.capabilities._trailingDustCloud = int(value)
    def get_trailingDustCloud(self) -> AppearanceTrailingEffects:
        return AppearanceTrailingEffects.get_enum(self._trailingDustCloud)
    TrailingDustCloud = property(get_trailingDustCloud, set_trailingDustCloud)

    def set_primaryHatch(self, value : AppearanceHatch):
        self.capabilities._primaryHatch = int(value)
    def get_primaryHatch(self) -> AppearanceHatch:
        return AppearanceHatch.get_enum(self._primaryHatch)
    PrimaryHatch = property(get_primaryHatch, set_primaryHatch)

    def set_headLightsOn(self, value : UInt8):
        self.capabilities._headLightsOn = int(value)
    def get_headLightsOn(self) -> UInt8:
        return self.capabilities._headLightsOn
    HeadLightsOn = property(get_headLightsOn, set_headLightsOn)

    def set_tailLightsOn(self, value : UInt8):
        self.capabilities._tailLightsOn = int(value)
    def get_tailLightsOn(self) -> UInt8:
        return self.capabilities._tailLightsOn
    TailLightsOn = property(get_tailLightsOn, set_tailLightsOn)

    def set_brakeLightsOn(self, value : UInt8):
        self.capabilities._brakeLightsOn = int(value)
    def get_brakeLightsOn(self) -> UInt8:
        return self.capabilities._brakeLightsOn
    BrakeLightsOn = property(get_brakeLightsOn, set_brakeLightsOn)

    def set_isFlaming(self, value : UInt8):
        self.capabilities._isFlaming = int(value)
    def get_isFlaming(self) -> UInt8:
        return self.capabilities._isFlaming
    IsFlaming = property(get_isFlaming, set_isFlaming)

    def set_launcherOperational(self, value : AppearanceLauncherOperational):
        self.capabilities._launcherOperational = int(value)
    def get_launcherOperational(self) -> AppearanceLauncherOperational:
        return AppearanceLauncherOperational.get_enum(self._launcherOperational)
    LauncherOperational = property(get_launcherOperational, set_launcherOperational)

    def set_camouflageType(self, value : AppearanceCamouflageType):
        self.capabilities._camouflageType = int(value)
    def get_camouflageType(self) -> AppearanceCamouflageType:
        return AppearanceCamouflageType.get_enum(self._camouflageType)
    CamouflageType = property(get_camouflageType, set_camouflageType)

    def set_concealedPosition(self, value : AppearanceConcealedPosition):
        self.capabilities._concealedPosition = int(value)
    def get_concealedPosition(self) -> AppearanceConcealedPosition:
        return AppearanceConcealedPosition.get_enum(self._concealedPosition)
    ConcealedPosition = property(get_concealedPosition, set_concealedPosition)

    def set_isFrozen(self, value : UInt8):
        self.capabilities._isFrozen = int(value)
    def get_isFrozen(self) -> UInt8:
        return self.capabilities._isFrozen
    IsFrozen = property(get_isFrozen, set_isFrozen)

    def set_powerPlantOn(self, value : UInt8):
        self.capabilities._powerPlantOn = int(value)
    def get_powerPlantOn(self) -> UInt8:
        return self.capabilities._powerPlantOn
    PowerPlantOn = property(get_powerPlantOn, set_powerPlantOn)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_tentExtended(self, value : UInt8):
        self.capabilities._tentExtended = int(value)
    def get_tentExtended(self) -> UInt8:
        return self.capabilities._tentExtended
    TentExtended = property(get_tentExtended, set_tentExtended)

    def set_rampExtended(self, value : UInt8):
        self.capabilities._rampExtended = int(value)
    def get_rampExtended(self) -> UInt8:
        return self.capabilities._rampExtended
    RampExtended = property(get_rampExtended, set_rampExtended)

    def set_blackoutLightsOn(self, value : UInt8):
        self.capabilities._blackoutLightsOn = int(value)
    def get_blackoutLightsOn(self) -> UInt8:
        return self.capabilities._blackoutLightsOn
    BlackoutLightsOn = property(get_blackoutLightsOn, set_blackoutLightsOn)

    def set_blackoutBrakeLightsOn(self, value : UInt8):
        self.capabilities._blackoutBrakeLightsOn = int(value)
    def get_blackoutBrakeLightsOn(self) -> UInt8:
        return self.capabilities._blackoutBrakeLightsOn
    BlackoutBrakeLightsOn = property(get_blackoutBrakeLightsOn, set_blackoutBrakeLightsOn)

    def set_spotSearchLight1On(self, value : UInt8):
        self.capabilities._spotSearchLight1On = int(value)
    def get_spotSearchLight1On(self) -> UInt8:
        return self.capabilities._spotSearchLight1On
    SpotSearchLight1On = property(get_spotSearchLight1On, set_spotSearchLight1On)

    def set_interiorLightsForwardOn(self, value : UInt8):
        self.capabilities._interiorLightsForwardOn = int(value)
    def get_interiorLightsForwardOn(self) -> UInt8:
        return self.capabilities._interiorLightsForwardOn
    InteriorLightsForwardOn = property(get_interiorLightsForwardOn, set_interiorLightsForwardOn)

    def set_occupantsSurrendered(self, value : UInt8):
        self.capabilities._occupantsSurrendered = int(value)
    def get_occupantsSurrendered(self) -> UInt8:
        return self.capabilities._occupantsSurrendered
    OccupantsSurrendered = property(get_occupantsSurrendered, set_occupantsSurrendered)

    def set_maskedCloaked(self, value : UInt8):
        self.capabilities._maskedCloaked = int(value)
    def get_maskedCloaked(self) -> UInt8:
        return self.capabilities._maskedCloaked
    MaskedCloaked = property(get_maskedCloaked, set_maskedCloaked)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "PaintScheme : " +  self.PaintScheme.get_description + "\n"
        outputStream += "MobilityKilled : " +  str(self.MobilityKilled) + "\n"
        outputStream += "FirePowerKilled : " +  str(self.FirePowerKilled) + "\n"
        outputStream += "Damage : " +  self.Damage.get_description + "\n"
        outputStream += "IsSmokeEmanating : " +  str(self.IsSmokeEmanating) + "\n"
        outputStream += "IsEngineEmittingSmoke : " +  str(self.IsEngineEmittingSmoke) + "\n"
        outputStream += "TrailingDustCloud : " +  self.TrailingDustCloud.get_description + "\n"
        outputStream += "PrimaryHatch : " +  self.PrimaryHatch.get_description + "\n"
        outputStream += "HeadLightsOn : " +  str(self.HeadLightsOn) + "\n"
        outputStream += "TailLightsOn : " +  str(self.TailLightsOn) + "\n"
        outputStream += "BrakeLightsOn : " +  str(self.BrakeLightsOn) + "\n"
        outputStream += "IsFlaming : " +  str(self.IsFlaming) + "\n"
        outputStream += "LauncherOperational : " +  self.LauncherOperational.get_description + "\n"
        outputStream += "CamouflageType : " +  self.CamouflageType.get_description + "\n"
        outputStream += "ConcealedPosition : " +  self.ConcealedPosition.get_description + "\n"
        outputStream += "IsFrozen : " +  str(self.IsFrozen) + "\n"
        outputStream += "PowerPlantOn : " +  str(self.PowerPlantOn) + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "TentExtended : " +  str(self.TentExtended) + "\n"
        outputStream += "RampExtended : " +  str(self.RampExtended) + "\n"
        outputStream += "BlackoutLightsOn : " +  str(self.BlackoutLightsOn) + "\n"
        outputStream += "BlackoutBrakeLightsOn : " +  str(self.BlackoutBrakeLightsOn) + "\n"
        outputStream += "SpotSearchLight1On : " +  str(self.SpotSearchLight1On) + "\n"
        outputStream += "InteriorLightsForwardOn : " +  str(self.InteriorLightsForwardOn) + "\n"
        outputStream += "OccupantsSurrendered : " +  str(self.OccupantsSurrendered) + "\n"
        outputStream += "MaskedCloaked : " +  str(self.MaskedCloaked) + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 32 
