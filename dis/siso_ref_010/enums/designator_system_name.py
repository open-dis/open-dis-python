'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 80,
  * marshal size 16;
  * DesignatorSystemName has 103 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class DesignatorSystemName(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    not_specified = EnumValue(0, "Not Specified")
    an_aaq_4 = EnumValue(1000, "AN/AAQ-4")
    an_aaq_7 = EnumValue(1100, "AN/AAQ-7")
    an_aaq_8 = EnumValue(1200, "AN/AAQ-8")
    an_aaq_14_lantirn = EnumValue(1300, "AN/AAQ-14 LANTIRN")
    an_aaq_19 = EnumValue(1400, "AN/AAQ-19")
    an_aaq_22a_safire = EnumValue(1500, "AN/AAQ-22A; SAFIRE")
    an_aaq_22b_safire_lp = EnumValue(1600, "AN/AAQ-22B; SAFIRE LP")
    an_aaq_22c_star_safire_i = EnumValue(1700, "AN/AAQ-22C; Star SAFIRE I")
    an_aaq_22d_brite_star = EnumValue(1800, "AN/AAQ-22D; BRITE Star")
    an_aaq_24v_dircm_nemesis = EnumValue(1900, "AN/AAQ-24(V) DIRCM; Nemesis")
    an_aaq_25_lts = EnumValue(2000, "AN/AAQ-25 LTS")
    an_aaq_28v_litening_ii = EnumValue(2100, "AN/AAQ-28(V) LITENING II")
    an_aaq_30 = EnumValue(2200, "AN/AAQ-30")
    an_aaq_32 = EnumValue(2300, "AN/AAQ-32")
    an_aaq_33_sniper = EnumValue(2400, "AN/AAQ-33; Sniper")
    an_aaq_37 = EnumValue(2500, "AN/AAQ-37")
    an_aaq_38 = EnumValue(2600, "AN/AAQ-38")
    an_aaq_40 = EnumValue(2650, "AN/AAQ-40")
    an_aas_32 = EnumValue(2700, "AN/AAS-32")
    an_aas_35v = EnumValue(2800, "AN/AAS-35V")
    an_aas_37 = EnumValue(2900, "AN/AAS-37")
    an_aas_38 = EnumValue(3000, "AN/AAS-38")
    an_aas_44v = EnumValue(3100, "AN/AAS-44(V)")
    an_aas_46 = EnumValue(3200, "AN/AAS-46")
    an_aas_49 = EnumValue(3300, "AN/AAS-49")
    an_aas_51 = EnumValue(3400, "AN/AAS-51")
    an_aas_52_mts_a = EnumValue(3500, "AN/AAS-52; MTS-A")
    an_alq_10 = EnumValue(3600, "AN/ALQ-10")
    an_asq_228 = EnumValue(3700, "AN/ASQ-228")
    an_avq_25 = EnumValue(4400, "AN/AVQ-25")
    an_avq_26 = EnumValue(4500, "AN/AVQ-26")
    an_gvs_5 = EnumValue(4600, "AN/GVS-5")
    an_ped_1_lldr = EnumValue(4700, "AN/PED-1 LLDR")
    tads_lrf_d = EnumValue(4800, "TADS LRF/D")
    mms_lrf_d = EnumValue(4900, "MMS LRF/D")
    ah_1_c_nite = EnumValue(5000, "AH-1 C-NITE")
    mates = EnumValue(5100, "MATES")
    tcv_115 = EnumValue(5200, "TCV 115")
    tim = EnumValue(5300, "TIM")
    tms_303 = EnumValue(5400, "TMS 303")
    tmy_303 = EnumValue(5500, "TMY 303")
    alrad = EnumValue(5600, "ALRAD")
    rftdl = EnumValue(5700, "RFTDL")
    vvlr = EnumValue(5800, "VVLR")
    p0705_hell = EnumValue(6000, "P0705 HELL")
    p0708_pulse = EnumValue(6100, "P0708 PULSE")
    held = EnumValue(6200, "HELD")
    type_105 = EnumValue(6300, "TYPE 105")
    type_118 = EnumValue(6400, "TYPE 118")
    type_121 = EnumValue(6500, "TYPE 121")
    type_126 = EnumValue(6600, "TYPE 126")
    type_629 = EnumValue(6700, "TYPE 629")
    clds = EnumValue(6800, "CLDS")
    tav_38 = EnumValue(6900, "TAV-38")
    tmv_630 = EnumValue(7000, "TMV 630")
    altm_1020 = EnumValue(7100, "ALTM 1020")
    alats = EnumValue(7200, "ALATS")
    dark_star_lamps = EnumValue(7300, "Dark Star/LAMPS")
    gltd_ii = EnumValue(7400, "GLTD II")
    mbt_elrf = EnumValue(7500, "MBT-ELRF")
    mark_vii = EnumValue(7600, "Mark VII")
    sire_v = EnumValue(7700, "SIRE V")
    an_aaq_16b = EnumValue(7800, "AN/AAQ-16B")
    an_aaq_16d_aesop = EnumValue(7900, "AN/AAQ-16D; AESOP")
    an_aaq_21_star_safire_iii = EnumValue(8000, "AN/AAQ-21; Star SAFIRE III")
    an_aaq_22e_brite_star = EnumValue(8100, "AN/AAQ-22E; BRITE Star")
    an_aaq_36_star_safire_ii = EnumValue(8200, "AN/AAQ-36; Star SAFIRE II")
    an_aas_38a_nite_hawk = EnumValue(8300, "AN/AAS-38A; Nite Hawk")
    an_aas_38b_nite_hawk = EnumValue(8400, "AN/AAS-38B; Nite Hawk")
    an_aas_44cv = EnumValue(8500, "AN/AAS-44C(V)")
    an_aas_53_csp = EnumValue(8600, "AN/AAS-53; CSP")
    an_asq_28_atflir = EnumValue(8700, "AN/ASQ-28 ATFLIR")
    an_das_1_mts_b = EnumValue(8800, "AN/DAS-1; MTS-B")
    an_paq_1_ltd = EnumValue(8900, "AN/PAQ-1 LTD")
    an_paq_3_mule = EnumValue(9000, "AN/PAQ-3 MULE")
    an_peq_1_soflam = EnumValue(9090, "AN/PEQ-1; SOFLAM")
    an_peq_3 = EnumValue(9100, "AN/PEQ-3")
    an_peq_15_atpial = EnumValue(9140, "AN/PEQ-15; ATPIAL")
    an_peq_18_izlid_1000p = EnumValue(9150, "AN/PEQ-18; IZLID 1000P")
    an_tvq_2_g_vlld = EnumValue(9200, "AN/TVQ-2 G/VLLD")
    an_zsq_2v1_eos = EnumValue(9300, "AN/ZSQ-2(V)1 EOS")
    an_zsq_2v2_eos = EnumValue(9400, "AN/ZSQ-2(V)2 EOS")
    circm = EnumValue(9500, "CIRCM")
    guardian = EnumValue(9600, "Guardian")
    izlid_200p = EnumValue(9700, "IZLID 200P")
    izlid_1000p_w = EnumValue(9800, "IZLID 1000P-W")
    mms = EnumValue(9900, "MMS")
    m_tads_pnvs_arrowhead = EnumValue(10000, "M-TADS/PNVS; Arrowhead")
    rbs_70 = EnumValue(10100, "RBS-70")
    rbs_90 = EnumValue(10200, "RBS-90")
    tads_pnvs = EnumValue(10300, "TADS/PNVS")
    colibri = EnumValue(10400, "COLIBRI")
    damocles = EnumValue(10500, "Damocles")
    i_251_shkval = EnumValue(10600, "I-251 Shkval")
    kps_53av_eots = EnumValue(10700, "KPS-53AV EOTS")
    star_safire_380 = EnumValue(10800, "Star SAFIRE 380")
    janus_t_eos = EnumValue(10900, "JANUS-T EOS")
    lothar_eos = EnumValue(11000, "LOTHAR EOS")
    mk46_mod_1_eos = EnumValue(11100, "MK46 MOD 1 EOS")
    mtk_201me_eos = EnumValue(11200, "MTK-201ME EOS")
    thales_mirador_mk2_eos = EnumValue(11300, "Thales Mirador Mk2 EOS")
    tpn_1m_49_23_eos = EnumValue(11400, "TPN-1M-49-23 EOS")
    default = not_specified

    def get_marshaled_size(self):
        return 16
