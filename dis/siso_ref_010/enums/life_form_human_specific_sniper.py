'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 481,
  * marshal size 8;
  * LifeFormHumanSpecificSniper has 48 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificSniper(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _58mm_qbu_88_type_88 = EnumValue(1, "5.8mm QBU-88 (Type 88)")
    _762mm_c3 = EnumValue(30, "7.62mm C3")
    _762mm_fr_f2 = EnumValue(31, "7.62mm FR F2")
    _762mm_awm_f_g22 = EnumValue(32, "7.62mm AWM-F (G22)")
    _762mm_g3_sg_1 = EnumValue(33, "7.62mm G3 SG/1")
    _762mm_galil_sniper = EnumValue(34, "7.62mm Galil Sniper")
    _762mm_l96a1 = EnumValue(35, "7.62mm L96A1")
    _762mm_m14_dmr = EnumValue(36, "7.62mm M14 DMR")
    _762mm_m24_sniper_weapon_system_sws = EnumValue(37, "7.62mm M24 Sniper Weapon System (SWS)")
    _762mm_m40a1_a3 = EnumValue(38, "7.62mm M40A1/A3")
    _762mm_steyr_ssg_69 = EnumValue(39, "7.62mm Steyr SSG 69")
    _762mm_svd_dragunov = EnumValue(40, "7.62mm SVD (Dragunov)")
    _762mm_type_79 = EnumValue(41, "7.62mm TYPE 79")
    _762mm_sr_25_mk11 = EnumValue(42, "7.62mm SR-25 MK11")
    _762mm_aw_sr_98 = EnumValue(43, "7.62mm AW SR-98")
    _762mm_blaser_r93 = EnumValue(44, "7.62mm Blaser R93")
    _762mm_m2010_enhanced_sniper_rifle_esr = EnumValue(45, "7.62mm M2010 Enhanced Sniper Rifle (ESR)")
    _762mm_m110_semi_automatic_sniper_system_sass = EnumValue(46, "7.62mm M110 Semi-Automatic Sniper System (SASS)")
    _762mm_l129a1 = EnumValue(47, "7.62mm L129A1")
    _762mm_sako_trg_22 = EnumValue(48, "7.62mm Sako TRG-22")
    _762mm_colt_canada_c20_dmr = EnumValue(49, "7.62mm Colt Canada C20 DMR")
    _762mm_bren_2_pps = EnumValue(50, "7.62mm BREN 2 PPS")
    _762mm_zbroyar_vpr_308_sniper_version_of_z_008 = EnumValue(51, "7.62mm Zbroyar VPR-308 (Sniper version of Z-008)")
    _762mm_zbroyar_uar_10 = EnumValue(52, "7.62mm Zbroyar UAR-10")
    _762mm_fort_301 = EnumValue(53, "7.62mm Fort-301")
    _762mm_awm_300_winchester = EnumValue(54, "7.62mm AWM .300 Winchester")
    _762mm_cz_750 = EnumValue(55, "7.62mm CZ 750")
    _77mm_type_99 = EnumValue(100, "7.7mm TYPE 99")
    _858mm_blaser_r93_tactical_2 = EnumValue(105, "8.58mm Blaser R93 Tactical 2")
    _86mm_sako_trg_42 = EnumValue(106, "8.6mm Sako TRG-42")
    _86mm_awsm_338_lapua_magnum = EnumValue(107, "8.6mm AWSM .338 Lapua Magnum")
    _9mm_vss_vintorez = EnumValue(110, "9mm VSS Vintorez")
    _95mm_1036mm_cheytac_m200_375_cal_408_cal = EnumValue(120, "9.5mm/10.36mm CheyTac M200 (.375 cal/.408 cal)")
    _127mm_steyr_hs_50 = EnumValue(170, "12.7mm Steyr HS .50")
    _127mm_m82a1a_special_applications_scoped_rifle_sasr = EnumValue(171, "12.7mm M82A1A Special Applications Scoped Rifle (SASR)")
    _127mm_nsv = EnumValue(172, "12.7mm NSV")
    _127mm_osv_96 = EnumValue(173, "12.7mm OSV-96")
    _127mm_rangemaster_50 = EnumValue(174, "12.7mm Rangemaster 50")
    _127mm_v94 = EnumValue(175, "12.7mm V94")
    _127mm_m107 = EnumValue(176, "12.7mm M107")
    _127mm_zvi_falcon_op99 = EnumValue(177, "12.7mm ZVI Falcon OP99")
    _127mm_snipex_rhino_hunter = EnumValue(178, "12.7mm Snipex Rhino Hunter")
    _127mm_snipex_alligator = EnumValue(179, "12.7mm Snipex Alligator")
    _127mm_desert_tech_hti_375_cal_408_cal_416_cal_50_cal = EnumValue(180, "12.7mm Desert Tech HTI (.375 cal/.408 cal/.416 cal/.50 cal)")
    _127mm_aw50_50_cal_bmg = EnumValue(181, "12.7mm AW50 (.50 cal BMG)")
    _145mm_snipex_t_rex = EnumValue(190, "14.5mm Snipex T-Rex")
    _20mm_denel_ntw_20 = EnumValue(200, "20mm Denel NTW-20")
    default = other

    def get_marshaled_size(self):
        return 8
