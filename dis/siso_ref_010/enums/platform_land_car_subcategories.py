'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 428, marshal size 8;
  * PlatformLandCarSubcategories has 44 enumerations total.
  * Subcategories for Land Platform Category 81. Subcategory values have the general form/style in the 10's/100's digits and the size in the 1's digit. A zero in the 1's digit indicates an unspecified size.
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class PlatformLandCarSubcategories(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    generic = EnumValue(10, "Generic")
    generic_mini_microcar_tiny = EnumValue(11, "Generic, Mini/Microcar (Tiny)")
    generic_economy_compact_small = EnumValue(12, "Generic, Economy/Compact (Small)")
    generic_intermediate_standard_medium = EnumValue(13, "Generic, Intermediate/Standard (Medium)")
    generic_full_premium_luxury_large = EnumValue(14, "Generic, Full/Premium/Luxury (Large)")
    generic_oversize = EnumValue(15, "Generic, Oversize")
    _2_door_coupe = EnumValue(20, "2-Door (Coupe)")
    _2_door_coupe_mini_microcar_tiny = EnumValue(21, "2-Door (Coupe), Mini/Microcar (Tiny)")
    _2_door_coupe_economy_compact_small = EnumValue(22, "2-Door (Coupe), Economy/Compact (Small)")
    _2_door_coupe_intermediate_standard_medium = EnumValue(23, "2-Door (Coupe), Intermediate/Standard (Medium)")
    _3_door_hatchback = EnumValue(30, "3-Door Hatchback")
    _3_door_hatchback_mini_microcar_tiny = EnumValue(31, "3-Door Hatchback, Mini/Microcar (Tiny)")
    _3_door_hatchback_economy_compact_small = EnumValue(32, "3-Door Hatchback, Economy/Compact (Small)")
    _4_door_sedan = EnumValue(40, "4-Door Sedan")
    _4_door_sedan_mini_microcar_tiny = EnumValue(41, "4-Door Sedan, Mini/Microcar (Tiny)")
    _4_door_sedan_economy_compact_small = EnumValue(42, "4-Door Sedan, Economy/Compact (Small)")
    _4_door_sedan_intermediate_standard_medium = EnumValue(43, "4-Door Sedan, Intermediate/Standard (Medium)")
    _4_door_sedan_full_premium_luxury_large = EnumValue(44, "4-Door Sedan, Full/Premium/Luxury (Large)")
    _4_door_sedan_oversize = EnumValue(45, "4-Door Sedan, Oversize")
    _5_door_hatchback = EnumValue(50, "5-Door Hatchback")
    _5_door_hatchback_mini_microcar_tiny = EnumValue(51, "5-Door Hatchback, Mini/Microcar (Tiny)")
    _5_door_hatchback_economy_compact_small = EnumValue(52, "5-Door Hatchback, Economy/Compact (Small)")
    _5_door_hatchback_intermediate_standard_medium = EnumValue(53, "5-Door Hatchback, Intermediate/Standard (Medium)")
    _5_door_hatchback_full_premium_luxury_large = EnumValue(54, "5-Door Hatchback, Full/Premium/Luxury (Large)")
    wagon = EnumValue(60, "Wagon")
    wagon_economy_compact_small = EnumValue(62, "Wagon, Economy/Compact (Small)")
    wagon_intermediate_standard_medium = EnumValue(63, "Wagon, Intermediate/Standard (Medium)")
    wagon_full_premium_luxury_large = EnumValue(64, "Wagon, Full/Premium/Luxury (Large)")
    minivan = EnumValue(70, "Minivan")
    limousine = EnumValue(80, "Limousine")
    limousine_full_premium_luxury_large = EnumValue(84, "Limousine, Full/Premium/Luxury (Large)")
    limousine_oversize = EnumValue(85, "Limousine, Oversize")
    sports_high_performance = EnumValue(90, "Sports (High Performance)")
    convertible = EnumValue(100, "Convertible")
    convertible_mini_microcar_tiny = EnumValue(101, "Convertible, Mini/Microcar (Tiny)")
    convertible_economy_compact_small = EnumValue(102, "Convertible, Economy/Compact (Small)")
    convertible_intermediate_standard_medium = EnumValue(103, "Convertible, Intermediate/Standard (Medium)")
    convertible_full_premium_luxury_large = EnumValue(104, "Convertible, Full/Premium/Luxury (Large)")
    sports_utility_vehicle_suv = EnumValue(110, "Sports Utility Vehicle (SUV)")
    sports_utility_vehicle_suv_economy_compact_small = EnumValue(112, "Sports Utility Vehicle (SUV), Economy/Compact (Small)")
    sports_utility_vehicle_suv_intermediate_standard_medium = EnumValue(113, "Sports Utility Vehicle (SUV), Intermediate/Standard (Medium)")
    sports_utility_vehicle_suv_full_premium_luxury_large = EnumValue(114, "Sports Utility Vehicle (SUV), Full/Premium/Luxury (Large)")
    sports_utility_vehicle_suv_oversize = EnumValue(115, "Sports Utility Vehicle (SUV), Oversize")
    default = other

    def get_marshaled_size(self):
        return 8
