'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .minefield_appearance_minefield_type import MinefieldAppearanceMinefieldType
from .minefield_appearance_active_status import MinefieldAppearanceActiveStatus
from .minefield_appearance_lane import MinefieldAppearanceLane
from .minefield_appearance_state import MinefieldAppearanceState

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 190, marshal size 16,
  * MinefieldStateAppearanceBitMap
  */

"""

class MinefieldStateAppearanceBitMapBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, length=2) Identifies the type of minefield,  use {@link MinefieldAppearanceMinefieldType} values for this field
        ("_minefieldType", UByte, 2),

        # (bit position 2, boolean) Describes whether the minefield is active or inactive,  use {@link MinefieldAppearanceActiveStatus} values for this field
        ("_activeStatus", UByte, 1),

        # (bit position 3, boolean) Identifies whether the minefield has an active or inactive lane,  use {@link MinefieldAppearanceLane} values for this field
        ("_lane", UByte, 1),

        # (bit position 13, boolean) Describes the state of the minefield,  use {@link MinefieldAppearanceState} values for this field
        ("_state", UByte, 1)
    ]

class MinefieldStateAppearanceBitMap(ctypes.Union):
    _fields_ = [
        ("capabilities", MinefieldStateAppearanceBitMapBitField),
        ("asbyte", UInt8)
    ]

    def set_minefieldType(self, value : MinefieldAppearanceMinefieldType):
        self.capabilities._minefieldType = int(value)
    def get_minefieldType(self) -> MinefieldAppearanceMinefieldType:
        return MinefieldAppearanceMinefieldType.get_enum(self._minefieldType)
    MinefieldType = property(get_minefieldType, set_minefieldType)

    def set_activeStatus(self, value : MinefieldAppearanceActiveStatus):
        self.capabilities._activeStatus = int(value)
    def get_activeStatus(self) -> MinefieldAppearanceActiveStatus:
        return MinefieldAppearanceActiveStatus.get_enum(self._activeStatus)
    ActiveStatus = property(get_activeStatus, set_activeStatus)

    def set_lane(self, value : MinefieldAppearanceLane):
        self.capabilities._lane = int(value)
    def get_lane(self) -> MinefieldAppearanceLane:
        return MinefieldAppearanceLane.get_enum(self._lane)
    Lane = property(get_lane, set_lane)

    def set_state(self, value : MinefieldAppearanceState):
        self.capabilities._state = int(value)
    def get_state(self) -> MinefieldAppearanceState:
        return MinefieldAppearanceState.get_enum(self._state)
    State = property(get_state, set_state)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "MinefieldType : " +  self.MinefieldType.get_description + "\n"
        outputStream += "ActiveStatus : " +  self.ActiveStatus.get_description + "\n"
        outputStream += "Lane : " +  self.Lane.get_description + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 16 
