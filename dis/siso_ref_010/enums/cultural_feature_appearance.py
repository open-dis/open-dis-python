'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .damage_area import DamageArea
from .appearance_damage import AppearanceDamage
from .appearance_entityor_object_state import AppearanceEntityorObjectState

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 39, marshal size 32,
  * CulturalFeatureAppearance
  */

"""

class CulturalFeatureAppearanceBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, length=3) Describes the damaged area,  use {@link DamageArea} values for this field
        ("_damageArea", UByte, 3),

        # (bit position 3, length=2) Describes the damaged appearance,  use {@link AppearanceDamage} values for this field
        ("_damage", UByte, 2),

        # (bit position 5, boolean) Describes whether or not smoke is emanating from the entity,  use {@link UInt8} values for this field
        ("_isSmokeEmanating", UByte, 1),

        # (bit position 15, boolean) Describes whether the entity is burning and flames are visible,  use {@link UInt8} values for this field
        ("_isFlaming", UByte, 1),

        # (bit position 21, boolean) Describes whether the entity is frozen and should not be dead reckoned,  use {@link UInt8} values for this field
        ("_isFrozen", UByte, 1),

        # (bit position 22, boolean) Describes whether the internal heat is on or off,  use {@link UInt8} values for this field
        ("_internalHeatOn", UByte, 1),

        # (bit position 23, boolean) Describes whether the entity is active or deactivated,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 28, boolean) Describes whether the exterior lights are on or off,  use {@link UInt8} values for this field
        ("_exteriorLightsOn", UByte, 1),

        # (bit position 29, boolean) Describes whether the interior lights are on or off,  use {@link UInt8} values for this field
        ("_interiorLightsOn", UByte, 1),

        # (bit position 31, boolean) Describes whether or not the entity is masked or cloaked,  use {@link UInt8} values for this field
        ("_maskedCloaked", UByte, 1)
    ]

class CulturalFeatureAppearance(ctypes.Union):
    _fields_ = [
        ("capabilities", CulturalFeatureAppearanceBitField),
        ("asbyte", UInt8)
    ]

    def set_damageArea(self, value : DamageArea):
        self.capabilities._damageArea = int(value)
    def get_damageArea(self) -> DamageArea:
        return DamageArea.get_enum(self._damageArea)
    DamageArea = property(get_damageArea, set_damageArea)

    def set_damage(self, value : AppearanceDamage):
        self.capabilities._damage = int(value)
    def get_damage(self) -> AppearanceDamage:
        return AppearanceDamage.get_enum(self._damage)
    Damage = property(get_damage, set_damage)

    def set_isSmokeEmanating(self, value : UInt8):
        self.capabilities._isSmokeEmanating = int(value)
    def get_isSmokeEmanating(self) -> UInt8:
        return self.capabilities._isSmokeEmanating
    IsSmokeEmanating = property(get_isSmokeEmanating, set_isSmokeEmanating)

    def set_isFlaming(self, value : UInt8):
        self.capabilities._isFlaming = int(value)
    def get_isFlaming(self) -> UInt8:
        return self.capabilities._isFlaming
    IsFlaming = property(get_isFlaming, set_isFlaming)

    def set_isFrozen(self, value : UInt8):
        self.capabilities._isFrozen = int(value)
    def get_isFrozen(self) -> UInt8:
        return self.capabilities._isFrozen
    IsFrozen = property(get_isFrozen, set_isFrozen)

    def set_internalHeatOn(self, value : UInt8):
        self.capabilities._internalHeatOn = int(value)
    def get_internalHeatOn(self) -> UInt8:
        return self.capabilities._internalHeatOn
    InternalHeatOn = property(get_internalHeatOn, set_internalHeatOn)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_exteriorLightsOn(self, value : UInt8):
        self.capabilities._exteriorLightsOn = int(value)
    def get_exteriorLightsOn(self) -> UInt8:
        return self.capabilities._exteriorLightsOn
    ExteriorLightsOn = property(get_exteriorLightsOn, set_exteriorLightsOn)

    def set_interiorLightsOn(self, value : UInt8):
        self.capabilities._interiorLightsOn = int(value)
    def get_interiorLightsOn(self) -> UInt8:
        return self.capabilities._interiorLightsOn
    InteriorLightsOn = property(get_interiorLightsOn, set_interiorLightsOn)

    def set_maskedCloaked(self, value : UInt8):
        self.capabilities._maskedCloaked = int(value)
    def get_maskedCloaked(self) -> UInt8:
        return self.capabilities._maskedCloaked
    MaskedCloaked = property(get_maskedCloaked, set_maskedCloaked)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "DamageArea : " +  self.DamageArea.get_description + "\n"
        outputStream += "Damage : " +  self.Damage.get_description + "\n"
        outputStream += "IsSmokeEmanating : " +  str(self.IsSmokeEmanating) + "\n"
        outputStream += "IsFlaming : " +  str(self.IsFlaming) + "\n"
        outputStream += "IsFrozen : " +  str(self.IsFrozen) + "\n"
        outputStream += "InternalHeatOn : " +  str(self.InternalHeatOn) + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "ExteriorLightsOn : " +  str(self.ExteriorLightsOn) + "\n"
        outputStream += "InteriorLightsOn : " +  str(self.InteriorLightsOn) + "\n"
        outputStream += "MaskedCloaked : " +  str(self.MaskedCloaked) + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 32 
