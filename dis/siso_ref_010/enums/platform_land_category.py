'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 9,
  * marshal size 8;
  * PlatformLandCategory has 57 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class PlatformLandCategory(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    tank = EnumValue(1, "Tank")
    armored_fighting_vehicle = EnumValue(2, "Armored Fighting Vehicle")
    armored_utility_vehicle = EnumValue(3, "Armored Utility Vehicle")
    self_propelled_artillery = EnumValue(4, "Self-Propelled Artillery")
    towed_artillery = EnumValue(5, "Towed Artillery")
    small_wheeled_utility_vehicle = EnumValue(6, "Small Wheeled Utility Vehicle")
    large_wheeled_utility_vehicle = EnumValue(7, "Large Wheeled Utility Vehicle")
    small_tracked_utility_vehicle = EnumValue(8, "Small Tracked Utility Vehicle")
    large_tracked_utility_vehicle = EnumValue(9, "Large Tracked Utility Vehicle")
    mortar = EnumValue(10, "Mortar")
    mine_plow = EnumValue(11, "Mine Plow")
    mine_rake = EnumValue(12, "Mine Rake")
    mine_roller = EnumValue(13, "Mine Roller")
    cargo_trailer = EnumValue(14, "Cargo Trailer")
    fuel_trailer = EnumValue(15, "Fuel Trailer")
    generator_trailer = EnumValue(16, "Generator Trailer")
    water_trailer = EnumValue(17, "Water Trailer")
    engineer_equipment = EnumValue(18, "Engineer Equipment")
    heavy_equipment_transport_trailer = EnumValue(19, "Heavy Equipment Transport Trailer")
    maintenance_equipment_trailer = EnumValue(20, "Maintenance Equipment Trailer")
    limber = EnumValue(21, "Limber")
    chemical_decontamination_trailer = EnumValue(22, "Chemical Decontamination Trailer")
    warning_system = EnumValue(23, "Warning System")
    train_engine = EnumValue(24, "Train - Engine")
    train_car = EnumValue(25, "Train - Car")
    train_caboose = EnumValue(26, "Train - Caboose")
    civilian_vehicle = EnumValue(27, "Civilian Vehicle")
    air_defense_missile_defense_unit_equipment = EnumValue(28, "Air Defense / Missile Defense Unit Equipment")
    command_control_communications_and_intelligence_c3i_system = EnumValue(29, "Command, Control, Communications, and Intelligence (C3I) System")
    operations_facility = EnumValue(30, "Operations Facility")
    intelligence_facility = EnumValue(31, "Intelligence Facility")
    surveillance_facility = EnumValue(32, "Surveillance Facility")
    communications_facility = EnumValue(33, "Communications Facility")
    command_facility = EnumValue(34, "Command Facility")
    c4i_facility = EnumValue(35, "C4I Facility")
    control_facility = EnumValue(36, "Control Facility")
    fire_control_facility = EnumValue(37, "Fire Control Facility")
    missile_defense_facility = EnumValue(38, "Missile Defense Facility")
    field_command_post = EnumValue(39, "Field Command Post")
    observation_post = EnumValue(40, "Observation Post")
    mine_flail = EnumValue(41, "Mine Flail")
    unmanned = EnumValue(50, "Unmanned")
    # XREF UID 427 - CLASS PlatformLandMotorcycleSubcategories 
    motorcycle = EnumValue(80, "Motorcycle")
    # XREF UID 428 - CLASS PlatformLandCarSubcategories 
    car = EnumValue(81, "Car")
    # XREF UID 429 - CLASS PlatformLandBusSubcategories 
    bus = EnumValue(82, "Bus")
    # XREF UID 430 - CLASS PlatformLandSingleUnitCargoTruckSubcategories 
    single_unit_cargo_truck = EnumValue(83, "Single Unit Cargo Truck")
    # XREF UID 431 - CLASS PlatformLandSingleUnitUtilityEmergencyTruckSubcategories 
    single_unit_utility_emergency_truck = EnumValue(84, "Single Unit Utility/Emergency Truck")
    # XREF UID 432 - CLASS PlatformLandMultipleUnitCargoTruckSubcategories 
    multiple_unit_cargo_truck = EnumValue(85, "Multiple Unit Cargo Truck")
    # XREF UID 433 - CLASS PlatformLandMultipleUnitUtilityEmergencyTruckSubcategories 
    multiple_unit_utility_emergency_truck = EnumValue(86, "Multiple Unit Utility/Emergency Truck")
    # XREF UID 434 - CLASS PlatformLandConstructionSpecialtyVehicleSubcategories 
    construction_specialty_vehicle = EnumValue(87, "Construction Specialty Vehicle")
    # XREF UID 435 - CLASS PlatformLandFarmSpecialtyVehicleSubcategories 
    farm_specialty_vehicle = EnumValue(88, "Farm Specialty Vehicle")
    # XREF UID 436 - CLASS PlatformLandTrailerSubcategories 
    trailer = EnumValue(89, "Trailer")
    # XREF UID 437 - CLASS PlatformLandRecreationalSubcategories 
    recreational = EnumValue(90, "Recreational")
    # XREF UID 438 - CLASS PlatformLandNonmotorizedSubcategories 
    non_motorized = EnumValue(91, "Non-motorized")
    # XREF UID 439 - CLASS PlatformLandTrainsSubcategories 
    trains = EnumValue(92, "Trains")
    # XREF UID 440 - CLASS PlatformLandUtilityEmergencyCarSubcategories 
    utility_emergency_car = EnumValue(93, "Utility/Emergency Car")
    default = other

    def get_marshaled_size(self):
        return 8
