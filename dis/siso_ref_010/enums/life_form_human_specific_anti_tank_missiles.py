'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 519,
  * marshal size 8;
  * LifeFormHumanSpecificAntiTankMissiles has 75 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificAntiTankMissiles(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _120mm_type_64_mat_kam_3 = EnumValue(30, "120mm Type 64 MAT KAM-3")
    _153mm_type_79_jyu_mat_kam_9 = EnumValue(31, "153mm Type 79 Jyu-MAT KAM-9")
    _120mm_type_87_chu_mat = EnumValue(32, "120mm Type 87 Chu-MAT")
    _140mm_type_01_lmat = EnumValue(33, "140mm Type 01 LMAT")
    _140mm_m47_dragon = EnumValue(58, "140mm M47 Dragon")
    _140mm_saeghe_1_2 = EnumValue(59, "140mm Saeghe 1-2")
    _127mm_fgm_148_javelin = EnumValue(60, "127mm FGM-148 Javelin")
    _139mm_fgm_172_sraw = EnumValue(63, "139mm FGM-172 SRAW")
    _139mm_fgm_172b_sraw_mpv = EnumValue(64, "139mm FGM-172B SRAW-MPV")
    _152mm_bgm_71_tow = EnumValue(68, "152mm BGM-71 TOW")
    _152mm_orev_tow_ii = EnumValue(69, "152mm Orev TOW II")
    _120mm_vickers_vigilant_clevite = EnumValue(75, "120mm Vickers Vigilant / Clevite")
    _110mm_bantam_rb_53 = EnumValue(80, "110mm Bantam (Rb 53)")
    _150mm_rbs_56_bill_1 = EnumValue(81, "150mm RBS-56 BILL 1")
    _150mm_rbs_56_2_bill_2 = EnumValue(82, "150mm RBS-56-2 BILL 2")
    _150mm_rb_57_nlaw_mbt_law = EnumValue(83, "150mm RB-57 NLAW (MBT-LAW)")
    _130mm_spike_sr = EnumValue(85, "130mm Spike SR")
    _130mm_spike_mr_clu = EnumValue(86, "130mm Spike MR (CLU)")
    _130mm_spike_lr_clu = EnumValue(87, "130mm Spike LR (CLU)")
    _60mm_mosquito = EnumValue(95, "60mm Mosquito")
    _160mm_ss10 = EnumValue(98, "160mm SS.10")
    _103mm_milan = EnumValue(100, "103mm MILAN")
    _115mm_milan_2 = EnumValue(101, "115mm MILAN 2")
    _115mm_milan_2t = EnumValue(102, "115mm MILAN 2T")
    _115mm_milan_3 = EnumValue(103, "115mm MILAN 3")
    _115mm_milan_er = EnumValue(104, "115mm MILAN ER")
    _136mm_eryx = EnumValue(105, "136mm ERYX")
    _152mm_entac = EnumValue(107, "152mm Entac")
    _125mm_raad = EnumValue(110, "125mm RAAD")
    _125mm_i_raad_t = EnumValue(111, "125mm I-RAAD-T")
    _152mm_toophan = EnumValue(112, "152mm Toophan")
    _152mm_toophan_2 = EnumValue(113, "152mm Toophan 2")
    _152mm_toophan_5 = EnumValue(114, "152mm Toophan 5")
    _136mm_bumbar = EnumValue(120, "136mm Bumbar")
    _130mm_shershen_pk_2 = EnumValue(125, "130mm Shershen PK-2")
    _152mm_shershen_q_p_2b = EnumValue(126, "152mm Shershen-Q P-2B")
    _130mm_mectron_mss_12 = EnumValue(130, "130mm Mectron MSS-1.2")
    _120mm_hj_8 = EnumValue(140, "120mm HJ-8")
    _120mm_hj_8a = EnumValue(141, "120mm HJ-8A")
    _120mm_hj_8b = EnumValue(142, "120mm HJ-8B")
    _120mm_hj_8c = EnumValue(143, "120mm HJ-8C")
    _120mm_hj_8d = EnumValue(144, "120mm HJ-8D")
    _120mm_hj_8e = EnumValue(145, "120mm HJ-8E")
    _120mm_hj_8f = EnumValue(146, "120mm HJ-8F")
    _120mm_hj_8fae = EnumValue(147, "120mm HJ-8FAE")
    _120mm_hj_8l = EnumValue(148, "120mm HJ-8L")
    _120mm_hj_8h = EnumValue(149, "120mm HJ-8H")
    _120mm_hj_8s = EnumValue(150, "120mm HJ-8S")
    _120mm_baktar_shikan = EnumValue(151, "120mm Baktar-Shikan")
    _120mm_hj_11_aft_11 = EnumValue(152, "120mm HJ-11 (AFT-11)")
    _152mm_hj_9a = EnumValue(153, "152mm HJ-9A")
    _135mm_hj_12_red_arrow = EnumValue(154, "135mm HJ-12 Red Arrow")
    _125mm_hj_73_mclos = EnumValue(155, "125mm HJ-73 MCLOS")
    _125mm_hj_73b_saclos = EnumValue(156, "125mm HJ-73B SACLOS")
    _125mm_hj_73c_saclos_era = EnumValue(157, "125mm HJ-73C SACLOS ERA")
    _125mm_at_3_sagger_a_9m14_malyutka = EnumValue(170, "125mm AT-3 Sagger A/9M14 Malyutka")
    _125mm_at_3b_sagger_b_9m14m_malyutka_m = EnumValue(171, "125mm AT-3B Sagger B/9M14M Malyutka-M")
    _125mm_at_3c_sagger_c_9m14p_malyutka_p = EnumValue(172, "125mm AT-3C Sagger C/9M14P Malyutka-P")
    _125mm_at_3d_sagger_d_9m14_2_malyutka_2 = EnumValue(173, "125mm AT-3D Sagger D/9M14-2 Malyutka-2")
    _125mm_susong_po = EnumValue(174, "125mm Susong-Po")
    _125mm_at_3c_polk = EnumValue(175, "125mm AT-3C POLK")
    _125mm_kun_wu_1 = EnumValue(176, "125mm Kun Wu 1")
    _125mm_maliutka_m2t = EnumValue(177, "125mm Maliutka M2T")
    _120mm_at_4a_spigot_a_9m111_fagot = EnumValue(178, "120mm AT-4A Spigot A/9M111 Fagot")
    _120mm_at_4b_spigot_b_9m111_2_fagot = EnumValue(179, "120mm AT-4B Spigot B/9M111-2 Fagot")
    _120mm_at_4c_spigot_c_9m111m_faktoriya = EnumValue(180, "120mm AT-4C Spigot C/9M111M Faktoriya")
    _135mm_at_5a_spandrel_9m113_kronkurs = EnumValue(181, "135mm AT-5A Spandrel/9M113 Kronkurs")
    _135mm_at_5b_spandrel_9m113m_kronkurs_m = EnumValue(182, "135mm AT-5B Spandrel/9M113M Kronkurs-M")
    _135mm_tosan = EnumValue(183, "135mm Tosan")
    _94mm_at_7_saxhorn_9k115_metis = EnumValue(184, "94mm AT-7 Saxhorn/9K115 Metis")
    _130mm_at_13_saxhorn_2_9k115_2_metis_m = EnumValue(185, "130mm AT-13 Saxhorn-2/9K115-2 Metis-M")
    _152mm_at_14_spriggan_9m133_kornet = EnumValue(186, "152mm AT-14 Spriggan/9M133 Kornet")
    _152mm_dehlavie = EnumValue(187, "152mm Dehlavie")
    _102mm_mathogo = EnumValue(200, "102mm Mathogo")
    default = other

    def get_marshaled_size(self):
        return 8
