'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 16,
  * marshal size 8;
  * LifeFormsSubcategoryUSWeapons has 122 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormsSubcategoryUSWeapons(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    assault_machine_pistol_kf_amp = EnumValue(1, "Assault machine pistol, KF-AMP")
    automatic_model_1911a1_45 = EnumValue(2, "Automatic model 1911A1 .45")
    combat_master_mark_vi_45_detronics = EnumValue(3, "Combat Master Mark VI .45, Detronics")
    de_cocker_kp90dc_45 = EnumValue(4, "De-cocker KP90DC .45")
    de_cocker_kp91dc_40 = EnumValue(5, "De-cocker KP91DC .40")
    general_officers_model_15_45 = EnumValue(6, "General officer's Model 15 .45")
    nova_9_mm_lafrance = EnumValue(7, "Nova 9-mm, LaFrance")
    personal_defense_weapon_mp5k_pdw_9_mm = EnumValue(8, "Personal Defense Weapon MP5K-PDW 9-mm")
    silenced_colt_45_lafrance = EnumValue(9, "Silenced Colt .45, LaFrance")
    _5900_series_9_mm_smith_amp_wesson_samp_w = EnumValue(10, "5900-series 9-mm, Smith &amp; Wesson (S&amp;W)")
    m9 = EnumValue(11, "M9")
    model_1911a1_springfield_armory = EnumValue(12, "Model 1911A1, Springfield Armory")
    model_2000_9_mm = EnumValue(13, "Model 2000 9-mm")
    p_9_9_mm_springfield_armory = EnumValue(14, "P-9 9-mm, Springfield Armory")
    p_12_9_mm = EnumValue(15, "P-12 9-mm")
    p_85_mark_ii_9_mm_ruger = EnumValue(16, "P-85 Mark II 9-mm, Ruger")
    advanced_combat_rifle_556_mm_aai = EnumValue(17, "Advanced Combat Rifle 5.56-mm, AAI")
    commando_assault_rifle_model_733_556_mm_colt = EnumValue(18, "Commando assault rifle, Model 733 5.56-mm, Colt")
    infantry_rifle_mini_14_20_gb_556_mm_ruger = EnumValue(19, "Infantry rifle, Mini-14/20 GB 5.56-mm, Ruger")
    mini_14_556_mm_ruger = EnumValue(20, "Mini-14 5.56-mm, Ruger")
    mini_thirty_762_mm_ruger = EnumValue(21, "Mini Thirty 7.62-mm, Ruger")
    semi_automatic_model_82a2_50_barrett = EnumValue(22, "Semi-automatic model 82A2 .50, Barrett")
    sniper_weapon_system_m24_762_mm = EnumValue(23, "Sniper Weapon System M24 7.62-mm")
    sniping_rifle_m21_springfield_armory = EnumValue(24, "Sniping rifle M21, Springfield Armory")
    sniping_rifle_m40a1_762_mm = EnumValue(25, "Sniping rifle M40A1 7.62-mm")
    sniping_rifle_m600_762_mm = EnumValue(26, "Sniping rifle M600 7.62-mm")
    ar_15_m16_556_mm = EnumValue(27, "AR-15 (M16) 5.56-mm")
    m1_30 = EnumValue(28, "M1 .30")
    m14_762_mm_nato = EnumValue(29, "M14 7.62-mm, NATO")
    m14_m1a_m1a1_a1_springfield_armory = EnumValue(30, "M14 (M1A, M1A1-A1), Springfield Armory")
    m14k_assault_rifle_lafrance = EnumValue(31, "M14K assault rifle, LaFrance")
    m16a2_assault_rifle_556_mm_colt = EnumValue(32, "M16A2 assault rifle 5.56-mm, Colt")
    m21_762_mm_us = EnumValue(33, "M21 7.62-mm, U.S.")
    m77_mark_ii_556_mm_ruger = EnumValue(34, "M77 Mark II 5.56-mm, Ruger")
    m77v_762_mm_ruger = EnumValue(35, "M77V 7.62-mm, Ruger")
    s_16_762_x_36_mm_grendel = EnumValue(36, "S-16 7.62 x 36-mm, Grendel")
    sar_8_762_mm = EnumValue(37, "SAR-8 7.62-mm")
    sar_4800_762_mm = EnumValue(38, "SAR-4800 7.62-mm")
    assault_carbine_m16k_lafrance = EnumValue(39, "Assault carbine M16K, LaFrance")
    m1_30_2 = EnumValue(40, "M1 .30")
    m4_model_720_556_mm_colt = EnumValue(41, "M4 (Model 720) 5.56-mm, Colt")
    m_900_9_mm_calico = EnumValue(42, "M-900 9-mm, Calico")
    ac_556f_556_mm_ruger = EnumValue(43, "AC-556F 5.56-mm, Ruger")
    m3_45 = EnumValue(44, "M3 .45")
    m11_cobray = EnumValue(45, "M11, Cobray")
    m951_9_mm_calico = EnumValue(46, "M951 9-mm, Calico")
    mp5_10_10_mm = EnumValue(47, "MP5/10 10-mm")
    _9_mm_colt = EnumValue(48, "9-mm, Colt")
    ingram = EnumValue(49, "Ingram")
    externally_powered_epg_762_mm_ares = EnumValue(50, "Externally powered (EPG) 7.62-mm, Ares")
    gecal_50 = EnumValue(51, "GECAL 50")
    general_purpose_m60_762_mm = EnumValue(52, "General purpose M60 7.62-mm")
    heavy_m2hb_qcb_50_ramo = EnumValue(53, "Heavy M2HB-QCB .50, RAMO")
    light_assault_m60e3_enhanced_762_mm = EnumValue(54, "Light assault M60E3 (Enhanced) 7.62-mm")
    light_m16a2_556_mm_colt = EnumValue(55, "Light M16A2 5.56-mm, Colt")
    light_556_mm_ares = EnumValue(56, "Light 5.56-mm, Ares")
    lightweight_m2_50_ramo = EnumValue(57, "Lightweight M2 .50, RAMO")
    lightweight_assault_m60e3_762_mm = EnumValue(58, "Lightweight assault M60E3 7.62-mm")
    minigun_m134_762_mm_general_electric = EnumValue(59, "Minigun M134 7.62-mm, General Electric")
    mg_system_mk19_mod_3_40_mm = EnumValue(60, "MG system MK19 Mod 3, 40-mm")
    mg_system_or_kit_m2hb_qcb_50_saco_defense = EnumValue(61, "MG system (or kit) M2HB QCB .50, Saco Defense")
    m1919a4_30_cal_browning = EnumValue(62, "M1919A4 .30-cal, Browning")
    _50_cal_browning = EnumValue(63, ".50-cal, Browning")
    colored_smoke_hand_grenade_m18 = EnumValue(64, "Colored-smoke hand grenade M18")
    colored_smoke_grenades_federal_laboratories = EnumValue(65, "Colored-smoke grenades, Federal Laboratories")
    infrared_smoke_grenade_m76 = EnumValue(66, "Infrared smoke grenade M76")
    smoke_hand_grenade_an_m8_hc = EnumValue(67, "Smoke hand grenade AN-M8 HC")
    delay_fragmentation_hand_grenade_m61 = EnumValue(68, "Delay fragmentation hand grenade M61")
    delay_fragmentation_hand_grenade_m67 = EnumValue(69, "Delay fragmentation hand grenade M67")
    impact_fragmentation_hand_grenade_m57 = EnumValue(70, "Impact fragmentation hand grenade M57")
    impact_fragmentation_hand_grenade_m68 = EnumValue(71, "Impact fragmentation hand grenade M68")
    incendiary_hand_grenade_an_m14_th3 = EnumValue(72, "Incendiary hand grenade AN-M14 TH3")
    launcher_i_m203_40_mm = EnumValue(73, "Launcher I-M203 40-mm")
    launcher_m79_40_mm = EnumValue(74, "Launcher M79 40-mm")
    multiple_grenade_launcher_mm_1_40_mm = EnumValue(75, "Multiple grenade launcher MM-1 40-mm")
    multi_shot_portable_flame_weapon_m202a2_66_mm = EnumValue(76, "Multi-shot portable flame weapon M202A2 66-mm")
    portable_abc_m9_7 = EnumValue(77, "Portable ABC-M9-7")
    portable_m2a1_7 = EnumValue(78, "Portable M2A1-7")
    portable_m9e1_7 = EnumValue(79, "Portable M9E1-7")
    dragon_medium_anti_armor_missile_m47_fgm_77a = EnumValue(80, "Dragon medium Anti-Armor missile, M47, FGM-77A")
    javelin_aaws_m = EnumValue(81, "Javelin AAWS-M")
    light_anti_tank_weapon_m72_law_ii = EnumValue(82, "Light Anti-Tank Weapon M72 (LAW II)")
    redeye_fim_43_general_dynamics = EnumValue(83, "Redeye, FIM-43, General Dynamics")
    saber_dual_purpose_missile_system = EnumValue(84, "Saber dual-purpose missile system")
    stinger_fim_92_general_dynamics = EnumValue(85, "Stinger, FIM-92, General Dynamics")
    tow_heavy_anti_tank_weapon = EnumValue(86, "TOW heavy Anti-Tank weapon")
    bear_trap_ap_device_pancor = EnumValue(87, "Bear Trap AP device, Pancor")
    chain_gun_automatic_weapon_ex_34_762_mm = EnumValue(88, "Chain Gun automatic weapon EX-34 7.62-mm")
    close_assault_weapon_system_caws_aai = EnumValue(89, "Close Assault Weapon System (CAWS), AAI")
    caws_olin_heckler_and_koch = EnumValue(90, "CAWS, Olin/Heckler and Koch")
    crossfire_sam_model_88 = EnumValue(91, "Crossfire SAM Model 88")
    dragon_and_m16 = EnumValue(92, "Dragon and M16")
    firing_port_weapon_m231_556_mm_colt = EnumValue(93, "Firing port weapon M231, 5.56-mm, Colt")
    foxhole_digger_explosive_kit_exfoda = EnumValue(94, "Foxhole Digger Explosive Kit (EXFODA)")
    infantry_support_weapon_asp_30_rm_30_mm = EnumValue(95, "Infantry Support Weapon ASP-30 {RM} 30-mm")
    jackhammer_mk_3_a2_pancor = EnumValue(96, "Jackhammer Mk 3-A2, Pancor")
    light_anti_armor_weapon_m136_at4 = EnumValue(97, "Light Anti-Armor weapon M136 (AT4)")
    m26a2 = EnumValue(98, "M26A2")
    master_key_s = EnumValue(99, "Master Key S")
    minigun_556_mm = EnumValue(100, "Minigun 5.56-mm")
    multipurpose_individual_munition_mpim_marquardt = EnumValue(101, "Multipurpose Individual Munition (MPIM), Marquardt")
    multipurpose_weapon_at8 = EnumValue(102, "Multipurpose weapon AT8")
    recoilless_rifle_m40_m40a2_and_m40a4_106_mm = EnumValue(103, "Recoilless rifle M40, M40A2, and M40A4; 106-mm")
    recoilless_rifle_m67_90_mm = EnumValue(104, "Recoilless rifle M67, 90-mm")
    revolver_sp_101 = EnumValue(105, "Revolver, SP 101")
    revolver_super_redhawk_44_magnum_ruger = EnumValue(106, "Revolver, Super Redhawk .44 magnum, Ruger")
    raw_rocket_140_mm_brunswick = EnumValue(107, "RAW rocket, 140-mm, Brunswick")
    rifle_launcher_anti_armor_munition_raam_olin = EnumValue(108, "Rifle-launcher Anti-Armor Munition (RAAM), Olin")
    rocket_launcher_m_20_35_in = EnumValue(109, "Rocket launcher M-20 3.5-in")
    rocket_launcher_enhanced_m72_e_series_heat_66_mm = EnumValue(110, "Rocket launcher, Enhanced M72 'E series' HEAT, 66-mm")
    selective_fire_weapon_ac_556_556_mm_ruger = EnumValue(111, "Selective fire weapon AC-556 5.56-mm, Ruger")
    selective_fire_weapon_ac_556f_556_mm_ruger = EnumValue(112, "Selective fire weapon AC-556F 5.56-mm, Ruger")
    shotgun_m870_mk_1_us_marine_corps_remington = EnumValue(113, "Shotgun M870 Mk 1 (U.S. Marine Corps), Remington")
    smaw_mk_193_83_mm_mcdonnell_douglas = EnumValue(114, "SMAW Mk 193, 83-mm, McDonnell-Douglas")
    smaw_d_disposable_smaw = EnumValue(115, "SMAW-D: Disposable SMAW")
    squad_automatic_weapon_saw_m249_556_mm = EnumValue(116, "Squad Automatic Weapon (SAW) M249 5.56-mm")
    tactical_support_weapon_50_12_50_cal_peregrine = EnumValue(117, "Tactical Support Weapon 50/12, .50-cal, Peregrine")
    telescoped_ammunition_revolver_gun_targ_50_cal_ares = EnumValue(118, "Telescoped Ammunition Revolver Gun (TARG) .50-cal, Ares")
    ultimate_over_under_combination_ciener = EnumValue(119, "Ultimate over-under combination, Ciener")
    m18a1_claymore_mine = EnumValue(120, "M18A1 Claymore mine")
    mortar_81_mm = EnumValue(121, "Mortar 81-mm")
    machinegun_m240_762mm = EnumValue(134, "Machinegun M240 7.62mm")
    default = assault_machine_pistol_kf_amp

    def get_marshaled_size(self):
        return 8
