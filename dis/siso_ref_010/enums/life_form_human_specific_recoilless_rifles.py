'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 521,
  * marshal size 8;
  * LifeFormHumanSpecificRecoillessRifles has 33 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificRecoillessRifles(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _84mm_m136_at_4_cs = EnumValue(15, "84mm M136 AT-4 CS")
    _57mm_m18_rr = EnumValue(20, "57mm M18 RR")
    _75mm_m20_rr = EnumValue(21, "75mm M20 RR")
    _120mm_m_28_davy_crockett = EnumValue(22, "120mm M-28 Davy Crockett")
    _155mm_m_29_davy_crockett = EnumValue(23, "155mm M-29 Davy Crockett")
    _106mm_m40_recoilless_rifle = EnumValue(24, "106mm M40 Recoilless Rifle")
    _82mm_m60_rr = EnumValue(25, "82mm M60 RR")
    _90mm_m67_rr = EnumValue(26, "90mm M67 RR")
    _84mm_m1_carl_gustav = EnumValue(30, "84mm M1 Carl Gustav")
    _84mm_m2_carl_gustav = EnumValue(31, "84mm M2 Carl Gustav")
    _84mm_m3_carl_gustav = EnumValue(32, "84mm M3 Carl Gustav")
    _84mm_m4_carl_gustav = EnumValue(33, "84mm M4 Carl Gustav")
    _74mm_pansarskott_m_68_miniman = EnumValue(35, "74mm Pansarskott m/68 Miniman")
    _84mm_alac = EnumValue(40, "84mm ALAC")
    _82mm_b_10_rr = EnumValue(45, "82mm B-10 RR")
    _107mm_b_11_rr = EnumValue(46, "107mm B-11 RR")
    _80mm_breda_folgore = EnumValue(50, "80mm Breda Folgore")
    _120mm_bat_rr = EnumValue(55, "120mm BAT RR")
    _73mm_spg_9_kopye = EnumValue(60, "73mm SPG-9 Kopye")
    _88mm_rcl_345in = EnumValue(65, "88mm RCL 3.45in")
    _90mm_pvpj_110 = EnumValue(70, "90mm Pvpj 110")
    _50mm_jagdfaust = EnumValue(75, "50mm Jagdfaust")
    _30mm_rheinmetall_rmk30 = EnumValue(80, "30mm Rheinmetall RMK30")
    _90mm_matador_mp_rgw_90 = EnumValue(85, "90mm Matador-MP (RGW-90)")
    _90mm_matador_wb = EnumValue(86, "90mm Matador-WB")
    _90mm_matador_as = EnumValue(87, "90mm Matador-AS")
    _60mm_rgw_60 = EnumValue(88, "60mm RGW-60")
    _88mm_55_s_55_raikka = EnumValue(90, "88mm 55 S 55 Raikka")
    _95mm_95_s_58_61 = EnumValue(91, "95mm 95 S 58-61")
    _73mm_lg40 = EnumValue(95, "73mm LG40")
    _105mm_lg40 = EnumValue(96, "105mm LG40")
    _105mm_lg42 = EnumValue(97, "105mm LG42")
    default = other

    def get_marshaled_size(self):
        return 8
