'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_object_general_damage import AppearanceObjectGeneralDamage
from .appearance_object_general_predistributed import AppearanceObjectGeneralPredistributed
from .appearance_entityor_object_state import AppearanceEntityorObjectState
from .appearance_object_general_iedpresent import AppearanceObjectGeneralIEDPresent

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 229, marshal size 16,
  * ObjectStateAppearanceGeneral
  */

"""

class ObjectStateAppearanceGeneralBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, length=8) 8-bit unsigned integer indicating the percent completion of the object (0..100),  use {@link UInt8} values for this field
        ("_percentComplete", UByte, 8),

        # (bit position 8, length=2) Describes the damaged appearance,  use {@link AppearanceObjectGeneralDamage} values for this field
        ("_damage", UByte, 2),

        # (bit position 10, boolean) Describes whether the object was predistributed,  use {@link AppearanceObjectGeneralPredistributed} values for this field
        ("_predistributed", UByte, 1),

        # (bit position 11, boolean) Describes the state of the object,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 12, boolean) Describes whether or not there is a smoke plume,  use {@link UInt8} values for this field
        ("_isSmoking", UByte, 1),

        # (bit position 13, boolean) Describes whether the object is burning and flames are visible,  use {@link UInt8} values for this field
        ("_isFlaming", UByte, 1),

        # (bit position 14, length=2) Describes whether the object has or contains an IED,  use {@link AppearanceObjectGeneralIEDPresent} values for this field
        ("_iEDPresent", UByte, 2)
    ]

class ObjectStateAppearanceGeneral(ctypes.Union):
    _fields_ = [
        ("capabilities", ObjectStateAppearanceGeneralBitField),
        ("asbyte", UInt8)
    ]

    def set_percentComplete(self, value : UInt8):
        self.capabilities._percentComplete = int(value)
    def get_percentComplete(self) -> UInt8:
        return self.capabilities._percentComplete
    PercentComplete = property(get_percentComplete, set_percentComplete)

    def set_damage(self, value : AppearanceObjectGeneralDamage):
        self.capabilities._damage = int(value)
    def get_damage(self) -> AppearanceObjectGeneralDamage:
        return AppearanceObjectGeneralDamage.get_enum(self._damage)
    Damage = property(get_damage, set_damage)

    def set_predistributed(self, value : AppearanceObjectGeneralPredistributed):
        self.capabilities._predistributed = int(value)
    def get_predistributed(self) -> AppearanceObjectGeneralPredistributed:
        return AppearanceObjectGeneralPredistributed.get_enum(self._predistributed)
    Predistributed = property(get_predistributed, set_predistributed)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_isSmoking(self, value : UInt8):
        self.capabilities._isSmoking = int(value)
    def get_isSmoking(self) -> UInt8:
        return self.capabilities._isSmoking
    IsSmoking = property(get_isSmoking, set_isSmoking)

    def set_isFlaming(self, value : UInt8):
        self.capabilities._isFlaming = int(value)
    def get_isFlaming(self) -> UInt8:
        return self.capabilities._isFlaming
    IsFlaming = property(get_isFlaming, set_isFlaming)

    def set_iEDPresent(self, value : AppearanceObjectGeneralIEDPresent):
        self.capabilities._iEDPresent = int(value)
    def get_iEDPresent(self) -> AppearanceObjectGeneralIEDPresent:
        return AppearanceObjectGeneralIEDPresent.get_enum(self._iEDPresent)
    IEDPresent = property(get_iEDPresent, set_iEDPresent)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "PercentComplete : " +  str(self.PercentComplete) + "\n"
        outputStream += "Damage : " +  self.Damage.get_description + "\n"
        outputStream += "Predistributed : " +  self.Predistributed.get_description + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "IsSmoking : " +  str(self.IsSmoking) + "\n"
        outputStream += "IsFlaming : " +  str(self.IsFlaming) + "\n"
        outputStream += "IEDPresent : " +  self.IEDPresent.get_description + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 16 
