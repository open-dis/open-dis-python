'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 473,
  * marshal size 8;
  * LifeFormHumanSubcategoryEquipmentClass has 30 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSubcategoryEquipmentClass(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    none = EnumValue(0, "None")
    # XREF UID 514 - CLASS LifeFormHumanSpecificWeaponNonspecific 
    weapon_non_specific = EnumValue(1, "Weapon, Non-specific")
    # XREF UID 474 - CLASS LifeFormHumanSpecificAssaultRifles 
    assault_rifles = EnumValue(5, "Assault Rifles")
    # XREF UID 475 - CLASS LifeFormHumanSpecificHighPowerRifles 
    high_power_rifles = EnumValue(10, "High Power Rifles")
    # XREF UID 481 - CLASS LifeFormHumanSpecificSniper 
    sniper_rifles = EnumValue(15, "Sniper Rifles")
    # XREF UID 510 - CLASS LifeFormHumanSpecificAntiMaterielRifles 
    anti_materiel_rifle_amr = EnumValue(17, "Anti-Materiel Rifle (AMR)")
    # XREF UID 482 - CLASS LifeFormHumanSpecificSubMachineGun 
    sub_machine_guns = EnumValue(20, "Sub Machine Guns")
    # XREF UID 511 - CLASS LifeFormHumanSpecificShotGuns 
    shot_guns = EnumValue(25, "Shot Guns")
    # XREF UID 515 - CLASS LifeFormHumanSpecificGrenadeLaunchers 
    grenade_launchers = EnumValue(30, "Grenade Launchers")
    # XREF UID 516 - CLASS LifeFormHumanSpecificMachineGuns 
    machine_guns = EnumValue(35, "Machine Guns")
    # XREF UID 517 - CLASS LifeFormHumanSpecificGrenadeLaunchingMachineGun 
    grenade_launching_machine_gun = EnumValue(40, "Grenade Launching Machine Gun")
    # XREF UID 518 - CLASS LifeFormHumanSpecificAntiTankRockets 
    anti_tank_rockets = EnumValue(45, "Anti-Tank Rockets")
    # XREF UID 519 - CLASS LifeFormHumanSpecificAntiTankMissiles 
    anti_tank_missiles = EnumValue(50, "Anti-Tank Missiles")
    anti_tank_guns = EnumValue(55, "Anti-Tank Guns")
    # XREF UID 522 - CLASS LifeFormHumanSpecificFlameRockets 
    flame_rockets = EnumValue(60, "Flame Rockets")
    # XREF UID 523 - CLASS LifeFormHumanSpecificFlameThrowers 
    flame_throwers = EnumValue(65, "Flame Throwers")
    # XREF UID 528 - CLASS LifeFormHumanSpecificRocketLaunchers 
    rocket_launchers = EnumValue(70, "Rocket Launchers")
    # XREF UID 512 - CLASS LifeFormHumanSpecificMortars 
    mortars = EnumValue(75, "Mortars")
    # XREF UID 513 - CLASS LifeFormHumanSpecificHandGuns 
    hand_guns = EnumValue(80, "Hand Guns")
    # XREF UID 520 - CLASS LifeFormHumanSpecificManPortableAirDefenseSystem 
    man_portable_air_defense_system_manpads = EnumValue(85, "Man-Portable Air Defense System (MANPADS)")
    # XREF UID 521 - CLASS LifeFormHumanSpecificRecoillessRifles 
    recoilless_rifles = EnumValue(90, "Recoilless Rifles")
    # XREF UID 524 - CLASS LifeFormHumanSpecificDroneGuns 
    drone_guns = EnumValue(95, "Drone Guns")
    # XREF UID 529 - CLASS LifeFormHumanSpecificEquipmentNonspecific 
    equipment_non_specific = EnumValue(150, "Equipment, Non-specific")
    sensors = EnumValue(151, "Sensors")
    # XREF UID 505 - CLASS LifeFormHumanSpecificEquipmentClass 
    signal_sensor = EnumValue(152, "Signal Sensor")
    # XREF UID 527 - CLASS LifeFormHumanSpecificLasersClass 
    lasers = EnumValue(153, "Lasers")
    # XREF UID 531 - CLASS LifeFormHumanSpecificAnimalCompanions 
    animal_companion = EnumValue(160, "Animal Companion")
    # XREF UID 526 - CLASS LifeFormHumanSpecificPersonalElectronicsClass 
    personal_electronics = EnumValue(171, "Personal Electronics")
    # XREF UID 525 - CLASS LifeFormHumanSpecificLogisticsEQClass 
    logistics_equipment = EnumValue(172, "Logistics Equipment")
    # XREF UID 530 - CLASS LifeFormHumanSpecificMedicalEquipment 
    medical_equipment = EnumValue(173, "Medical Equipment")
    default = none

    def get_marshaled_size(self):
        return 8
