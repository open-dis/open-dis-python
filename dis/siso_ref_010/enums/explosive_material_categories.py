'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 310,
  * marshal size 16;
  * ExplosiveMaterialCategories has 45 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class ExplosiveMaterialCategories(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    no_statement = EnumValue(0, "No Statement")
    avgas_aviation_gas = EnumValue(10, "AVGAS (Aviation Gas)")
    jet_fuel_unspecified = EnumValue(11, "Jet Fuel (Unspecified)")
    jp_4_f_40_jet_b = EnumValue(12, "JP-4 (F-40/JET B)")
    jp_5_f_44_jet_a = EnumValue(13, "JP-5 (F-44/JET A)")
    jp_7 = EnumValue(14, "JP-7")
    jp_8_f_34_jet_a_1 = EnumValue(15, "JP-8 (F-34/JET A-1)")
    jp_10_missile_fuel = EnumValue(16, "JP-10 Missile Fuel")
    jpts = EnumValue(17, "JPTS")
    jet_a = EnumValue(18, "Jet A")
    jet_a_1 = EnumValue(19, "Jet A-1")
    jet_b = EnumValue(20, "Jet B")
    jet_biofuel = EnumValue(21, "Jet Biofuel")
    gasoline_petrol_unspecified_octane = EnumValue(151, "Gasoline/Petrol (Unspecified Octane)")
    diesel_fuel_unspecified_grade = EnumValue(152, "Diesel Fuel (Unspecified Grade)")
    ethanol = EnumValue(153, "Ethanol")
    e85_ethanol = EnumValue(154, "E85 Ethanol")
    fuel_oil = EnumValue(155, "Fuel Oil")
    kerosene = EnumValue(156, "Kerosene")
    crude_oil_unspecified = EnumValue(157, "Crude Oil (Unspecified)")
    light_crude_oil = EnumValue(158, "Light Crude Oil")
    liquid_petroleum_gas_lpg = EnumValue(159, "Liquid Petroleum Gas (LPG)")
    rp_1_rocket_fuel = EnumValue(160, "RP-1 Rocket Fuel")
    lh_2_rocket_fuel = EnumValue(161, "LH-2 Rocket Fuel")
    lox_rocket_fuel = EnumValue(162, "LOX Rocket Fuel")
    alcohol = EnumValue(164, "Alcohol")
    hydrogen_liquid = EnumValue(166, "Hydrogen (Liquid)")
    nitroglycerin_ng = EnumValue(301, "Nitroglycerin (NG)")
    anfo = EnumValue(302, "ANFO")
    dynamite = EnumValue(451, "Dynamite")
    tnt = EnumValue(452, "TNT")
    rdx = EnumValue(453, "RDX")
    petn = EnumValue(454, "PETN")
    hmx = EnumValue(455, "HMX")
    c_4 = EnumValue(456, "C-4")
    composition_c_4 = EnumValue(457, "Composition C-4")
    natural_gas_ng = EnumValue(601, "Natural Gas (NG)")
    butane = EnumValue(602, "Butane")
    propane = EnumValue(603, "Propane")
    helium = EnumValue(604, "Helium")
    hydrogen_gaseous = EnumValue(605, "Hydrogen (Gaseous)")
    dust_unspecified_type = EnumValue(801, "Dust (Unspecified Type)")
    grain_dust = EnumValue(802, "Grain Dust")
    flour_dust = EnumValue(803, "Flour Dust")
    sugar_dust = EnumValue(804, "Sugar Dust")
    default = no_statement

    def get_marshaled_size(self):
        return 16
