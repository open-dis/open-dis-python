'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 17,
  * marshal size 8;
  * LifeFormsSubcategoryCISWeapons has 52 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormsSubcategoryCISWeapons(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    automatic_aps_9_mm_stechkin = EnumValue(201, "Automatic (APS) 9-mm, Stechkin")
    psm_545_mm = EnumValue(202, "PSM 5.45-mm")
    self_loading_pm_9_mm_makarov = EnumValue(203, "Self-loading (PM) 9-mm, Makarov")
    tt_33_762_mm_tokarev = EnumValue(204, "TT-33 7.62-mm, Tokarev")
    assault_rifle_ak_and_akm_762_mm = EnumValue(205, "Assault rifle AK and AKM, 7.62-mm")
    assault_rifle_ak_74_and_aks_74_545_mm = EnumValue(206, "Assault rifle AK-74 and AKS-74, 5.45-mm")
    self_loading_rifle_sks_762_mm_simonov = EnumValue(207, "Self-loading rifle (SKS), 7.62-mm, Simonov")
    sniper_rifle_svd_762_mm_dragunov = EnumValue(208, "Sniper rifle SVD 7.62-mm, Dragunov")
    aksu_74_545_mm = EnumValue(209, "AKSU-74 5.45-mm")
    pps_43_762_mm = EnumValue(210, "PPS-43 7.62-mm")
    ppsh_41_762_mm = EnumValue(211, "PPSh-41 7.62-mm")
    general_purpose_pk_762_mm = EnumValue(212, "General purpose PK 7.62-mm")
    heavy_dshk_38_and_model_38_46_127_mm_degtyarev = EnumValue(213, "Heavy DShK-38 and Model 38/46 12.7-mm, Degtyarev")
    heavy_nsv_127_mm = EnumValue(214, "Heavy NSV 12.7-mm")
    light_rpd_762_mm = EnumValue(215, "Light RPD 7.62-mm")
    light_rpk_762_mm = EnumValue(216, "Light RPK 7.62-mm")
    light_rpk_74_545_mm = EnumValue(217, "Light RPK-74 5.45-mm")
    hand_grenade_m75 = EnumValue(218, "Hand grenade M75")
    hand_grenade_rgd_5 = EnumValue(219, "Hand grenade RGD-5")
    ap_hand_grenade_f1 = EnumValue(220, "AP hand grenade F1")
    at_hand_grenade_rkg_3 = EnumValue(221, "AT hand grenade RKG-3")
    at_hand_grenade_rkg_3m = EnumValue(222, "AT hand grenade RKG-3M")
    at_hand_grenade_rkg_3t = EnumValue(223, "AT hand grenade RKG-3T")
    fragmentation_hand_grenade_rgn = EnumValue(224, "Fragmentation hand grenade RGN")
    fragmentation_hand_grenade_rgo = EnumValue(225, "Fragmentation hand grenade RGO")
    smoke_hand_grenade_rdg_1 = EnumValue(226, "Smoke hand grenade RDG-1")
    plamya_launcher_30_mm_ags_17 = EnumValue(227, "Plamya launcher, 30-mm AGS-17")
    rifle_mounted_launcher_bg_15_40_mm = EnumValue(228, "Rifle-mounted launcher, BG-15 40-mm")
    lpo_50 = EnumValue(229, "LPO-50")
    roks_3 = EnumValue(230, "ROKS-3")
    cart_mounted_tpo_50 = EnumValue(231, "Cart-mounted TPO-50")
    gimlet_sa_16 = EnumValue(232, "Gimlet SA-16")
    grail_sa_7 = EnumValue(233, "Grail SA-7")
    gremlin_sa_14 = EnumValue(234, "Gremlin SA-14")
    sagger_at_3_mclos = EnumValue(235, "Sagger AT-3 (MCLOS)")
    saxhorn_at_7 = EnumValue(236, "Saxhorn AT-7")
    spigot_a_b_at_14 = EnumValue(237, "Spigot A/B AT-14")
    sa_18 = EnumValue(238, "SA-18")
    sa_19 = EnumValue(239, "SA-19")
    grad_1p_manportable_tripod_rocket_launcher_122_mm_for_spesnatz_and_other_specialists_aka_9p132 = EnumValue(240, "Grad-1P manportable tripod rocket launcher, 122-mm (for Spesnatz and other specialists; aka 9P132)")
    light_anti_armor_weapon_rpg_18 = EnumValue(241, "Light Anti-Armor weapon RPG-18")
    light_anti_tank_weapon_rpg_22 = EnumValue(242, "Light Anti-Tank weapon RPG-22")
    mg_amp_rpg = EnumValue(243, "MG &amp; RPG")
    portable_rocket_launcher_rpg_16 = EnumValue(244, "Portable rocket launcher RPG-16")
    recoilless_gun_73_mm_spg_9 = EnumValue(245, "Recoilless gun 73-mm SPG-9")
    vat_rocket_launcher_rpg_7 = EnumValue(246, "VAT rocket launcher RPG-7")
    mon_50_anti_personnel_mine = EnumValue(248, "Mon-50 Anti-Personnel mine")
    rpg_29_vampir = EnumValue(249, "RPG-29 Vampir")
    laser_designator = EnumValue(250, "Laser Designator")
    at_4_spigot = EnumValue(251, "AT-4 Spigot")
    sa_24_igla_s = EnumValue(252, "SA-24 Igla-S")
    type_69_rpg = EnumValue(253, "Type 69 RPG")
    default = automatic_aps_9_mm_stechkin

    def get_marshaled_size(self):
        return 8
