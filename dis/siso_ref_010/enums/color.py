'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 463, marshal size 8;
  * Color has 160 enumerations total.
  * The color values 1 to 15 are defined in the HTML 3.0 specification; color values 20 to 159 are defined in the SVG 1.0 specification
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class Color(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    not_specified = EnumValue(0, "Not Specified")
    white_vga = EnumValue(1, "White VGA")
    red_vga = EnumValue(2, "Red VGA")
    yellow_vga = EnumValue(3, "Yellow VGA")
    lime_vga = EnumValue(4, "Lime VGA")
    cyan_vga = EnumValue(5, "Cyan VGA")
    blue_vga = EnumValue(6, "Blue VGA")
    magenta_vga = EnumValue(7, "Magenta VGA")
    grey_vga = EnumValue(8, "Grey VGA")
    silver_vga = EnumValue(9, "Silver VGA")
    maroon_vga = EnumValue(10, "Maroon VGA")
    olive_vga = EnumValue(11, "Olive VGA")
    green_vga = EnumValue(12, "Green VGA")
    teal_vga = EnumValue(13, "Teal VGA")
    navy_vga = EnumValue(14, "Navy VGA")
    purple_vga = EnumValue(15, "Purple VGA")
    reserved = EnumValue(16, "Reserved")
    reserved_2 = EnumValue(17, "Reserved")
    reserved_3 = EnumValue(18, "Reserved")
    reserved_4 = EnumValue(19, "Reserved")
    black = EnumValue(20, "Black")
    navy = EnumValue(21, "Navy")
    dark_blue = EnumValue(22, "Dark Blue")
    medium_blue = EnumValue(23, "Medium Blue")
    blue = EnumValue(24, "Blue")
    dark_green = EnumValue(25, "Dark Green")
    green = EnumValue(26, "Green")
    teal = EnumValue(27, "Teal")
    dark_cyan = EnumValue(28, "Dark Cyan")
    deep_sky_blue = EnumValue(29, "Deep Sky Blue")
    dark_turquoise = EnumValue(30, "Dark Turquoise")
    medium_spring_green = EnumValue(31, "Medium Spring Green")
    lime = EnumValue(32, "Lime")
    spring_green = EnumValue(33, "Spring Green")
    cyan = EnumValue(34, "Cyan")
    midnight_blue = EnumValue(35, "Midnight Blue")
    dodger_blue = EnumValue(36, "Dodger Blue")
    light_sea_green = EnumValue(37, "Light Sea Green")
    forest_green = EnumValue(38, "Forest Green")
    sea_green = EnumValue(39, "Sea Green")
    dark_slate_gray = EnumValue(40, "Dark Slate Gray")
    lime_green = EnumValue(41, "Lime Green")
    medium_sea_green = EnumValue(42, "Medium Sea Green")
    turquoise = EnumValue(43, "Turquoise")
    royal_blue = EnumValue(44, "Royal Blue")
    steel_blue = EnumValue(45, "Steel Blue")
    dark_slate_blue = EnumValue(46, "Dark Slate Blue")
    medium_turquoise = EnumValue(47, "Medium Turquoise")
    indigo = EnumValue(48, "Indigo")
    dark_olive_green = EnumValue(49, "Dark Olive Green")
    cadet_blue = EnumValue(50, "Cadet Blue")
    cornflower_blue = EnumValue(51, "Cornflower Blue")
    medium_aquamarine = EnumValue(52, "Medium Aquamarine")
    dim_gray = EnumValue(53, "Dim Gray")
    slate_blue = EnumValue(54, "Slate Blue")
    olive_drab = EnumValue(55, "Olive Drab")
    slate_gray = EnumValue(56, "Slate Gray")
    light_slate_gray = EnumValue(57, "Light Slate Gray")
    medium_slate_blue = EnumValue(58, "Medium Slate Blue")
    lawn_green = EnumValue(59, "Lawn Green")
    chartreuse = EnumValue(60, "Chartreuse")
    aquamarine = EnumValue(61, "Aquamarine")
    maroon = EnumValue(62, "Maroon")
    purple = EnumValue(63, "Purple")
    olive = EnumValue(64, "Olive")
    gray = EnumValue(65, "Gray")
    grey = EnumValue(66, "Grey")
    sky_blue = EnumValue(67, "Sky Blue")
    light_sky_blue = EnumValue(68, "Light Sky Blue")
    blue_violet = EnumValue(69, "Blue Violet")
    dark_red = EnumValue(70, "Dark Red")
    dark_magenta = EnumValue(71, "Dark Magenta")
    saddle_brown = EnumValue(72, "Saddle Brown")
    dark_sea_green = EnumValue(73, "Dark Sea Green")
    light_green = EnumValue(74, "Light Green")
    medium_purple = EnumValue(75, "Medium Purple")
    dark_violet = EnumValue(76, "Dark Violet")
    pale_green = EnumValue(77, "Pale Green")
    dark_orchid = EnumValue(78, "Dark Orchid")
    yellow_green = EnumValue(79, "Yellow Green")
    sienna = EnumValue(80, "Sienna")
    brown = EnumValue(81, "Brown")
    dark_gray = EnumValue(82, "Dark Gray")
    light_blue = EnumValue(83, "Light Blue")
    green_yellow = EnumValue(84, "Green Yellow")
    pale_turquoise = EnumValue(85, "Pale Turquoise")
    light_steel_blue = EnumValue(86, "Light Steel Blue")
    powder_blue = EnumValue(87, "Powder Blue")
    fire_brick = EnumValue(88, "Fire Brick")
    dark_golden_rod = EnumValue(89, "Dark Golden Rod")
    medium_orchid = EnumValue(90, "Medium Orchid")
    rosy_brown = EnumValue(91, "Rosy Brown")
    dark_khaki = EnumValue(92, "Dark Khaki")
    silver = EnumValue(93, "Silver")
    medium_violet_red = EnumValue(94, "Medium Violet Red")
    indian_red = EnumValue(95, "Indian Red")
    peru = EnumValue(96, "Peru")
    chocolate = EnumValue(97, "Chocolate")
    tan = EnumValue(98, "Tan")
    light_gray = EnumValue(99, "Light Gray")
    pale_violet_red = EnumValue(100, "Pale Violet Red")
    thistle = EnumValue(101, "Thistle")
    orchid = EnumValue(102, "Orchid")
    golden_rod = EnumValue(103, "Golden Rod")
    crimson = EnumValue(104, "Crimson")
    gainsboro = EnumValue(105, "Gainsboro")
    plum = EnumValue(106, "Plum")
    burly_wood = EnumValue(107, "Burly Wood")
    light_cyan = EnumValue(108, "Light Cyan")
    lavender = EnumValue(109, "Lavender")
    dark_salmon = EnumValue(110, "Dark Salmon")
    violet = EnumValue(111, "Violet")
    pale_golden_rod = EnumValue(112, "Pale Golden Rod")
    light_coral = EnumValue(113, "Light Coral")
    khaki = EnumValue(114, "Khaki")
    alice_blue = EnumValue(115, "Alice Blue")
    honey_dew = EnumValue(116, "Honey Dew")
    azure = EnumValue(117, "Azure")
    sandy_brown = EnumValue(118, "Sandy Brown")
    wheat = EnumValue(119, "Wheat")
    beige = EnumValue(120, "Beige")
    white_smoke = EnumValue(121, "White Smoke")
    mint_cream = EnumValue(122, "Mint Cream")
    ghost_white = EnumValue(123, "Ghost White")
    salmon = EnumValue(124, "Salmon")
    antique_white = EnumValue(125, "Antique White")
    linen = EnumValue(126, "Linen")
    light_golden_rod_yellow = EnumValue(127, "Light Golden Rod Yellow")
    old_lace = EnumValue(128, "Old Lace")
    red = EnumValue(129, "Red")
    fuchsia = EnumValue(130, "Fuchsia")
    magenta = EnumValue(131, "Magenta")
    deep_pink = EnumValue(132, "Deep Pink")
    orange_red = EnumValue(133, "Orange Red")
    tomato = EnumValue(134, "Tomato")
    hot_pink = EnumValue(135, "Hot Pink")
    coral = EnumValue(136, "Coral")
    dark_orange = EnumValue(137, "Dark Orange")
    light_salmon = EnumValue(138, "Light Salmon")
    orange = EnumValue(139, "Orange")
    light_pink = EnumValue(140, "Light Pink")
    pink = EnumValue(141, "Pink")
    gold = EnumValue(142, "Gold")
    peach_puff = EnumValue(143, "Peach Puff")
    navajo_white = EnumValue(144, "Navajo White")
    moccasin = EnumValue(145, "Moccasin")
    bisque = EnumValue(146, "Bisque")
    misty_rose = EnumValue(147, "Misty Rose")
    blanched_almond = EnumValue(148, "Blanched Almond")
    papaya_whip = EnumValue(149, "Papaya Whip")
    lavender_blush = EnumValue(150, "Lavender Blush")
    sea_shell = EnumValue(151, "Sea Shell")
    cornsilk = EnumValue(152, "Cornsilk")
    lemon_chiffon = EnumValue(153, "Lemon Chiffon")
    floral_white = EnumValue(154, "Floral White")
    snow = EnumValue(155, "Snow")
    yellow = EnumValue(156, "Yellow")
    light_yellow = EnumValue(157, "Light Yellow")
    ivory = EnumValue(158, "Ivory")
    white = EnumValue(159, "White")
    default = not_specified

    def get_marshaled_size(self):
        return 8
