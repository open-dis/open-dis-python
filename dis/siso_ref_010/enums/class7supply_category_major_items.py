'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 607,
  * marshal size 8;
  * Class7SupplyCategoryMajorItems has 25 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class Class7SupplyCategoryMajorItems(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(1, "Other")
    a_air_not_used_as_described_in_air_domain = EnumValue(2, "A - Air (Not used, as described in Air Domain)")
    b_ground_support_materiel = EnumValue(3, "B - Ground Support Materiel")
    d_admin_vehicles_not_used_as_described_in_land_domain = EnumValue(4, "D - Admin Vehicles (Not used, as described in Land Domain)")
    g_electronics = EnumValue(5, "G - Electronics")
    j_racks_adaptors_pylons = EnumValue(6, "J - Racks, Adaptors, Pylons")
    k_tactical_vehicles_not_used_as_described_in_land_domain = EnumValue(7, "K - Tactical Vehicles (Not used, as described in Land Domain)")
    l_missiles_not_used_as_described_in_munition_domain = EnumValue(8, "L - Missiles (Not used, as described in Munition Domain)")
    m_weapons = EnumValue(9, "M - Weapons")
    n_special_weapons = EnumValue(10, "N - Special Weapons")
    x_aircraft_engines = EnumValue(11, "X - Aircraft Engines")
    drop_tank = EnumValue(20, "Drop Tank")
    conformal_fuel_tank = EnumValue(21, "Conformal Fuel Tank")
    luggage_pod = EnumValue(22, "Luggage Pod")
    ecm_pod = EnumValue(23, "ECM Pod")
    para_drogue = EnumValue(24, "Para-Drogue")
    targeting_pod = EnumValue(25, "Targeting Pod")
    fairing = EnumValue(26, "Fairing")
    air_refuelling_pod = EnumValue(27, "Air Refuelling Pod")
    heavy_airdrop = EnumValue(28, "Heavy Airdrop")
    container_delivery_system_cds_airdrop = EnumValue(29, "Container Delivery System (CDS) Airdrop")
    rocket_pod_launcher = EnumValue(30, "Rocket Pod/Launcher")
    tactical_pod = EnumValue(31, "Tactical Pod")
    recce_pod = EnumValue(32, "RECCE pod")
    flir_pod = EnumValue(33, "FLIR pod")
    default = other

    def get_marshaled_size(self):
        return 8
