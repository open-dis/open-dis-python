'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 100, marshal size 8;
  * SubcategoriesforLandCategory200Mammal has 29 enumerations total.
  * 1-199 Domesticated animals, 200-255 Wild animals
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class SubcategoriesforLandCategory200Mammal(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    small_dog = EnumValue(1, "Small Dog")
    chihuahua = EnumValue(2, "Chihuahua")
    medium_dog = EnumValue(10, "Medium Dog")
    australian_cattle_dog = EnumValue(11, "Australian Cattle Dog")
    large_dog = EnumValue(20, "Large Dog")
    german_shepherd = EnumValue(21, "German Shepherd")
    very_large_dog = EnumValue(30, "Very Large Dog")
    giant_turkish_kangal = EnumValue(31, "Giant Turkish Kangal")
    sheep = EnumValue(40, "Sheep")
    goat = EnumValue(41, "Goat")
    pig = EnumValue(50, "Pig")
    cow = EnumValue(60, "Cow")
    ox = EnumValue(61, "Ox")
    ox_with_cart = EnumValue(70, "Ox With Cart")
    horse = EnumValue(80, "Horse")
    donkey = EnumValue(81, "Donkey")
    mule = EnumValue(82, "Mule")
    horse_with_rider = EnumValue(90, "Horse With Rider")
    horse_with_cargo = EnumValue(91, "Horse With Cargo")
    donkey_with_rider = EnumValue(92, "Donkey With Rider")
    donkey_with_cargo = EnumValue(93, "Donkey With Cargo")
    mule_with_rider = EnumValue(94, "Mule With Rider")
    mule_with_cargo = EnumValue(95, "Mule With Cargo")
    camel = EnumValue(100, "Camel")
    dromedary_camel_one_hump = EnumValue(101, "Dromedary Camel (One Hump)")
    bactrian_camel_two_humps = EnumValue(102, "Bactrian Camel (Two Humps)")
    dromedary_camel_with_rider = EnumValue(110, "Dromedary Camel With Rider")
    dromedary_camel_with_cargo = EnumValue(111, "Dromedary Camel With Cargo")
    rat = EnumValue(200, "Rat")
    default = small_dog

    def get_marshaled_size(self):
        return 8
