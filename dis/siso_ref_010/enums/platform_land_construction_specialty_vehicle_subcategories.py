'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 434, marshal size 8;
  * PlatformLandConstructionSpecialtyVehicleSubcategories has 56 enumerations total.
  * Subcategories for Land Platform Category 87
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class PlatformLandConstructionSpecialtyVehicleSubcategories(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    tug = EnumValue(1, "Tug")
    forklift = EnumValue(2, "Forklift")
    loader = EnumValue(3, "Loader")
    loader_backhoe = EnumValue(4, "Loader, Backhoe")
    crane_tractor_mounted = EnumValue(5, "Crane, Tractor Mounted")
    crane_wheeled = EnumValue(6, "Crane, Wheeled")
    grader = EnumValue(7, "Grader")
    road_roller_other = EnumValue(8, "Road Roller, Other")
    road_roller_double_drum_smooth = EnumValue(9, "Road Roller, Double Drum, Smooth")
    road_roller_single_drum_smooth = EnumValue(10, "Road Roller, Single Drum, Smooth")
    road_roller_double_drum_sheeps = EnumValue(11, "Road Roller, Double Drum, Sheeps")
    road_roller_single_drum_sheeps = EnumValue(12, "Road Roller, Single Drum, Sheeps")
    road_roller_pneumatic_tired = EnumValue(13, "Road Roller, Pneumatic Tired")
    excavator_other = EnumValue(14, "Excavator, Other")
    excavator_dragline = EnumValue(15, "Excavator, Dragline")
    excavator_long_reach = EnumValue(16, "Excavator, Long Reach")
    excavator_mobile_tire = EnumValue(17, "Excavator, Mobile Tire")
    mini_excavator = EnumValue(18, "Mini Excavator")
    excavator_giant = EnumValue(19, "Excavator Giant")
    bulldozer_tractor_mounted = EnumValue(20, "Bulldozer, Tractor Mounted")
    bulldozer_tracked = EnumValue(21, "Bulldozer, Tracked")
    scraper = EnumValue(22, "Scraper")
    skid_steer = EnumValue(23, "Skid Steer")
    dump_truck_other = EnumValue(24, "Dump Truck, Other")
    dump_truck_articulated = EnumValue(25, "Dump Truck, Articulated")
    dump_truck_transfer = EnumValue(26, "Dump Truck, Transfer")
    dump_truck_super = EnumValue(27, "Dump Truck, Super")
    dump_truck_off_road = EnumValue(28, "Dump Truck, Off Road")
    paver = EnumValue(29, "Paver")
    drilling_machine = EnumValue(30, "Drilling Machine")
    concrete_mixer_other = EnumValue(31, "Concrete Mixer, Other")
    concrete_mixer_rear_discharge = EnumValue(32, "Concrete Mixer, Rear Discharge")
    concrete_mixer_front_discharge = EnumValue(33, "Concrete Mixer, Front Discharge")
    concrete_mixer_six_axle = EnumValue(34, "Concrete Mixer, Six Axle")
    concrete_mixer_long_reach_boom = EnumValue(35, "Concrete Mixer, Long Reach Boom")
    concrete_mixer_volumetric = EnumValue(36, "Concrete Mixer, Volumetric")
    trencher_chain = EnumValue(37, "Trencher, Chain")
    trencher_rockwheel = EnumValue(38, "Trencher, Rockwheel")
    snowcat = EnumValue(39, "Snowcat")
    crane_tracked = EnumValue(40, "Crane, Tracked")
    crane_shovel = EnumValue(41, "Crane, Shovel")
    sweeper_rotary = EnumValue(42, "Sweeper, Rotary")
    roller_vibratory_compactor = EnumValue(43, "Roller, Vibratory Compactor")
    fork_lift_truck = EnumValue(44, "Fork Lift, Truck")
    fork_lift_rought_terrain = EnumValue(45, "Fork Lift, Rought Terrain")
    transloader = EnumValue(46, "Transloader")
    truck_water_construction = EnumValue(47, "Truck, Water, Construction")
    truck_fuel_delivery = EnumValue(48, "Truck, Fuel Delivery")
    truck_sawmill = EnumValue(49, "Truck, Sawmill")
    truck_line_marking_construction = EnumValue(50, "Truck, Line Marking, Construction")
    tractor_industrial = EnumValue(51, "Tractor, Industrial")
    compactor_high_speed = EnumValue(52, "Compactor, High Speed")
    truck_drilling = EnumValue(53, "Truck, Drilling")
    truck_drilling_support = EnumValue(54, "Truck, Drilling Support")
    crane_construction = EnumValue(55, "Crane, Construction")
    default = other

    def get_marshaled_size(self):
        return 8
