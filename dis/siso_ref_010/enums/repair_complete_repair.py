'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 64,
  * marshal size 16;
  * RepairCompleteRepair has 84 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class RepairCompleteRepair(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    no_repairs_performed = EnumValue(0, "no repairs performed")
    all_requested_repairs_performed = EnumValue(1, "all requested repairs performed")
    motor_engine = EnumValue(10, "motor / engine")
    starter = EnumValue(20, "starter")
    alternator = EnumValue(30, "alternator")
    generator = EnumValue(40, "generator")
    battery = EnumValue(50, "battery")
    engine_coolant_leak = EnumValue(60, "engine-coolant leak")
    fuel_filter = EnumValue(70, "fuel filter")
    transmission_oil_leak = EnumValue(80, "transmission-oil leak")
    engine_oil_leak = EnumValue(90, "engine-oil leak")
    pumps = EnumValue(100, "pumps")
    filters = EnumValue(110, "filters")
    transmission = EnumValue(120, "transmission")
    brakes = EnumValue(130, "brakes")
    suspension_system = EnumValue(140, "suspension system")
    oil_filter = EnumValue(150, "oil filter")
    hull = EnumValue(1000, "hull")
    airframe = EnumValue(1010, "airframe")
    truck_body = EnumValue(1020, "truck body")
    tank_body = EnumValue(1030, "tank body")
    trailer_body = EnumValue(1040, "trailer body")
    turret = EnumValue(1050, "turret")
    propeller = EnumValue(1500, "propeller")
    filters_2 = EnumValue(1520, "filters")
    wheels = EnumValue(1540, "wheels")
    tire = EnumValue(1550, "tire")
    track = EnumValue(1560, "track")
    gun_elevation_drive = EnumValue(2000, "gun elevation drive")
    gun_stabilization_system = EnumValue(2010, "gun stabilization system")
    gunners_primary_sight_gps = EnumValue(2020, "gunner's primary sight (GPS)")
    commanders_extension_to_the_gps = EnumValue(2030, "commander's extension to the GPS")
    loading_mechanism = EnumValue(2040, "loading mechanism")
    gunners_auxiliary_sight = EnumValue(2050, "gunner's auxiliary sight")
    gunners_control_panel = EnumValue(2060, "gunner's control panel")
    gunners_control_assembly_handles = EnumValue(2070, "gunner's control assembly handle(s)")
    commanders_control_handles_assembly = EnumValue(2090, "commander's control handles/assembly")
    commanders_weapon_station = EnumValue(2100, "commander's weapon station")
    commanders_independent_thermal_viewer_citv = EnumValue(2110, "commander's independent thermal viewer (CITV)")
    general_weapons = EnumValue(2120, "general weapons")
    fuel_transfer_pump = EnumValue(4000, "fuel transfer pump")
    fuel_lines = EnumValue(4010, "fuel lines")
    gauges = EnumValue(4020, "gauges")
    general_fuel_system = EnumValue(4030, "general fuel system")
    electronic_warfare_systems = EnumValue(4500, "electronic warfare systems")
    detection_systems = EnumValue(4600, "detection systems")
    detection_systems_radio_frequency = EnumValue(4610, "detection systems, radio frequency")
    detection_systems_microwave = EnumValue(4620, "detection systems, microwave")
    detection_systems_infrared = EnumValue(4630, "detection systems, infrared")
    detection_systems_laser = EnumValue(4640, "detection systems, laser")
    range_finders = EnumValue(4700, "range finders")
    range_only_radar = EnumValue(4710, "range-only radar")
    laser_range_finder = EnumValue(4720, "laser range finder")
    electronic_systems = EnumValue(4800, "electronic systems")
    electronics_systems_radio_frequency = EnumValue(4810, "electronics systems, radio frequency")
    electronics_systems_microwave = EnumValue(4820, "electronics systems, microwave")
    electronics_systems_infrared = EnumValue(4830, "electronics systems, infrared")
    electronics_systems_laser = EnumValue(4840, "electronics systems, laser")
    radios = EnumValue(5000, "radios")
    communication_systems = EnumValue(5010, "communication systems")
    intercoms = EnumValue(5100, "intercoms")
    encoders = EnumValue(5200, "encoders")
    encryption_devices = EnumValue(5250, "encryption devices")
    decoders = EnumValue(5300, "decoders")
    decryption_devices = EnumValue(5350, "decryption devices")
    computers = EnumValue(5500, "computers")
    navigation_and_control_systems = EnumValue(6000, "navigation and control systems")
    fire_control_systems = EnumValue(6500, "fire control systems")
    air_supply = EnumValue(8000, "air supply")
    filters_3 = EnumValue(8010, "filters")
    water_supply = EnumValue(8020, "water supply")
    refrigeration_system = EnumValue(8030, "refrigeration system")
    chemical_biological_and_radiological_protection = EnumValue(8040, "chemical, biological, and radiological protection")
    water_wash_down_systems = EnumValue(8050, "water wash down systems")
    decontamination_systems = EnumValue(8060, "decontamination systems")
    water_supply_2 = EnumValue(9000, "water supply")
    cooling_system = EnumValue(9010, "cooling system")
    winches = EnumValue(9020, "winches")
    catapults = EnumValue(9030, "catapults")
    cranes = EnumValue(9040, "cranes")
    launchers = EnumValue(9050, "launchers")
    life_boats = EnumValue(10000, "life boats")
    landing_craft = EnumValue(10010, "landing craft")
    ejection_seats = EnumValue(10020, "ejection seats")
    default = no_repairs_performed

    def get_marshaled_size(self):
        return 16
