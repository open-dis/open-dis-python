'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 76,
  * marshal size 8;
  * EmitterSystemFunction has 82 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class EmitterSystemFunction(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    multi_function = EnumValue(1, "Multi-function")
    early_warning_surveillance = EnumValue(2, "Early Warning/Surveillance")
    height_finder = EnumValue(3, "Height Finder")
    fire_control = EnumValue(4, "Fire Control")
    acquisition_detection = EnumValue(5, "Acquisition/Detection")
    tracker = EnumValue(6, "Tracker")
    guidance_illumination = EnumValue(7, "Guidance/Illumination")
    firing_point_launch_point_location = EnumValue(8, "Firing point/launch point location")
    range_only = EnumValue(9, "Range-Only")
    radar_altimeter = EnumValue(10, "Radar Altimeter")
    imaging = EnumValue(11, "Imaging")
    motion_detection = EnumValue(12, "Motion Detection")
    navigation = EnumValue(13, "Navigation")
    weather_meteorological = EnumValue(14, "Weather / Meteorological")
    instrumentation = EnumValue(15, "Instrumentation")
    identification_classification_including_iff = EnumValue(16, "Identification/Classification (including IFF)")
    aaa_anti_aircraft_artillery_fire_control = EnumValue(17, "AAA (Anti-Aircraft Artillery) Fire Control")
    air_search_bomb = EnumValue(18, "Air Search/Bomb")
    air_intercept = EnumValue(19, "Air Intercept")
    altimeter = EnumValue(20, "Altimeter")
    air_mapping = EnumValue(21, "Air Mapping")
    air_traffic_control = EnumValue(22, "Air Traffic Control")
    beacon = EnumValue(23, "Beacon")
    battlefield_surveillance = EnumValue(24, "Battlefield Surveillance")
    ground_control_approach = EnumValue(25, "Ground Control Approach")
    ground_control_intercept = EnumValue(26, "Ground Control Intercept")
    coastal_surveillance = EnumValue(27, "Coastal Surveillance")
    decoy_mimic = EnumValue(28, "Decoy/Mimic")
    data_transmission = EnumValue(29, "Data Transmission")
    earth_surveillance = EnumValue(30, "Earth Surveillance")
    gun_lay_beacon = EnumValue(31, "Gun Lay Beacon")
    ground_mapping = EnumValue(32, "Ground Mapping")
    harbor_surveillance = EnumValue(33, "Harbor Surveillance")
    iff_identify_friend_or_foe = EnumValue(34, "IFF (Identify Friend or Foe)")
    ils_instrument_landing_system = EnumValue(35, "ILS (Instrument Landing System)")
    ionospheric_sound = EnumValue(36, "Ionospheric Sound")
    interrogator = EnumValue(37, "Interrogator")
    barrage_jamming = EnumValue(38, "Barrage Jamming")
    click_jamming = EnumValue(39, "Click Jamming")
    deceptive_jamming = EnumValue(40, "Deceptive Jamming")
    frequency_swept_jamming = EnumValue(41, "Frequency Swept Jamming")
    jammer = EnumValue(42, "Jammer")
    noise_jamming = EnumValue(43, "Noise Jamming")
    pulsed_jamming = EnumValue(44, "Pulsed Jamming")
    repeater_jamming = EnumValue(45, "Repeater Jamming")
    spot_noise_jamming = EnumValue(46, "Spot Noise Jamming")
    missile_acquisition = EnumValue(47, "Missile Acquisition")
    missile_downlink = EnumValue(48, "Missile Downlink")
    meteorological = EnumValue(49, "Meteorological")
    space = EnumValue(50, "Space")
    surface_search = EnumValue(51, "Surface Search")
    shell_tracking = EnumValue(52, "Shell Tracking")
    television = EnumValue(56, "Television")
    unknown = EnumValue(57, "Unknown")
    video_remoting = EnumValue(58, "Video Remoting")
    experimental_or_training = EnumValue(59, "Experimental or Training")
    missile_guidance = EnumValue(60, "Missile Guidance")
    missile_homing = EnumValue(61, "Missile Homing")
    missile_tracking = EnumValue(62, "Missile Tracking")
    jamming_noise = EnumValue(64, "Jamming, noise")
    jamming_deception = EnumValue(65, "Jamming, deception")
    decoy = EnumValue(66, "Decoy")
    navigation_distance_measuring_equipment = EnumValue(71, "Navigation/Distance Measuring Equipment")
    terrain_following = EnumValue(72, "Terrain Following")
    weather_avoidance = EnumValue(73, "Weather Avoidance")
    proximity_fuse = EnumValue(74, "Proximity Fuse")
    instrumentation_2 = EnumValue(75, "Instrumentation")
    radiosonde = EnumValue(76, "Radiosonde")
    sonobuoy = EnumValue(77, "Sonobuoy")
    bathythermal_sensor = EnumValue(78, "Bathythermal Sensor")
    towed_counter_measure = EnumValue(79, "Towed Counter Measure")
    dipping_sonar = EnumValue(80, "Dipping Sonar")
    towed_acoustic_sensor = EnumValue(81, "Towed Acoustic Sensor")
    weapon_non_lethal = EnumValue(96, "Weapon, non-lethal")
    weapon_lethal = EnumValue(97, "Weapon, lethal")
    test_equipment = EnumValue(98, "Test Equipment")
    acquisition_track = EnumValue(99, "Acquisition Track")
    track_guidance = EnumValue(100, "Track Guidance")
    guidance_illumination_track_acquisition = EnumValue(101, "Guidance Illumination Track Acquisition")
    search_acquisition = EnumValue(102, "Search Acquisition")
    dropsonde = EnumValue(103, "Dropsonde")
    default = other

    def get_marshaled_size(self):
        return 8
