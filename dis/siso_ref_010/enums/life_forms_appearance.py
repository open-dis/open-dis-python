'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_paint_scheme import AppearancePaintScheme
from .appearance_lifeform_health import AppearanceLifeformHealth
from .appearance_life_form_compliance_status import AppearanceLifeFormComplianceStatus
from .clothing_irsignature import ClothingIRSignature
from .appearance_life_form_posture import AppearanceLifeFormPosture
from .appearance_entityor_object_state import AppearanceEntityorObjectState
from .appearance_life_form_weapon_implement import AppearanceLifeFormWeaponImplement
from .appearance_life_form_weapon_implement import AppearanceLifeFormWeaponImplement
from .appearance_camouflage_type import AppearanceCamouflageType
from .appearance_concealed_position import AppearanceConcealedPosition
from .appearance_concealed_movement import AppearanceConcealedMovement

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 37, marshal size 32,
  * LifeFormsAppearance
  */

"""

class LifeFormsAppearanceBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, boolean) Describes the visual paint design,  use {@link AppearancePaintScheme} values for this field
        ("_paintScheme", UByte, 1),

        # (bit position 3, length=2) Describes the visual appearance of the severity of any injury,  use {@link AppearanceLifeformHealth} values for this field
        ("_health", UByte, 2),

        # (bit position 5, length=4) Describes the manner and degree to which the life form is complying,  use {@link AppearanceLifeFormComplianceStatus} values for this field
        ("_complianceStatus", UByte, 4),

        # (bit position 9, length=2) Describes the general nature of the IR Signature due to clothing or covering.,  use {@link ClothingIRSignature} values for this field
        ("_clothingIRSignature", UByte, 2),

        # (bit position 11, boolean) Describes whether signal smoke is being used or not,  use {@link UInt8} values for this field
        ("_signalSmokeinUse", UByte, 1),

        # (bit position 12, boolean) Describes whether flash lights are on or off,  use {@link UInt8} values for this field
        ("_flashLightsOn", UByte, 1),

        # (bit position 13, boolean) Describes whether a signal mirror is being used or not,  use {@link UInt8} values for this field
        ("_signalMirrorinUse", UByte, 1),

        # (bit position 14, boolean) Describes whether an IR strobe is on or off,  use {@link UInt8} values for this field
        ("_iRStrobeOn", UByte, 1),

        # (bit position 15, boolean) Describes whether an IR illuminator (flare) is on or off,  use {@link UInt8} values for this field
        ("_iRIlluminatorOn", UByte, 1),

        # (bit position 16, length=4) Describes the posture (position) of the life form,  use {@link AppearanceLifeFormPosture} values for this field
        ("_lifeFormPosture", UByte, 4),

        # (bit position 20, boolean) Describes whether the life form has a lit cigarette or not. The primary purpose is for IR signature generation, so it could be a cigar or other item.,  use {@link UInt8} values for this field
        ("_isSmokingCigarette", UByte, 1),

        # (bit position 21, boolean) Describes whether the entity is frozen and should not be dead reckoned,  use {@link UInt8} values for this field
        ("_isFrozen", UByte, 1),

        # (bit position 22, boolean) Describes whether or not the life form is mounted/hoisted on another platform, such as a troop transport or helicopter hoist,  use {@link UInt8} values for this field
        ("_mountedHoistedStatus", UByte, 1),

        # (bit position 23, boolean) Describes whether the entity is active or deactivated,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 24, length=2) Describes the position of the life form's primary weapon/implement,  use {@link AppearanceLifeFormWeaponImplement} values for this field
        ("_weaponImplement1", UByte, 2),

        # (bit position 26, length=2) Describes the position of the life form's secondary weapon/implement,  use {@link AppearanceLifeFormWeaponImplement} values for this field
        ("_weaponImplement2", UByte, 2),

        # (bit position 28, length=2) Describes the camouflage color,  use {@link AppearanceCamouflageType} values for this field
        ("_camouflageType", UByte, 2),

        # (bit position 30, boolean) Describes whether or not the life form is in a prepared concealed position,  use {@link AppearanceConcealedPosition} values for this field
        ("_concealedStationary", UByte, 1),

        # (bit position 31, boolean) Describes whether or not the life form uses concealment during movement,  use {@link AppearanceConcealedMovement} values for this field
        ("_concealedMovement", UByte, 1)
    ]

class LifeFormsAppearance(ctypes.Union):
    _fields_ = [
        ("capabilities", LifeFormsAppearanceBitField),
        ("asbyte", UInt8)
    ]

    def set_paintScheme(self, value : AppearancePaintScheme):
        self.capabilities._paintScheme = int(value)
    def get_paintScheme(self) -> AppearancePaintScheme:
        return AppearancePaintScheme.get_enum(self._paintScheme)
    PaintScheme = property(get_paintScheme, set_paintScheme)

    def set_health(self, value : AppearanceLifeformHealth):
        self.capabilities._health = int(value)
    def get_health(self) -> AppearanceLifeformHealth:
        return AppearanceLifeformHealth.get_enum(self._health)
    Health = property(get_health, set_health)

    def set_complianceStatus(self, value : AppearanceLifeFormComplianceStatus):
        self.capabilities._complianceStatus = int(value)
    def get_complianceStatus(self) -> AppearanceLifeFormComplianceStatus:
        return AppearanceLifeFormComplianceStatus.get_enum(self._complianceStatus)
    ComplianceStatus = property(get_complianceStatus, set_complianceStatus)

    def set_clothingIRSignature(self, value : ClothingIRSignature):
        self.capabilities._clothingIRSignature = int(value)
    def get_clothingIRSignature(self) -> ClothingIRSignature:
        return ClothingIRSignature.get_enum(self._clothingIRSignature)
    ClothingIRSignature = property(get_clothingIRSignature, set_clothingIRSignature)

    def set_signalSmokeinUse(self, value : UInt8):
        self.capabilities._signalSmokeinUse = int(value)
    def get_signalSmokeinUse(self) -> UInt8:
        return self.capabilities._signalSmokeinUse
    SignalSmokeinUse = property(get_signalSmokeinUse, set_signalSmokeinUse)

    def set_flashLightsOn(self, value : UInt8):
        self.capabilities._flashLightsOn = int(value)
    def get_flashLightsOn(self) -> UInt8:
        return self.capabilities._flashLightsOn
    FlashLightsOn = property(get_flashLightsOn, set_flashLightsOn)

    def set_signalMirrorinUse(self, value : UInt8):
        self.capabilities._signalMirrorinUse = int(value)
    def get_signalMirrorinUse(self) -> UInt8:
        return self.capabilities._signalMirrorinUse
    SignalMirrorinUse = property(get_signalMirrorinUse, set_signalMirrorinUse)

    def set_iRStrobeOn(self, value : UInt8):
        self.capabilities._iRStrobeOn = int(value)
    def get_iRStrobeOn(self) -> UInt8:
        return self.capabilities._iRStrobeOn
    IRStrobeOn = property(get_iRStrobeOn, set_iRStrobeOn)

    def set_iRIlluminatorOn(self, value : UInt8):
        self.capabilities._iRIlluminatorOn = int(value)
    def get_iRIlluminatorOn(self) -> UInt8:
        return self.capabilities._iRIlluminatorOn
    IRIlluminatorOn = property(get_iRIlluminatorOn, set_iRIlluminatorOn)

    def set_lifeFormPosture(self, value : AppearanceLifeFormPosture):
        self.capabilities._lifeFormPosture = int(value)
    def get_lifeFormPosture(self) -> AppearanceLifeFormPosture:
        return AppearanceLifeFormPosture.get_enum(self._lifeFormPosture)
    LifeFormPosture = property(get_lifeFormPosture, set_lifeFormPosture)

    def set_isSmokingCigarette(self, value : UInt8):
        self.capabilities._isSmokingCigarette = int(value)
    def get_isSmokingCigarette(self) -> UInt8:
        return self.capabilities._isSmokingCigarette
    IsSmokingCigarette = property(get_isSmokingCigarette, set_isSmokingCigarette)

    def set_isFrozen(self, value : UInt8):
        self.capabilities._isFrozen = int(value)
    def get_isFrozen(self) -> UInt8:
        return self.capabilities._isFrozen
    IsFrozen = property(get_isFrozen, set_isFrozen)

    def set_mountedHoistedStatus(self, value : UInt8):
        self.capabilities._mountedHoistedStatus = int(value)
    def get_mountedHoistedStatus(self) -> UInt8:
        return self.capabilities._mountedHoistedStatus
    MountedHoistedStatus = property(get_mountedHoistedStatus, set_mountedHoistedStatus)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_weaponImplement1(self, value : AppearanceLifeFormWeaponImplement):
        self.capabilities._weaponImplement1 = int(value)
    def get_weaponImplement1(self) -> AppearanceLifeFormWeaponImplement:
        return AppearanceLifeFormWeaponImplement.get_enum(self._weaponImplement1)
    WeaponImplement1 = property(get_weaponImplement1, set_weaponImplement1)

    def set_weaponImplement2(self, value : AppearanceLifeFormWeaponImplement):
        self.capabilities._weaponImplement2 = int(value)
    def get_weaponImplement2(self) -> AppearanceLifeFormWeaponImplement:
        return AppearanceLifeFormWeaponImplement.get_enum(self._weaponImplement2)
    WeaponImplement2 = property(get_weaponImplement2, set_weaponImplement2)

    def set_camouflageType(self, value : AppearanceCamouflageType):
        self.capabilities._camouflageType = int(value)
    def get_camouflageType(self) -> AppearanceCamouflageType:
        return AppearanceCamouflageType.get_enum(self._camouflageType)
    CamouflageType = property(get_camouflageType, set_camouflageType)

    def set_concealedStationary(self, value : AppearanceConcealedPosition):
        self.capabilities._concealedStationary = int(value)
    def get_concealedStationary(self) -> AppearanceConcealedPosition:
        return AppearanceConcealedPosition.get_enum(self._concealedStationary)
    ConcealedStationary = property(get_concealedStationary, set_concealedStationary)

    def set_concealedMovement(self, value : AppearanceConcealedMovement):
        self.capabilities._concealedMovement = int(value)
    def get_concealedMovement(self) -> AppearanceConcealedMovement:
        return AppearanceConcealedMovement.get_enum(self._concealedMovement)
    ConcealedMovement = property(get_concealedMovement, set_concealedMovement)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "PaintScheme : " +  self.PaintScheme.get_description + "\n"
        outputStream += "Health : " +  self.Health.get_description + "\n"
        outputStream += "ComplianceStatus : " +  self.ComplianceStatus.get_description + "\n"
        outputStream += "ClothingIRSignature : " +  self.ClothingIRSignature.get_description + "\n"
        outputStream += "SignalSmokeinUse : " +  str(self.SignalSmokeinUse) + "\n"
        outputStream += "FlashLightsOn : " +  str(self.FlashLightsOn) + "\n"
        outputStream += "SignalMirrorinUse : " +  str(self.SignalMirrorinUse) + "\n"
        outputStream += "IRStrobeOn : " +  str(self.IRStrobeOn) + "\n"
        outputStream += "IRIlluminatorOn : " +  str(self.IRIlluminatorOn) + "\n"
        outputStream += "LifeFormPosture : " +  self.LifeFormPosture.get_description + "\n"
        outputStream += "IsSmokingCigarette : " +  str(self.IsSmokingCigarette) + "\n"
        outputStream += "IsFrozen : " +  str(self.IsFrozen) + "\n"
        outputStream += "MountedHoistedStatus : " +  str(self.MountedHoistedStatus) + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "WeaponImplement1 : " +  self.WeaponImplement1.get_description + "\n"
        outputStream += "WeaponImplement2 : " +  self.WeaponImplement2.get_description + "\n"
        outputStream += "CamouflageType : " +  self.CamouflageType.get_description + "\n"
        outputStream += "ConcealedStationary : " +  self.ConcealedStationary.get_description + "\n"
        outputStream += "ConcealedMovement : " +  self.ConcealedMovement.get_description + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 32 
