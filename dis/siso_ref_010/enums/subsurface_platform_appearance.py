'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''

from .appearance_paint_scheme import AppearancePaintScheme
from .appearance_damage import AppearanceDamage
from .appearance_subsurface_hatch import AppearanceSubsurfaceHatch
from .appearance_entityor_object_state import AppearanceEntityorObjectState

import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

UByte = ctypes.c_ubyte
UInt  = ctypes.c_uint

# autogenerated using string template disbitset1.txt
# package edu.nps.moves.dis7.enumerations;

"""
/**
  * Generated from XML,
  *  UID 34, marshal size 32,
  * SubsurfacePlatformAppearance
  */

"""

class SubsurfacePlatformAppearanceBitField(ctypes.Structure):
    _fields_ = [
        # (bit position 0, boolean) Describes the visual paint design,  use {@link AppearancePaintScheme} values for this field
        ("_paintScheme", UByte, 1),

        # (bit position 1, boolean) Describes whether it is capable of moving on its own power,  use {@link UInt8} values for this field
        ("_mobilityKilled", UByte, 1),

        # (bit position 3, length=2) Describes the damaged appearance,  use {@link AppearanceDamage} values for this field
        ("_damage", UByte, 2),

        # (bit position 5, boolean) Describes whether or not smoke is emanating from the entity,  use {@link UInt8} values for this field
        ("_isSmokeEmanating", UByte, 1),

        # (bit position 6, boolean) Describes whether or not the engine is emitting smoke,  use {@link UInt8} values for this field
        ("_isEngineEmittingSmoke", UByte, 1),

        # (bit position 9, length=3) Describes whether the hatch is open or closed,  use {@link AppearanceSubsurfaceHatch} values for this field
        ("_hatch", UByte, 3),

        # (bit position 12, boolean) Describes whether running lights are on or off,  use {@link UInt8} values for this field
        ("_runningLightsOn", UByte, 1),

        # (bit position 15, boolean) Describes whether the entity is burning and flames are visible,  use {@link UInt8} values for this field
        ("_isFlaming", UByte, 1),

        # (bit position 16, boolean) Describes whether the periscope is extended or not,  use {@link UInt8} values for this field
        ("_periscope", UByte, 1),

        # (bit position 17, boolean) Describes whether the snorkel is extended or not,  use {@link UInt8} values for this field
        ("_snorkel", UByte, 1),

        # (bit position 18, boolean) Describes whether the radar mast is extended or not,  use {@link UInt8} values for this field
        ("_radarMast", UByte, 1),

        # (bit position 19, boolean) Describes whether the communication mast is extended or not,  use {@link UInt8} values for this field
        ("_commsMast", UByte, 1),

        # (bit position 20, boolean) Describes whether the ESM mast is extended or not,  use {@link UInt8} values for this field
        ("_eSMMast", UByte, 1),

        # (bit position 21, boolean) Describes whether the entity is frozen and should not be dead reckoned,  use {@link UInt8} values for this field
        ("_isFrozen", UByte, 1),

        # (bit position 22, boolean) Describes whether the power plant is on or off,  use {@link UInt8} values for this field
        ("_powerPlantOn", UByte, 1),

        # (bit position 23, boolean) Describes whether the entity is active or deactivated,  use {@link AppearanceEntityorObjectState} values for this field
        ("_state", UByte, 1),

        # (bit position 25, boolean) Describes whether the torpedo tubes are open or not,  use {@link UInt8} values for this field
        ("_torpedoTubes", UByte, 1),

        # (bit position 26, boolean) Describes whether the missile hatches are open or not,  use {@link UInt8} values for this field
        ("_missileHatches", UByte, 1),

        # (bit position 27, boolean) Describes whether the TAS is deployed or not,  use {@link UInt8} values for this field
        ("_towedArraySonar", UByte, 1)
    ]

class SubsurfacePlatformAppearance(ctypes.Union):
    _fields_ = [
        ("capabilities", SubsurfacePlatformAppearanceBitField),
        ("asbyte", UInt8)
    ]

    def set_paintScheme(self, value : AppearancePaintScheme):
        self.capabilities._paintScheme = int(value)
    def get_paintScheme(self) -> AppearancePaintScheme:
        return AppearancePaintScheme.get_enum(self._paintScheme)
    PaintScheme = property(get_paintScheme, set_paintScheme)

    def set_mobilityKilled(self, value : UInt8):
        self.capabilities._mobilityKilled = int(value)
    def get_mobilityKilled(self) -> UInt8:
        return self.capabilities._mobilityKilled
    MobilityKilled = property(get_mobilityKilled, set_mobilityKilled)

    def set_damage(self, value : AppearanceDamage):
        self.capabilities._damage = int(value)
    def get_damage(self) -> AppearanceDamage:
        return AppearanceDamage.get_enum(self._damage)
    Damage = property(get_damage, set_damage)

    def set_isSmokeEmanating(self, value : UInt8):
        self.capabilities._isSmokeEmanating = int(value)
    def get_isSmokeEmanating(self) -> UInt8:
        return self.capabilities._isSmokeEmanating
    IsSmokeEmanating = property(get_isSmokeEmanating, set_isSmokeEmanating)

    def set_isEngineEmittingSmoke(self, value : UInt8):
        self.capabilities._isEngineEmittingSmoke = int(value)
    def get_isEngineEmittingSmoke(self) -> UInt8:
        return self.capabilities._isEngineEmittingSmoke
    IsEngineEmittingSmoke = property(get_isEngineEmittingSmoke, set_isEngineEmittingSmoke)

    def set_hatch(self, value : AppearanceSubsurfaceHatch):
        self.capabilities._hatch = int(value)
    def get_hatch(self) -> AppearanceSubsurfaceHatch:
        return AppearanceSubsurfaceHatch.get_enum(self._hatch)
    Hatch = property(get_hatch, set_hatch)

    def set_runningLightsOn(self, value : UInt8):
        self.capabilities._runningLightsOn = int(value)
    def get_runningLightsOn(self) -> UInt8:
        return self.capabilities._runningLightsOn
    RunningLightsOn = property(get_runningLightsOn, set_runningLightsOn)

    def set_isFlaming(self, value : UInt8):
        self.capabilities._isFlaming = int(value)
    def get_isFlaming(self) -> UInt8:
        return self.capabilities._isFlaming
    IsFlaming = property(get_isFlaming, set_isFlaming)

    def set_periscope(self, value : UInt8):
        self.capabilities._periscope = int(value)
    def get_periscope(self) -> UInt8:
        return self.capabilities._periscope
    Periscope = property(get_periscope, set_periscope)

    def set_snorkel(self, value : UInt8):
        self.capabilities._snorkel = int(value)
    def get_snorkel(self) -> UInt8:
        return self.capabilities._snorkel
    Snorkel = property(get_snorkel, set_snorkel)

    def set_radarMast(self, value : UInt8):
        self.capabilities._radarMast = int(value)
    def get_radarMast(self) -> UInt8:
        return self.capabilities._radarMast
    RadarMast = property(get_radarMast, set_radarMast)

    def set_commsMast(self, value : UInt8):
        self.capabilities._commsMast = int(value)
    def get_commsMast(self) -> UInt8:
        return self.capabilities._commsMast
    CommsMast = property(get_commsMast, set_commsMast)

    def set_eSMMast(self, value : UInt8):
        self.capabilities._eSMMast = int(value)
    def get_eSMMast(self) -> UInt8:
        return self.capabilities._eSMMast
    ESMMast = property(get_eSMMast, set_eSMMast)

    def set_isFrozen(self, value : UInt8):
        self.capabilities._isFrozen = int(value)
    def get_isFrozen(self) -> UInt8:
        return self.capabilities._isFrozen
    IsFrozen = property(get_isFrozen, set_isFrozen)

    def set_powerPlantOn(self, value : UInt8):
        self.capabilities._powerPlantOn = int(value)
    def get_powerPlantOn(self) -> UInt8:
        return self.capabilities._powerPlantOn
    PowerPlantOn = property(get_powerPlantOn, set_powerPlantOn)

    def set_state(self, value : AppearanceEntityorObjectState):
        self.capabilities._state = int(value)
    def get_state(self) -> AppearanceEntityorObjectState:
        return AppearanceEntityorObjectState.get_enum(self._state)
    State = property(get_state, set_state)

    def set_torpedoTubes(self, value : UInt8):
        self.capabilities._torpedoTubes = int(value)
    def get_torpedoTubes(self) -> UInt8:
        return self.capabilities._torpedoTubes
    TorpedoTubes = property(get_torpedoTubes, set_torpedoTubes)

    def set_missileHatches(self, value : UInt8):
        self.capabilities._missileHatches = int(value)
    def get_missileHatches(self) -> UInt8:
        return self.capabilities._missileHatches
    MissileHatches = property(get_missileHatches, set_missileHatches)

    def set_towedArraySonar(self, value : UInt8):
        self.capabilities._towedArraySonar = int(value)
    def get_towedArraySonar(self) -> UInt8:
        return self.capabilities._towedArraySonar
    TowedArraySonar = property(get_towedArraySonar, set_towedArraySonar)


    def to_string(self):
        outputStream = ""
        outputStream += format(self.asbyte, '#032b') + "\n"
        outputStream += "PaintScheme : " +  self.PaintScheme.get_description + "\n"
        outputStream += "MobilityKilled : " +  str(self.MobilityKilled) + "\n"
        outputStream += "Damage : " +  self.Damage.get_description + "\n"
        outputStream += "IsSmokeEmanating : " +  str(self.IsSmokeEmanating) + "\n"
        outputStream += "IsEngineEmittingSmoke : " +  str(self.IsEngineEmittingSmoke) + "\n"
        outputStream += "Hatch : " +  self.Hatch.get_description + "\n"
        outputStream += "RunningLightsOn : " +  str(self.RunningLightsOn) + "\n"
        outputStream += "IsFlaming : " +  str(self.IsFlaming) + "\n"
        outputStream += "Periscope : " +  str(self.Periscope) + "\n"
        outputStream += "Snorkel : " +  str(self.Snorkel) + "\n"
        outputStream += "RadarMast : " +  str(self.RadarMast) + "\n"
        outputStream += "CommsMast : " +  str(self.CommsMast) + "\n"
        outputStream += "ESMMast : " +  str(self.ESMMast) + "\n"
        outputStream += "IsFrozen : " +  str(self.IsFrozen) + "\n"
        outputStream += "PowerPlantOn : " +  str(self.PowerPlantOn) + "\n"
        outputStream += "State : " +  self.State.get_description + "\n"
        outputStream += "TorpedoTubes : " +  str(self.TorpedoTubes) + "\n"
        outputStream += "MissileHatches : " +  str(self.MissileHatches) + "\n"
        outputStream += "TowedArraySonar : " +  str(self.TowedArraySonar) + "\n"
        return outputStream

    def __str__(self):
        return self.to_string()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

    def get_marshaled_size(self):
        return 32 
