'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 516,
  * marshal size 8;
  * LifeFormHumanSpecificMachineGuns has 88 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificMachineGuns(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _556x45mm_xm214_microgun_six_pak = EnumValue(10, "5.56x45mm XM214 Microgun Six-Pak")
    _762x51mm_m134_xm196_minigun = EnumValue(11, "7.62x51mm M134/XM196 Minigun")
    _556x45mm_m249_fn_minimi_saw_lmg = EnumValue(20, "5.56x45mm M249/FN Minimi SAW/LMG")
    _556x45mm_fn_minimi_mk3_lmg = EnumValue(21, "5.56x45mm FN Minimi Mk3 LMG")
    _762x51mm_fn_minimi_762_mk3_gpmg = EnumValue(22, "7.62x51mm FN Minimi 7.62 Mk3 GPMG")
    _762x63mm_m1941_johnson = EnumValue(25, "7.62x63mm M1941 Johnson")
    _762x63mm_m1918_bar = EnumValue(26, "7.62x63mm M1918 BAR")
    _762x51mm_m1919a4_mk_21_mod_0_browning_mmg = EnumValue(27, "7.62x51mm M1919A4/Mk 21 Mod 0 Browning MMG")
    _762x63mm_m1919a6_browning_mmg = EnumValue(28, "7.62x63mm M1919A6 Browning MMG")
    _762x51mm_m37_browning_mmg = EnumValue(29, "7.62x51mm M37 Browning MMG")
    _556x45mm_ares_shrike_556_lmg = EnumValue(30, "5.56x45mm Ares Shrike 5.56 LMG")
    _556x45mm_lsat_lmg = EnumValue(31, "5.56x45mm LSAT LMG")
    _556x45mm_cmg_1_lmg = EnumValue(32, "5.56x45mm CMG-1 LMG")
    _556x45mm_cmg_2_lmg = EnumValue(33, "5.56x45mm CMG-2 LMG")
    _556x45mm_stoner_63a_lmg = EnumValue(34, "5.56x45mm Stoner 63A LMG")
    _556x45mm_ultimax_100_lmg = EnumValue(35, "5.56x45mm Ultimax 100 LMG")
    _556x54mm_beretta_as70_90_lmg = EnumValue(36, "5.56x54mm Beretta AS70/90 LMG")
    _556x45mm_cetme_ameli_lmg = EnumValue(37, "5.56x45mm CETME Ameli LMG")
    _556x45mm_imi_negev_lmg = EnumValue(38, "5.56x45mm IMI Negev LMG")
    _556x45mm_insas_lmg = EnumValue(39, "5.56x45mm INSAS LMG")
    _556x45mm_aug_lmg = EnumValue(40, "5.56x45mm AUG LMG")
    _556x45mm_aug_hbar_lmg = EnumValue(41, "5.56x45mm AUG HBAR LMG")
    _556x45mm_hk_mg4_lmg = EnumValue(43, "5.56x45mm HK MG4 LMG")
    _556x45mm_hk23_gr_9_lmg = EnumValue(44, "5.56x45mm HK23/GR-9 LMG")
    _556x45mm_m27_iar_saw = EnumValue(46, "5.56x45mm M27 IAR SAW")
    _556x45mm_l86_lsw = EnumValue(47, "5.56x45mm L86 LSW")
    _556x45mm_daewoo_k3_lmg = EnumValue(48, "5.56x45mm Daewoo K3 LMG")
    _556x45mm_vector_mini_ss_gpmg = EnumValue(49, "5.56x45mm Vector Mini SS GPMG")
    _762x51mm_m60_gpmg = EnumValue(50, "7.62x51mm M60 GPMG")
    _762x51mm_m60e3_gpmg = EnumValue(51, "7.62x51mm M60E3 GPMG")
    _762x51mm_m60e4_gpmg = EnumValue(52, "7.62x51mm M60E4 GPMG")
    _762x51mm_m60e6_gpmg = EnumValue(53, "7.62x51mm M60E6 GPMG")
    _762x51mm_mark_48_gmpg = EnumValue(55, "7.62x51mm Mark 48 GMPG")
    _762x51mm_m240_fn_mag_58_gpmg = EnumValue(58, "7.62x51mm M240/FN MAG 58 GPMG")
    _762x51mm_m240e4_m240b_gpmg = EnumValue(59, "7.62x51mm M240E4/M240B GPMG")
    _762x51mm_m240e1_m240d_gpmg = EnumValue(60, "7.62x51mm M240E1/M240D GPMG")
    _762x51mm_m240g_gpmg = EnumValue(61, "7.62x51mm M240G GPMG")
    _762x51mm_m240e5_m240h_gpmg = EnumValue(62, "7.62x51mm M240E5/M240H GPMG")
    _762x51mm_m240l_gpmg = EnumValue(63, "7.62x51mm M240L GPMG")
    _762x39mm_kk_62_lmg = EnumValue(65, "7.62x39mm Kk 62 LMG")
    _762x51mm_vector_ss_77_gpmg = EnumValue(70, "7.62x51mm Vector SS-77 GPMG")
    _762x51mm_sig_mg_710_3_gpmg = EnumValue(71, "7.62x51mm SIG MG 710-3 GPMG")
    _762x51mm_sterling_762_gmpg = EnumValue(72, "7.62x51mm Sterling 7.62 GMPG")
    _762x51mm_sumitomo_type_62_gpmg = EnumValue(73, "7.62x51mm Sumitomo Type-62 GPMG")
    _762x51mm_daewoo_k12_gpmg = EnumValue(74, "7.62x51mm Daewoo K12 GPMG")
    _762x51mm_mg_51_gpmg = EnumValue(75, "7.62x51mm MG 51 GPMG")
    _762x51mm_rheinmetall_mg_3 = EnumValue(76, "7.62x51mm Rheinmetall MG 3")
    _762x51mm_rheinmetall_mg_3kws = EnumValue(77, "7.62x51mm Rheinmetall MG 3KWS")
    _762x51mm_mg5_hk121_gpmg = EnumValue(80, "7.62x51mm MG5/HK121 GPMG")
    _762x51mm_hk21_gpmg = EnumValue(81, "7.62x51mm HK21 GPMG")
    _762x51mm_aa_52_gpmp = EnumValue(85, "7.62x51mm AA-52 GPMP")
    _762x51mm_ukm_2000_gpmg = EnumValue(86, "7.62x51mm UKM-2000 GPMG")
    _762x54mm_uk_vz_59_gpmg = EnumValue(88, "7.62x54mm Uk vz. 59 GPMG")
    _792x57mm_mg_42_gpmg = EnumValue(89, "7.92x57mm MG 42 GPMG")
    _127x99mm_m2a1_browning_hmg = EnumValue(100, "12.7x99mm M2A1 Browning HMG")
    _127x99mm_m2hb_browning_hmg = EnumValue(101, "12.7x99mm M2HB Browning HMG")
    _127x99mm_m2hb_qcb_browning_hmg = EnumValue(102, "12.7x99mm M2HB-QCB Browning HMG")
    _127x99mm_m85c_hmg = EnumValue(105, "12.7x99mm M85C HMG")
    _127x99mm_rheinmetall_rmg50_hmg = EnumValue(108, "12.7x99mm Rheinmetall RMG.50 HMG")
    _127x99mm_hk25_hmg = EnumValue(110, "12.7x99mm HK25 HMG")
    _127x99mm_cis_50mg = EnumValue(112, "12.7x99mm CIS 50MG")
    _545x39mm_ip_2_lmg = EnumValue(120, "5.45x39mm IP-2 LMG")
    _545x39mm_nikonov_lmg = EnumValue(121, "5.45x39mm Nikonov LMG")
    _545x39mm_m74_rpk = EnumValue(122, "5.45x39mm M74 RPK")
    _762x39mm_m43_rpk = EnumValue(125, "7.62x39mm M43 RPK")
    _762x39mm_rpd_saw = EnumValue(126, "7.62x39mm RPD SAW")
    _762x39mm_zastava_m72 = EnumValue(127, "7.62x39mm Zastava M72")
    _762x39mm_type_81_lmg = EnumValue(128, "7.62x39mm Type-81 LMG")
    _762x51mm_zastava_m77 = EnumValue(135, "7.62x51mm Zastava M77")
    _762x54mm_pk_gpmg = EnumValue(140, "7.62x54mm PK GPMG")
    _762x54mm_aek_999_gpmp = EnumValue(141, "7.62x54mm AEK-999 GPMP")
    _762x54mm_pecheneg_gpmg = EnumValue(142, "7.62x54mm Pecheneg GPMG")
    _762x54mm_zastava_m84 = EnumValue(143, "7.62x54mm Zastava M84")
    _762x54mm_type_67_gpmg = EnumValue(144, "7.62x54mm Type-67 GPMG")
    _762x54mm_type_80_gpmg = EnumValue(145, "7.62x54mm Type-80 GPMG")
    _127x108mm_nsv_hmg = EnumValue(150, "12.7x108mm NSV HMG")
    _127x108mm_kord_hmg = EnumValue(151, "12.7x108mm Kord HMG")
    _127x108mm_kpd_127_hmg = EnumValue(152, "12.7x108mm KPD-12.7 HMG")
    _127x108mm_zastava_m02_coyotoe_hmg = EnumValue(153, "12.7x108mm Zastava M02 Coyotoe HMG")
    _127x108mm_zastava_m87 = EnumValue(154, "12.7x108mm Zastava M87")
    _127x108mm_type_77_hmg = EnumValue(155, "12.7x108mm Type-77 HMG")
    _127x108mm_w85_hmg = EnumValue(156, "12.7x108mm W85 HMG")
    _127x108mm_type_90_hmg = EnumValue(157, "12.7x108mm Type-90 HMG")
    _58x42mm_qjy_88_lmg = EnumValue(164, "5.8x42mm QJY-88 LMG")
    _58x42mm_qbb_95_dbp87_lmg = EnumValue(165, "5.8x42mm QBB-95 DBP87 LMG")
    _556x45mm_qbb_95_1_lmg = EnumValue(166, "5.56x45mm QBB-95-1 LMG")
    _68mm_m250_next_generation_squad_weapon_ngsw = EnumValue(170, "6.8mm M250 Next Generation Squad Weapon (NGSW)")
    default = other

    def get_marshaled_size(self):
        return 8
