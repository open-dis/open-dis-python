'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 517,
  * marshal size 8;
  * LifeFormHumanSpecificGrenadeLaunchingMachineGun has 20 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificGrenadeLaunchingMachineGun(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _40x53mm_hk_gmg = EnumValue(20, "40x53mm HK GMG")
    _40x53mm_mk47_striker = EnumValue(25, "40x53mm Mk47 Striker")
    _40mm_m75 = EnumValue(26, "40mm M75")
    _40mm_m129 = EnumValue(27, "40mm M129")
    _40x46mm_xm_174 = EnumValue(28, "40x46mm XM 174")
    _40x46mm_mk18_mod_0 = EnumValue(29, "40x46mm Mk18 Mod 0")
    _40x53mm_mk19 = EnumValue(30, "40x53mm Mk19")
    _40x46mm_mk20_mod_0 = EnumValue(31, "40x46mm Mk20 Mod 0")
    _30x29mm_rag_30_sag_30 = EnumValue(40, "30x29mm RAG-30/SAG-30")
    _30x29mm_ags_17_plamya = EnumValue(41, "30x29mm AGS-17 Plamya")
    _30x29mm_ags_30_atlant = EnumValue(42, "30x29mm AGS-30 Atlant")
    _40mm_vog_ags_40_balkan = EnumValue(43, "40mm VOG AGS-40 Balkan")
    _40x53mm_sb_lag_40 = EnumValue(44, "40x53mm SB LAG 40")
    _40x53mm_vektor_y3 = EnumValue(50, "40x53mm Vektor Y3")
    _40x53mm_cis_40 = EnumValue(55, "40x53mm CIS 40")
    _40x56mm_howa_type_96 = EnumValue(60, "40x56mm Howa Type-96")
    _40x53mm_daewoo_precision_industries_k4 = EnumValue(65, "40x53mm Daewoo Precision Industries K4")
    _25x59mm_xm307_advanced_crew_served_weapon = EnumValue(70, "25x59mm XM307 Advanced Crew Served Weapon")
    _35x32mm_qlz87 = EnumValue(80, "35x32mm QLZ87")
    default = other

    def get_marshaled_size(self):
        return 8
