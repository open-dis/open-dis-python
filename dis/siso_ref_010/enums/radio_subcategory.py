'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 23, marshal size 8;
  * RadioSubcategory has 60 enumerations total.
  * JETDS Specific Series are reserved in the range 11-100. Each set allows for 255 radios.
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class RadioSubcategory(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    joint_electronics_type_designation_system_jetds_non_specific_series = EnumValue(1, "Joint Electronics Type Designation System (JETDS) Non-specific Series")
    manufacturer_designation = EnumValue(2, "Manufacturer Designation")
    national_designation = EnumValue(3, "National Designation")
    jetds_arc_set_1 = EnumValue(11, "JETDS ARC Set 1")
    jetds_arc_set_2 = EnumValue(12, "JETDS ARC Set 2")
    jetds_arc_set_3 = EnumValue(13, "JETDS ARC Set 3")
    jetds_arc_set_4 = EnumValue(14, "JETDS ARC Set 4")
    jetds_brc_set_1 = EnumValue(15, "JETDS BRC Set 1")
    jetds_brc_set_2 = EnumValue(16, "JETDS BRC Set 2")
    jetds_brc_set_3 = EnumValue(17, "JETDS BRC Set 3")
    jetds_brc_set_4 = EnumValue(18, "JETDS BRC Set 4")
    jetds_crc_set_1 = EnumValue(19, "JETDS CRC Set 1")
    jetds_crc_set_2 = EnumValue(20, "JETDS CRC Set 2")
    jetds_crc_set_3 = EnumValue(21, "JETDS CRC Set 3")
    jetds_crc_set_4 = EnumValue(22, "JETDS CRC Set 4")
    jetds_drc_set_1 = EnumValue(23, "JETDS DRC Set 1")
    jetds_drc_set_2 = EnumValue(24, "JETDS DRC Set 2")
    jetds_drc_set_3 = EnumValue(25, "JETDS DRC Set 3")
    jetds_drc_set_4 = EnumValue(26, "JETDS DRC Set 4")
    jetds_frc_set_1 = EnumValue(27, "JETDS FRC Set 1")
    jetds_frc_set_2 = EnumValue(28, "JETDS FRC Set 2")
    jetds_frc_set_3 = EnumValue(29, "JETDS FRC Set 3")
    jetds_frc_set_4 = EnumValue(30, "JETDS FRC Set 4")
    jetds_grc_set_1 = EnumValue(31, "JETDS GRC Set 1")
    jetds_grc_set_2 = EnumValue(32, "JETDS GRC Set 2")
    jetds_grc_set_3 = EnumValue(33, "JETDS GRC Set 3")
    jetds_grc_set_4 = EnumValue(34, "JETDS GRC Set 4")
    jetds_krc_set_1 = EnumValue(35, "JETDS KRC Set 1")
    jetds_krc_set_2 = EnumValue(36, "JETDS KRC Set 2")
    jetds_krc_set_3 = EnumValue(37, "JETDS KRC Set 3")
    jetds_krc_set_4 = EnumValue(38, "JETDS KRC Set 4")
    jetds_mrc_set_1 = EnumValue(39, "JETDS MRC Set 1")
    jetds_mrc_set_2 = EnumValue(40, "JETDS MRC Set 2")
    jetds_mrc_set_3 = EnumValue(41, "JETDS MRC Set 3")
    jetds_mrc_set_4 = EnumValue(42, "JETDS MRC Set 4")
    jetds_prc_set_1 = EnumValue(43, "JETDS PRC Set 1")
    jetds_prc_set_2 = EnumValue(44, "JETDS PRC Set 2")
    jetds_prc_set_3 = EnumValue(45, "JETDS PRC Set 3")
    jetds_prc_set_4 = EnumValue(46, "JETDS PRC Set 4")
    jetds_src_set_1 = EnumValue(47, "JETDS SRC Set 1")
    jetds_src_set_2 = EnumValue(48, "JETDS SRC Set 2")
    jetds_src_set_3 = EnumValue(49, "JETDS SRC Set 3")
    jetds_src_set_4 = EnumValue(50, "JETDS SRC Set 4")
    jetds_trc_set_1 = EnumValue(51, "JETDS TRC Set 1")
    jetds_trc_set_2 = EnumValue(52, "JETDS TRC Set 2")
    jetds_trc_set_3 = EnumValue(53, "JETDS TRC Set 3")
    jetds_trc_set_4 = EnumValue(54, "JETDS TRC Set 4")
    jetds_vrc_set_1 = EnumValue(55, "JETDS VRC Set 1")
    jetds_vrc_set_2 = EnumValue(56, "JETDS VRC Set 2")
    jetds_vrc_set_3 = EnumValue(57, "JETDS VRC Set 3")
    jetds_vrc_set_4 = EnumValue(58, "JETDS VRC Set 4")
    jetds_wrc_set_1 = EnumValue(59, "JETDS WRC Set 1")
    jetds_wrc_set_2 = EnumValue(60, "JETDS WRC Set 2")
    jetds_wrc_set_3 = EnumValue(61, "JETDS WRC Set 3")
    jetds_wrc_set_4 = EnumValue(62, "JETDS WRC Set 4")
    jetds_zrc_set_1 = EnumValue(63, "JETDS ZRC Set 1")
    jetds_zrc_set_2 = EnumValue(64, "JETDS ZRC Set 2")
    jetds_zrc_set_3 = EnumValue(65, "JETDS ZRC Set 3")
    jetds_zrc_set_4 = EnumValue(66, "JETDS ZRC Set 4")
    default = other

    def get_marshaled_size(self):
        return 8
