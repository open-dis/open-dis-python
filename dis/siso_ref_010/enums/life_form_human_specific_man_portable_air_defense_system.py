'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 520,
  * marshal size 8;
  * LifeFormHumanSpecificManPortableAirDefenseSystem has 27 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class LifeFormHumanSpecificManPortableAirDefenseSystem(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    _70mm_fim_43_redeye = EnumValue(1, "70mm FIM-43 Redeye")
    _70mm_fim_92_stinger = EnumValue(2, "70mm FIM-92 Stinger")
    _76mm_blowpipe = EnumValue(10, "76mm Blowpipe")
    _76mm_starburst_javelin_s_15 = EnumValue(11, "76mm Starburst (Javelin S-15)")
    _130mm_starstreak_hvm = EnumValue(12, "130mm Starstreak HVM")
    _90mm_mistral = EnumValue(15, "90mm Mistral")
    _72mm_9k32m_strela_2_sa_7 = EnumValue(20, "72mm 9K32M Strela-2 (SA-7)")
    _72mm_9k36_strela_3_sa_14 = EnumValue(21, "72mm 9K36 Strela-3 (SA-14)")
    _72mm_9k38_igla_sa_18 = EnumValue(22, "72mm 9K38 Igla (SA-18)")
    _72mm_9k310_igla_m_sa_16 = EnumValue(23, "72mm 9K310 Igla-M (SA-16)")
    _72mm_9k333_verba_sa_29 = EnumValue(24, "72mm 9K333 Verba (SA-29)")
    _72mm_9k338_igla_s_sa_24_grinch = EnumValue(25, "72mm 9K338 Igla-S (SA-24 Grinch)")
    _72mm_9k32m_strela_2m_sa_7b = EnumValue(26, "72mm 9K32M Strela-2M (SA-7B)")
    _72mm_ppzr_piorun_grom_m = EnumValue(27, "72mm PPZR Piorun (Grom-M)")
    _72mm_hn_5_hong_ying_5 = EnumValue(30, "72mm HN-5 Hong-Ying-5")
    _72mm_csa_7_qw_1_vanguard = EnumValue(31, "72mm CSA-7 (QW-1, Vanguard)")
    _72mm_csa_8_qw_2 = EnumValue(32, "72mm CSA-8 (QW-2)")
    _90mm_qw_3 = EnumValue(33, "90mm QW-3")
    _72mm_csa_10_fn_6 = EnumValue(34, "72mm CSA-10 (FN-6)")
    _72mm_csa_11_qw_18 = EnumValue(35, "72mm CSA-11 (QW-18)")
    _72mm_csa_14_fn_16 = EnumValue(36, "72mm CSA-14 (FN-16)")
    _71mm_misagh_1 = EnumValue(45, "71mm Misagh-1")
    _71mm_misagh_2 = EnumValue(46, "71mm Misagh-2")
    _80mm_type_91_kin_sam = EnumValue(50, "80mm Type-91 Kin-SAM")
    _80mm_kp_sam_shun_gung_chiron = EnumValue(55, "80mm KP-SAM Shun-Gung (Chiron)")
    _106mm_rbs_70 = EnumValue(60, "106mm RBS-70")
    default = other

    def get_marshaled_size(self):
        return 8
