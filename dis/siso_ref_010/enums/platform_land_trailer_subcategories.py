'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1withfootnote.txt
# package edu.nps.moves.dis7.enumerations;

'''
/**
  *  UID 436, marshal size 8;
  * PlatformLandTrailerSubcategories has 28 enumerations total.
  * Subcategories for Land Platform Category 89
  * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
  * @see java.lang.Enum
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value

class PlatformLandTrailerSubcategories(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    trailer_flatbed = EnumValue(1, "Trailer, Flatbed")
    trailer_container = EnumValue(2, "Trailer, Container")
    trailer_container_refrigerated = EnumValue(3, "Trailer, Container, Refrigerated")
    trailer_double = EnumValue(4, "Trailer, Double")
    trailer_auto_transport = EnumValue(5, "Trailer, Auto Transport")
    trailer_articulated = EnumValue(6, "Trailer, Articulated")
    trailer_tanker = EnumValue(7, "Trailer, Tanker")
    trailer_tanker_small = EnumValue(8, "Trailer, Tanker, Small")
    trailer_tanker_large = EnumValue(9, "Trailer, Tanker, Large")
    trailer_tanker_gasoline = EnumValue(10, "Trailer, Tanker, Gasoline")
    trailer_tanker_milk = EnumValue(11, "Trailer, Tanker, Milk")
    trailer_tanker_water = EnumValue(12, "Trailer, Tanker, Water")
    trailer_tanker_septic = EnumValue(13, "Trailer, Tanker, Septic")
    trailer_boat = EnumValue(14, "Trailer, Boat")
    trailer_boat_small = EnumValue(15, "Trailer, Boat, Small")
    trailer_boat_large = EnumValue(16, "Trailer, Boat, Large")
    trailer_recreational = EnumValue(17, "Trailer, Recreational")
    trailer_recreational_conventional = EnumValue(18, "Trailer, Recreational, Conventional")
    trailer_recreational_travel_expandable = EnumValue(19, "Trailer, Recreational, Travel Expandable")
    trailer_recreational_fifth_wheel_travel = EnumValue(20, "Trailer, Recreational, Fifth Wheel Travel")
    trailer_recreational_folding_camping = EnumValue(21, "Trailer, Recreational, Folding Camping")
    trailer_recreational_truck_camper = EnumValue(22, "Trailer, Recreational, Truck Camper")
    trailer_aerostat_mooring_platform = EnumValue(23, "Trailer, Aerostat Mooring Platform")
    trailer_household = EnumValue(24, "Trailer, Household")
    trailer_kitchen = EnumValue(25, "Trailer, Kitchen")
    trailer_ultralight_aircraft = EnumValue(26, "Trailer, UltraLight Aircraft")
    trailer_heavy_equipment = EnumValue(27, "Trailer, Heavy Equipment")
    default = other

    def get_marshaled_size(self):
        return 8
