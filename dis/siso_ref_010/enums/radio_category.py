'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 22,
  * marshal size 8;
  * RadioCategory has 44 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class RadioCategory(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    voice_transmission_reception = EnumValue(1, "Voice Transmission/Reception")
    data_link_transmission_reception = EnumValue(2, "Data Link Transmission/Reception")
    voice_and_data_link_transmission_reception = EnumValue(3, "Voice and Data Link Transmission/Reception")
    instrumented_landing_system_ils_glideslope_transmitter = EnumValue(4, "Instrumented Landing System (ILS) Glideslope Transmitter")
    instrumented_landing_system_ils_localizer_transmitter = EnumValue(5, "Instrumented Landing System (ILS) Localizer Transmitter")
    instrumented_landing_system_ils_outer_marker_beacon = EnumValue(6, "Instrumented Landing System (ILS) Outer Marker Beacon")
    instrumented_landing_system_ils_middle_marker_beacon = EnumValue(7, "Instrumented Landing System (ILS) Middle Marker Beacon")
    instrumented_landing_system_ils_inner_marker_beacon = EnumValue(8, "Instrumented Landing System (ILS) Inner Marker Beacon")
    instrumented_landing_system_ils_receiver_platform_radio = EnumValue(9, "Instrumented Landing System (ILS) Receiver (Platform Radio)")
    tactical_air_navigation_tacan_transmitter_ground_fixed_equipment = EnumValue(10, "Tactical Air Navigation (TACAN) Transmitter (Ground Fixed Equipment)")
    tactical_air_navigation_tacan_receiver_moving_platform_equipment = EnumValue(11, "Tactical Air Navigation (TACAN) Receiver (Moving Platform Equipment)")
    tactical_air_navigation_tacan_transmitter_receiver_moving_platform_equipment = EnumValue(12, "Tactical Air Navigation (TACAN) Transmitter/Receiver (Moving Platform Equipment)")
    variable_omni_ranging_vor_transmitter_ground_fixed_equipment = EnumValue(13, "Variable Omni-Ranging (VOR) Transmitter (Ground Fixed Equipment)")
    variable_omni_ranging_vor_with_distance_measuring_equipment_dme_transmitter_ground_fixed_equipment = EnumValue(14, "Variable Omni-Ranging (VOR) with Distance Measuring Equipment (DME) Transmitter (Ground Fixed Equipment)")
    combined_vor_ils_receiver_moving_platform_equipment = EnumValue(15, "Combined VOR/ILS Receiver (Moving Platform Equipment)")
    combined_vor_amp_tacan_vortac_transmitter = EnumValue(16, "Combined VOR &amp; TACAN (VORTAC) Transmitter")
    non_directional_beacon_ndb_transmitter = EnumValue(17, "Non-Directional Beacon (NDB) Transmitter")
    non_directional_beacon_ndb_receiver = EnumValue(18, "Non-Directional Beacon (NDB) Receiver")
    non_directional_beacon_ndb_with_distance_measuring_equipment_dme_transmitter = EnumValue(19, "Non-Directional Beacon (NDB) with Distance Measuring Equipment (DME) Transmitter")
    distance_measuring_equipment_dme = EnumValue(20, "Distance Measuring Equipment (DME)")
    link_16_terminal = EnumValue(21, "Link 16 Terminal")
    link_11_terminal = EnumValue(22, "Link 11 Terminal")
    link_11b_terminal = EnumValue(23, "Link 11B Terminal")
    eplrs_sadl_terminal = EnumValue(24, "EPLRS/SADL Terminal")
    f_22_intra_flight_data_link_ifdl = EnumValue(25, "F-22 Intra-Flight Data Link (IFDL)")
    f_35_multifunction_advanced_data_link_madl = EnumValue(26, "F-35 Multifunction Advanced Data Link (MADL)")
    sincgars_terminal = EnumValue(27, "SINCGARS Terminal")
    l_band_satcom_terminal = EnumValue(28, "L-Band SATCOM Terminal")
    ibs_terminal = EnumValue(29, "IBS Terminal")
    gps = EnumValue(30, "GPS")
    tactical_video = EnumValue(31, "Tactical Video")
    air_to_air_missile_datalink = EnumValue(32, "Air-to-Air Missile Datalink")
    link_16_surrogate_for_non_nato_tdl_terminal = EnumValue(33, "Link 16 Surrogate for Non-NATO TDL Terminal")
    mq_1_9_c_band_los_datalink = EnumValue(34, "MQ-1/9 C-Band LOS Datalink")
    mq_1_9_ku_band_satcom_datalink = EnumValue(35, "MQ-1/9 Ku-Band SATCOM Datalink")
    air_to_ground_weapon_datalink = EnumValue(36, "Air-to-Ground Weapon Datalink")
    automatic_identification_system_ais = EnumValue(37, "Automatic Identification System (AIS)")
    jpals_data_link = EnumValue(38, "JPALS Data Link")
    combat_search_and_rescue_csar_radio = EnumValue(40, "Combat Search and Rescue (CSAR) Radio")
    counter_unmanned_aircraft_system_c_uas_radio = EnumValue(41, "Counter Unmanned Aircraft System (C-UAS) Radio")
    emergency_position_indicating_radio_beacons_epirb = EnumValue(42, "Emergency Position-Indicating Radio Beacons (EPIRB)")
    electronic_attack_systems = EnumValue(50, "Electronic Attack Systems")
    tactical_targeting_network_technology_ttnt = EnumValue(51, "Tactical Targeting Network Technology (TTNT)")
    default = other

    def get_marshaled_size(self):
        return 8
