'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 326,
  * marshal size 16;
  * SensorRecordSensorTypePassiveSensors has 69 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class SensorRecordSensorTypePassiveSensors(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    alr_400 = EnumValue(60000, "ALR-400")
    an_aar_47 = EnumValue(60001, "AN/AAR-47")
    an_aar_50 = EnumValue(60002, "AN/AAR-50")
    an_aar_54 = EnumValue(60003, "AN/AAR-54")
    an_aar_56 = EnumValue(60004, "AN/AAR-56")
    an_aar_57 = EnumValue(60005, "AN/AAR-57")
    an_alq_142 = EnumValue(60006, "AN/ALQ-142")
    an_alr_45 = EnumValue(60007, "AN/ALR-45")
    an_alr_46 = EnumValue(60008, "AN/ALR-46")
    an_alr_56 = EnumValue(60009, "AN/ALR-56")
    an_alr_59 = EnumValue(60010, "AN/ALR-59")
    an_alr_64 = EnumValue(60011, "AN/ALR-64")
    an_alr_66 = EnumValue(60012, "AN/ALR-66")
    an_alr_67 = EnumValue(60013, "AN/ALR-67")
    an_alr_69 = EnumValue(60014, "AN/ALR-69")
    an_alr_73 = EnumValue(60015, "AN/ALR-73")
    an_alr_76 = EnumValue(60016, "AN/ALR-76")
    an_alr_91 = EnumValue(60017, "AN/ALR-91")
    an_alr_93 = EnumValue(60018, "AN/ALR-93")
    an_alr_94 = EnumValue(60019, "AN/ALR-94")
    an_alr_801 = EnumValue(60020, "AN/ALR-801")
    an_apr_39 = EnumValue(60021, "AN/APR-39")
    an_ayr_2 = EnumValue(60022, "AN/AYR-2")
    ari_18223 = EnumValue(60023, "ARI 18223")
    bow_21 = EnumValue(60024, "BOW-21")
    chaparral_irst = EnumValue(60025, "Chaparral IRST")
    natoid_flanker_irst = EnumValue(60026, "NATOID_Flanker IRST")
    natoid_foxbat_irst = EnumValue(60027, "NATOID_Foxbat IRST")
    natoid_foxhound_irst = EnumValue(60028, "NATOID_Foxhound IRST")
    natoid_fulcrum_irst = EnumValue(60029, "NATOID_Fulcrum IRST")
    natoid_havoc_irst = EnumValue(60030, "NATOID_Havoc IRST")
    natoid_hind_irst = EnumValue(60031, "NATOID_Hind IRST")
    kj_200 = EnumValue(60032, "KJ-200")
    kj_8602 = EnumValue(60033, "KJ-8602")
    l_150_pastel = EnumValue(60034, "L-150 Pastel")
    serval = EnumValue(60035, "Serval")
    sherloc = EnumValue(60036, "Sherloc")
    sherlocvf = EnumValue(60037, "Sherlocvf")
    sirena_2 = EnumValue(60038, "Sirena-2")
    sirena_3 = EnumValue(60039, "Sirena-3")
    sirena_3m = EnumValue(60040, "Sirena-3M")
    sky_guardian = EnumValue(60041, "Sky Guardian")
    spo_15 = EnumValue(60042, "SPO-15")
    sps_200 = EnumValue(60043, "SPS-200")
    tarang = EnumValue(60044, "Tarang")
    an_aaq_29a = EnumValue(60045, "AN/AAQ-29A")
    _101ks_u_maw = EnumValue(60046, "101KS-U MAW")
    commid_abrams_2gf_flir = EnumValue(60047, "COMMID_Abrams 2GF FLIR")
    commid_abrams_3gf_flir = EnumValue(60048, "COMMID_Abrams 3GF FLIR")
    an_aaq_13_lantirn_flir = EnumValue(60049, "AN/AAQ-13 LANTIRN FLIR")
    an_alr_74 = EnumValue(60050, "AN/ALR-74")
    an_alr_90 = EnumValue(60051, "AN/ALR-90")
    an_apr_48 = EnumValue(60052, "AN/APR-48")
    elt_156xv = EnumValue(60053, "ELT-156X(V)")
    _101ks_v = EnumValue(60054, "101KS-V")
    tp_23ml = EnumValue(60055, "TP-23ML")
    commid_generic_flir = EnumValue(60056, "COMMID_Generic FLIR")
    commid_generic_irst = EnumValue(60057, "COMMID_Generic IRST")
    commid_generic_maws = EnumValue(60058, "COMMID_Generic MAWS")
    commid_generic_rwr = EnumValue(60059, "COMMID_Generic RWR")
    l_136_mak = EnumValue(60060, "L-136 Mak")
    commid_leonardo_sass_irst = EnumValue(60061, "COMMID_Leonardo SASS IRST")
    commid_osf_irst = EnumValue(60062, "COMMID_OSF IRST")
    commid_pirate_irst = EnumValue(60063, "COMMID_Pirate IRST")
    commid_reccelite = EnumValue(60064, "COMMID_RECCELITE")
    commid_thales_nederland_sirius_irst = EnumValue(60065, "COMMID_Thales Nederland Sirius IRST")
    tornado_rwr = EnumValue(60066, "Tornado RWR")
    toes_521_flir = EnumValue(60067, "TOES-521 FLIR")
    commid_safran_vampir_mb = EnumValue(60068, "COMMID_Safran Vampir_MB")
    default = alr_400

    def get_marshaled_size(self):
        return 16
