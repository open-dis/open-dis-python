'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 61,
  * marshal size 16;
  * MunitionDescriptorFuse has 107 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class MunitionDescriptorFuse(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    intelligent_influence = EnumValue(10, "Intelligent Influence")
    sensor = EnumValue(20, "Sensor")
    self_destruct = EnumValue(30, "Self-destruct")
    ultra_quick = EnumValue(40, "Ultra Quick")
    body = EnumValue(50, "Body")
    deep_intrusion = EnumValue(60, "Deep Intrusion")
    multifunction = EnumValue(100, "Multifunction")
    point_detonation_pd = EnumValue(200, "Point Detonation (PD)")
    base_detonation_bd = EnumValue(300, "Base Detonation (BD)")
    contact = EnumValue(1000, "Contact")
    contact_instant_impact = EnumValue(1100, "Contact, Instant (Impact)")
    contact_delayed = EnumValue(1200, "Contact, Delayed")
    _10_ms_delay = EnumValue(1201, "10 ms Delay")
    _20_ms_delay = EnumValue(1202, "20 ms Delay")
    _50_ms_delay = EnumValue(1205, "50 ms Delay")
    _60_ms_delay = EnumValue(1206, "60 ms Delay")
    _100_ms_delay = EnumValue(1210, "100 ms Delay")
    _125_ms_delay = EnumValue(1212, "125 ms Delay")
    _250_ms_delay = EnumValue(1225, "250 ms Delay")
    _5_ms_delay = EnumValue(1250, "5 ms Delay")
    _15_ms_delay = EnumValue(1251, "15 ms Delay")
    _25_ms_delay = EnumValue(1252, "25 ms Delay")
    _30_ms_delay = EnumValue(1253, "30 ms Delay")
    _35_ms_delay = EnumValue(1254, "35 ms Delay")
    _40_ms_delay = EnumValue(1255, "40 ms Delay")
    _45_ms_delay = EnumValue(1256, "45 ms Delay")
    _90_ms_delay = EnumValue(1257, "90 ms Delay")
    _120_ms_delay = EnumValue(1258, "120 ms Delay")
    _180_ms_delay = EnumValue(1259, "180 ms Delay")
    _240_ms_delay = EnumValue(1260, "240 ms Delay")
    contact_electronic_oblique_contact = EnumValue(1300, "Contact, Electronic (Oblique Contact)")
    contact_graze = EnumValue(1400, "Contact, Graze")
    contact_crush = EnumValue(1500, "Contact, Crush")
    contact_hydrostatic = EnumValue(1600, "Contact, Hydrostatic")
    contact_mechanical = EnumValue(1700, "Contact, Mechanical")
    contact_chemical = EnumValue(1800, "Contact, Chemical")
    contact_piezoelectric = EnumValue(1900, "Contact, Piezoelectric")
    contact_point_initiating = EnumValue(1910, "Contact, Point Initiating")
    contact_point_initiating_base_detonating = EnumValue(1920, "Contact, Point Initiating, Base Detonating")
    contact_base_detonating = EnumValue(1930, "Contact, Base Detonating")
    contact_ballistic_cap_and_base = EnumValue(1940, "Contact, Ballistic Cap and Base")
    contact_base = EnumValue(1950, "Contact, Base")
    contact_nose = EnumValue(1960, "Contact, Nose")
    contact_fitted_in_standoff_probe = EnumValue(1970, "Contact, Fitted in Standoff Probe")
    contact_non_aligned = EnumValue(1980, "Contact, Non-aligned")
    timed = EnumValue(2000, "Timed")
    timed_programmable = EnumValue(2100, "Timed, Programmable")
    timed_burnout = EnumValue(2200, "Timed, Burnout")
    timed_pyrotechnic = EnumValue(2300, "Timed, Pyrotechnic")
    timed_electronic = EnumValue(2400, "Timed, Electronic")
    timed_base_delay = EnumValue(2500, "Timed, Base Delay")
    timed_reinforced_nose_impact_delay = EnumValue(2600, "Timed, Reinforced Nose Impact Delay")
    timed_short_delay_impact = EnumValue(2700, "Timed, Short Delay Impact")
    _10_ms_delay_2 = EnumValue(2701, "10 ms Delay")
    _20_ms_delay_2 = EnumValue(2702, "20 ms Delay")
    _50_ms_delay_2 = EnumValue(2705, "50 ms Delay")
    _60_ms_delay_2 = EnumValue(2706, "60 ms Delay")
    _100_ms_delay_2 = EnumValue(2710, "100 ms Delay")
    _125_ms_delay_2 = EnumValue(2712, "125 ms Delay")
    _250_ms_delay_2 = EnumValue(2725, "250 ms Delay")
    timed_nose_mounted_variable_delay = EnumValue(2800, "Timed, Nose Mounted Variable Delay")
    timed_long_delay_side = EnumValue(2900, "Timed, Long Delay Side")
    timed_selectable_delay = EnumValue(2910, "Timed, Selectable Delay")
    timed_impact = EnumValue(2920, "Timed, Impact")
    timed_sequence = EnumValue(2930, "Timed, Sequence")
    proximity = EnumValue(3000, "Proximity")
    proximity_active_laser = EnumValue(3100, "Proximity, Active Laser")
    proximity_magnetic_magpolarity = EnumValue(3200, "Proximity, Magnetic (Magpolarity)")
    proximity_active_radar_doppler_radar = EnumValue(3300, "Proximity, Active Radar (Doppler Radar)")
    proximity_radio_frequency_rf = EnumValue(3400, "Proximity, Radio Frequency (RF)")
    proximity_programmable = EnumValue(3500, "Proximity, Programmable")
    proximity_programmable_prefragmented = EnumValue(3600, "Proximity, Programmable, Prefragmented")
    proximity_infrared = EnumValue(3700, "Proximity, Infrared")
    command = EnumValue(4000, "Command")
    command_electronic_remotely_set = EnumValue(4100, "Command, Electronic, Remotely Set")
    altitude = EnumValue(5000, "Altitude")
    altitude_radio_altimeter = EnumValue(5100, "Altitude, Radio Altimeter")
    altitude_air_burst = EnumValue(5200, "Altitude, Air Burst")
    depth = EnumValue(6000, "Depth")
    acoustic = EnumValue(7000, "Acoustic")
    pressure = EnumValue(8000, "Pressure")
    pressure_delay = EnumValue(8010, "Pressure, Delay")
    inert = EnumValue(8100, "Inert")
    dummy = EnumValue(8110, "Dummy")
    practice = EnumValue(8120, "Practice")
    plug_representing = EnumValue(8130, "Plug Representing")
    training = EnumValue(8150, "Training")
    pyrotechnic = EnumValue(9000, "Pyrotechnic")
    pyrotechnic_delay = EnumValue(9010, "Pyrotechnic, Delay")
    electro_optical = EnumValue(9100, "Electro-optical")
    electromechanical = EnumValue(9110, "Electromechanical")
    electromechanical_nose = EnumValue(9120, "Electromechanical, Nose")
    strikerless = EnumValue(9200, "Strikerless")
    strikerless_nose_impact = EnumValue(9210, "Strikerless, Nose Impact")
    strikerless_compression_ignition = EnumValue(9220, "Strikerless, Compression-Ignition")
    compression_ignition = EnumValue(9300, "Compression-Ignition")
    compression_ignition_strikerless_nose_impact = EnumValue(9310, "Compression-Ignition, Strikerless, Nose Impact")
    percussion = EnumValue(9400, "Percussion")
    percussion_instantaneous = EnumValue(9410, "Percussion, Instantaneous")
    electronic = EnumValue(9500, "Electronic")
    electronic_internally_mounted = EnumValue(9510, "Electronic, Internally Mounted")
    electronic_range_setting = EnumValue(9520, "Electronic, Range Setting")
    electronic_programmed = EnumValue(9530, "Electronic, Programmed")
    mechanical = EnumValue(9600, "Mechanical")
    mechanical_nose = EnumValue(9610, "Mechanical, Nose")
    mechanical_tail = EnumValue(9620, "Mechanical, Tail")
    default = other

    def get_marshaled_size(self):
        return 16
