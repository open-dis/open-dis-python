'''
/*
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
 // header autogenerated using string template dis7javalicense.txt
'''


from enum import Enum, EnumMeta
from pprint import pprint, pformat
from collections import OrderedDict, namedtuple
import ctypes

UInt8 = ctypes.c_uint8
UInt16 = ctypes.c_uint16
UInt32 = ctypes.c_uint32

EnumValue = namedtuple('EnumValue', ['value', 'description'])

# autogenerated using string template disenumpart1.txt
#  package edu.nps.moves.dis7.enumerations;

'''
/**
  * This <code>enum</code> type is generated from XML,
  * SisoDate : 
  * UID 11,
  * marshal size 8;
  * PlatformSurfaceCategory has 48 enumerations total.
  */
'''

class EnumMeta(EnumMeta):
    def __getitem__(cls, name):
        try:
            return super().__getitem__(name)
        except KeyError as error:
            return cls.UNKNOWN
    
    def __getattr__(cls, name):
        try:
            return super().__getattr__(name)
        except AttributeError as error:
            return cls.UNKNOWN

class ExtensibleEnum(Enum):
    @classmethod
    def add_custom_value(cls, value: int, name: str, desc:str):
        existingItem = [item for item in cls._value2member_map_ if item.value == value]

        enumValue = EnumValue(value, desc)
        obj = object.__new__(cls)
        
        obj._value_ = enumValue
        obj._name_ = name      
        obj._desc = desc
        obj.__objclass__ = cls
        
        if not existingItem:
            cls._member_map_[name] = obj
            cls._value2member_map_[enumValue] = enumValue
            cls._member_names_.append(name)
        else:
            enumIndex = list(OrderedDict(cls.__members__).keys())[value]
            cls._member_map_[enumIndex] = obj

    @property
    def get_description(self):
        return self.value.description

    @classmethod
    def to_string(cls) -> str:
        return pformat(OrderedDict(cls.__members__))

    @classmethod
    def is_valid(cls, kind: Enum) -> bool:
        if kind is cls.UNKNOWN:
            return False
        return kind in iter(cls)

    @staticmethod
    def describe(self):
        return self.name, self.value

    @classmethod
    def value_list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def _missing_(cls, value):
        return cls.default

    @classmethod
    def get_enum_key(cls, value:int) -> str:
        for unique_key, unique_value in OrderedDict(cls.__members__).items():
            if value == unique_value.value.value:
                return unique_key
        return 'UNKNOWN'

    @classmethod
    def get_enum(cls, value:int) -> Enum:
        key = cls.get_enum_key(value)
        return getattr(cls, key)

    def __int__(self):
        return self.value.value
    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)

class PlatformSurfaceCategory(ExtensibleEnum, metaclass=EnumMeta):
    UNKNOWN = EnumValue(-1, "UNKNOWN Enum")
    other = EnumValue(0, "Other")
    carrier = EnumValue(1, "Carrier")
    command_ship_cruiser = EnumValue(2, "Command Ship/Cruiser")
    guided_missile_cruiser = EnumValue(3, "Guided Missile Cruiser")
    guided_missile_destroyer_ddg = EnumValue(4, "Guided Missile Destroyer (DDG)")
    destroyer_dd = EnumValue(5, "Destroyer (DD)")
    guided_missile_frigate_ffg = EnumValue(6, "Guided Missile Frigate (FFG)")
    light_patrol_craft = EnumValue(7, "Light/Patrol Craft")
    mine_countermeasure_ship_craft = EnumValue(8, "Mine Countermeasure Ship/Craft")
    dock_landing_ship = EnumValue(9, "Dock Landing Ship")
    tank_landing_ship = EnumValue(10, "Tank Landing Ship")
    landing_craft = EnumValue(11, "Landing Craft")
    light_carrier = EnumValue(12, "Light Carrier")
    cruiser_helicopter_carrier = EnumValue(13, "Cruiser/Helicopter Carrier")
    hydrofoil = EnumValue(14, "Hydrofoil")
    air_cushion_surface_effect = EnumValue(15, "Air Cushion/Surface Effect")
    auxiliary = EnumValue(16, "Auxiliary")
    auxiliary_merchant_marine = EnumValue(17, "Auxiliary, Merchant Marine")
    utility = EnumValue(18, "Utility")
    unmanned_surface_vehicle_usv = EnumValue(19, "Unmanned Surface Vehicle (USV)")
    littoral_combat_ships_lcs = EnumValue(20, "Littoral Combat Ships (LCS)")
    surveillance_ship = EnumValue(21, "Surveillance Ship")
    frigate_including_corvette = EnumValue(50, "Frigate (including Corvette)")
    battleship = EnumValue(51, "Battleship")
    heavy_cruiser = EnumValue(52, "Heavy Cruiser")
    destroyer_tender = EnumValue(53, "Destroyer Tender")
    amphibious_assault_ship = EnumValue(54, "Amphibious Assault Ship")
    amphibious_cargo_ship = EnumValue(55, "Amphibious Cargo Ship")
    amphibious_transport_dock = EnumValue(56, "Amphibious Transport Dock")
    ammunition_ship = EnumValue(57, "Ammunition Ship")
    combat_stores_ship = EnumValue(58, "Combat Stores Ship")
    surveillance_towed_array_sonar_system_surtass = EnumValue(59, "Surveillance Towed Array Sonar System (SURTASS)")
    fast_combat_support_ship = EnumValue(60, "Fast Combat Support Ship")
    non_combatant_ship = EnumValue(61, "Non-Combatant Ship")
    coast_guard_cutters = EnumValue(62, "Coast Guard Cutters")
    coast_guard_boats = EnumValue(63, "Coast Guard Boats")
    fast_attack_craft = EnumValue(64, "Fast Attack Craft")
    inflatable_boat = EnumValue(65, "Inflatable Boat")
    # XREF UID 441 - CLASS PlatformSurfacePassengerVesselSubcategories 
    passenger_vessel_group_1_merchant = EnumValue(80, "Passenger Vessel (Group 1 Merchant)")
    # XREF UID 442 - CLASS PlatformSurfaceDryCargoShipSubcategories 
    dry_cargo_ship_group_2_merchant = EnumValue(81, "Dry Cargo Ship (Group 2 Merchant)")
    # XREF UID 443 - CLASS PlatformSurfaceTankerSubcategories 
    tanker_group_3_merchant = EnumValue(82, "Tanker (Group 3 Merchant)")
    offshore_support_vessel = EnumValue(83, "Offshore Support Vessel")
    # XREF UID 445 - CLASS PlatformSurfacePrivateMotorboatSubcategories 
    private_motorboat = EnumValue(84, "Private Motorboat")
    # XREF UID 446 - CLASS PlatformSurfacePrivateSailboatSubcategories 
    private_sailboat = EnumValue(85, "Private Sailboat")
    # XREF UID 447 - CLASS PlatformSurfaceFishingVesselSubcategories 
    fishing_vessel = EnumValue(86, "Fishing Vessel")
    # XREF UID 448 - CLASS PlatformSurfaceOtherVesselsSubcategories 
    other_vessels = EnumValue(87, "Other Vessels")
    search_and_rescue_vessels = EnumValue(100, "Search and Rescue Vessels")
    # XREF UID 633 - CLASS LifeSavingEquipment 
    life_saving_equipment = EnumValue(101, "Life-Saving Equipment")
    default = other

    def get_marshaled_size(self):
        return 8
