from enum import Enum

from .iffpdu_layer3interrogator_format_data import IFFPduLayer3InterrogatorFormatData
from .siso_ref_010.enums.dis_pdu_type import DisPduType
from .vector3float import Vector3Float
from .entity_id import EntityID
from .event_identifier import EventIdentifier
from .distributed_emissions_regeneration_family_pdu import DistributedEmissionsRegenerationFamilyPdu
from .iffpdu_layer4interrogator_format_data import IFFPduLayer4InterrogatorFormatData
from .iffpdu_layer2data import IFFPduLayer2Data
from .fundamental_operational_data import FundamentalOperationalData
from .system_identifier import SystemIdentifier
from .iffpdu_layer4transponder_format_data import IFFPduLayer4TransponderFormatData
from .iffpdu_layer5data import IFFPduLayer5Data
from .iffpdu_layer3transponder_format_data import IFFPduLayer3TransponderFormatData

class IFFPdu( DistributedEmissionsRegenerationFamilyPdu ):
    """7.6.5.1 Information about military and civilian interrogators, transponders, and specific other electronic systems. See 5.7.6"""

    def __init__(self):
        """ Initializer for IFFPdu"""
        super().__init__()
        """ ID of the entity that is the source of the emissions. Part of Layer 1 basic system data 7.6.5.2."""
        self.emittingEntityId = EntityID()
        """ Number generated by the issuing simulation to associate realted events. Part of Layer 1 basic system data 7.6.5.2."""
        self.eventID = EventIdentifier()
        """ Location wrt entity. There is some ambiguity in the standard here, but this is the order it is listed in the table. Part of Layer 1 basic system data 7.6.5.2."""
        self.location = Vector3Float()
        """ System ID information. Part of Layer 1 basic system data 7.6.5.2."""
        self.systemID = SystemIdentifier()
        """ Part of Layer 1 basic system data 7.6.5.2."""
        self.systemDesignator = 0
        """ Part of Layer 1 basic system data 7.6.5.2."""
        self.systemSpecificData = 0
        """ Fundamental parameters. Part of Layer 1 basic system data 7.6.5.2."""
        self.fundamentalParameters = FundamentalOperationalData()
        """ IFF pdu layer 2 data"""
        self.iFFPduLayer2Data = IFFPduLayer2Data()
        """ IFF pdu layer 3 transponder format data"""
        self.iFFPduLayer3TransponderFormatData = IFFPduLayer3TransponderFormatData()
        """ IFF pdu layer 3 interrogator format data"""
        self.iFFPduLayer3InterrogatorFormatData = IFFPduLayer3InterrogatorFormatData()
        """ IFF pdu layer 4 interrogator format data"""
        self.iFFPduLayer4InterrogatorFormatData = IFFPduLayer4InterrogatorFormatData()
        """ IFF pdu layer 4 transponder format data"""
        self.iFFPduLayer4TransponderFormatData = IFFPduLayer4TransponderFormatData()
        """ IFF pdu layer 5 data communications"""
        self.iFFPduLayer5Data = IFFPduLayer5Data()
        self.pduType = DisPduType.identification_friend_or_foe

    def to_string(self) ->str:
        outputString = ""
        outputString += super().to_string()
        outputString += "EmittingEntityId :" + "\n" + self.emittingEntityId.to_string() + "\n"
        outputString += "EventID :" + "\n" + self.eventID.to_string() + "\n"
        outputString += "Location :" + "\n" + self.location.to_string() + "\n"
        outputString += "SystemID :" + "\n" + self.systemID.to_string() + "\n"
        outputString += "SystemDesignator : " + str(self.systemDesignator) + "\n"
        outputString += "SystemSpecificData : " + str(self.systemSpecificData) + "\n"
        outputString += "FundamentalParameters :" + "\n" + self.fundamentalParameters.to_string() + "\n"
        outputString += "IFFPduLayer2Data :" + "\n" + self.iFFPduLayer2Data.to_string() + "\n"
        outputString += "IFFPduLayer3TransponderFormatData :" + "\n" + self.iFFPduLayer3TransponderFormatData.to_string() + "\n"
        outputString += "IFFPduLayer3InterrogatorFormatData :" + "\n" + self.iFFPduLayer3InterrogatorFormatData.to_string() + "\n"
        outputString += "IFFPduLayer4InterrogatorFormatData :" + "\n" + self.iFFPduLayer4InterrogatorFormatData.to_string() + "\n"
        outputString += "IFFPduLayer4TransponderFormatData :" + "\n" + self.iFFPduLayer4TransponderFormatData.to_string() + "\n"
        outputString += "IFFPduLayer5Data :" + "\n" + self.iFFPduLayer5Data.to_string() + "\n"
        return outputString

    def __str__(self):
        return self.to_string()

    def serialize_enum(self, enumValue, outputStream):
        enumSize = enumValue.get_marshaled_size()
        marshallers = {8 : 'byte', 16 : 'short', 32 : 'int'}
        marshalFunction = getattr(outputStream, 'write_unsigned_' + marshallers[enumSize])
        result = marshalFunction(int(enumValue))

    def parse_enum(self, enumValue, intputStream) -> int:
        enumSize = enumValue.get_marshaled_size()
        marshallers = {8 : 'byte', 16 : 'short', 32 : 'int'}
        marshalFunction = getattr(intputStream, 'read_unsigned_' + marshallers[enumSize])
        return marshalFunction()

    def serialize(self, outputStream):
        """serialize the class """
        super( IFFPdu, self ).serialize(outputStream)
        self.emittingEntityId.serialize(outputStream)
        self.eventID.serialize(outputStream)
        self.location.serialize(outputStream)
        self.systemID.serialize(outputStream)
        outputStream.write_byte(int(self.systemDesignator))
        outputStream.write_byte(int(self.systemSpecificData))
        self.fundamentalParameters.serialize(outputStream)
        self.iFFPduLayer2Data.serialize(outputStream)
        self.iFFPduLayer3TransponderFormatData.serialize(outputStream)
        self.iFFPduLayer3InterrogatorFormatData.serialize(outputStream)
        self.iFFPduLayer4InterrogatorFormatData.serialize(outputStream)
        self.iFFPduLayer4TransponderFormatData.serialize(outputStream)
        self.iFFPduLayer5Data.serialize(outputStream)

    def parse(self, inputStream):
        """"Parse a message. This may recursively call embedded objects."""
        super( IFFPdu, self).parse(inputStream)
        self.emittingEntityId.parse(inputStream)
        self.eventID.parse(inputStream)
        self.location.parse(inputStream)
        self.systemID.parse(inputStream)
        self.systemDesignator = inputStream.read_byte()
        self.systemSpecificData = inputStream.read_byte()
        self.fundamentalParameters.parse(inputStream)
        self.iFFPduLayer2Data.parse(inputStream)
        self.iFFPduLayer3TransponderFormatData.parse(inputStream)
        self.iFFPduLayer3InterrogatorFormatData.parse(inputStream)
        self.iFFPduLayer4InterrogatorFormatData.parse(inputStream)
        self.iFFPduLayer4TransponderFormatData.parse(inputStream)
        self.iFFPduLayer5Data.parse(inputStream)

    # Get the number of attributes defined by SISO
    def get_design_attribute_count(self) -> int:
        return 13

    def get_attribute_count(self) -> int:
        attrList = list()
        for attr in dir(self):
            if not callable(getattr(self, attr)):
                if not attr.startswith("__"):
                    if not hasattr(self.__class__.__base__(), attr):
                        attrList.append(attr)
        return len(attrList)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)

    def diff(self,other) -> set:
        diffs = set()
        for key, value in self.__dict__.items():
            value2 = other.__dict__[key]
            if (value != value2):
                if type(value) is list:
                    diffs.add((key, str(value)))
                    diffs.add((key, str(value2)))
                elif (type(value).__module__ == "builtins"):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, Enum)):
                    diffs.add((key, value))
                    diffs.add((key, value2))
                elif (isinstance(value, object)):
                    diffs.update(value.diff(value2))
                else:
                    diffs.add((key, value))
                    diffs.add((key, value2))
        return(diffs)



